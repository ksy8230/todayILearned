{"version":3,"file":"component---src-pages-404-js-0c66d2172856118fd382.js","mappings":"iMA4DA,EAvDe,SAAH,GAAgC,IAA1BA,EAAQ,EAARA,SAAUC,EAAQ,EAARA,SAEpBC,EADcC,oBACDH,EAASI,UAGfC,EAAAA,EAAAA,gBAAe,cAiC5B,OACE,uBAAKC,UAAU,iBAAiB,oBAAmBJ,GACjD,0BAAQI,UAAU,iBAChB,gBAAC,EAAAC,KAAI,CAACC,GAAG,KAAG,kBAEd,gBAAC,IAAG,CAACC,MAAM,cACX,uBAAKH,UAAU,iBACb,4BAAOL,GACP,oEAEE,qBAAGS,KAAK,+BAKlB,C,yDC9CMC,EAAM,SAAH,GAA4C,IAAD,MAArCC,EAAW,EAAXA,YAAaC,EAAI,EAAJA,KAAMC,EAAI,EAAJA,KAAML,EAAK,EAALA,MAC9BM,GAASV,EAAAA,EAAAA,gBAAe,cAAxBU,KAgBFC,EAAkBJ,GAAeG,EAAKE,aAAaL,YACnDM,EAAgC,QAApB,EAAGH,EAAKE,oBAAY,aAAjB,EAAmBR,MAExC,OACE,gBAAC,IAAM,CACLU,eAAgB,CACdN,KAAAA,GAEFJ,MAAOA,EACPW,cAAeF,EAAY,QAAWA,EAAiB,KACvDJ,KAAM,CACJ,CACEO,KAAK,cACLC,QAASN,GAEX,CACEO,SAAS,WACTD,QAASb,GAEX,CACEc,SAAS,iBACTD,QAASN,GAEX,CACEO,SAAS,UACTD,QAAQ,WAEV,CACED,KAAK,eACLC,QAAQ,WAEV,CACED,KAAK,kBACLC,SAA0B,QAAjB,EAAAP,EAAKE,oBAAY,OAAQ,QAAR,EAAjB,EAAmBO,cAAM,WAAR,EAAjB,EAA2BC,UAAO,IAE7C,CACEJ,KAAK,gBACLC,QAASb,GAEX,CACEY,KAAK,sBACLC,QAASN,GAEX,CACEK,KAAK,2BACLC,QAAS,gDAEXI,OAAOZ,IAGf,EAEAH,EAAIgB,aAAe,CACjBd,KAAK,KACLC,KAAM,GACNF,YAAY,IAUd,K,+DC5EA,UAZqB,SAAH,GAA4B,IAAtBgB,EAAI,EAAJA,KAAM5B,EAAQ,EAARA,SACtB6B,EAAYD,EAAKb,KAAKE,aAAaR,MAEzC,OACE,gBAAC,IAAM,CAACT,SAAUA,EAAUS,MAAOoB,GACjC,gBAAC,IAAG,CAACpB,MAAM,mBACX,4CACA,oFAGN,C","sources":["webpack://gatsby-starter-blog/./src/components/layout.js","webpack://gatsby-starter-blog/./src/components/seo.js","webpack://gatsby-starter-blog/./src/pages/404.js"],"sourcesContent":["import * as React from \"react\"\r\nimport { Link, graphql, useStaticQuery } from \"gatsby\"\r\nimport LeftNavigation from \"./lefNavigation\"\r\nimport Seo from \"./seo\"\r\n\r\nconst Layout = ({ location, children }) => {\r\n  const rootPath = `${__PATH_PREFIX__}/`\r\n  const isRootPath = location.pathname === rootPath\r\n  let header, sidebar\r\n\r\n  const data = useStaticQuery(graphql`\r\n    query postsByTags($tag: String) {\r\n      posts: allMarkdownRemark(\r\n        sort: { fields: [frontmatter___date], order: DESC }\r\n        filter: { frontmatter: { tags: { eq: $tag } } }\r\n      ) {\r\n        categories: group(field: frontmatter___tags) {\r\n          name: fieldValue\r\n          totalCount\r\n        }\r\n        nodes {\r\n          fields {\r\n            slug\r\n          }\r\n          frontmatter {\r\n            date(formatString: \"YYYY-MM-DD\")\r\n            title\r\n            tags\r\n            description\r\n            publish\r\n            image {\r\n              childImageSharp {\r\n                fluid {\r\n                  ...GatsbyImageSharpFluid\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  `)\r\n\r\n  return (\r\n    <div className=\"global-wrapper\" data-is-root-path={isRootPath}>\r\n      <header className=\"global-header\">\r\n        <Link to=\"/\">Today I Learn</Link>\r\n      </header>\r\n      <Seo title=\"All posts\" />\r\n      <div className=\"contents-wrap\">\r\n        <main>{children}</main>\r\n        <footer>\r\n          Â© 2021, COPYRIGHT ALL RIGHT KSY8230\r\n          <a href=\"https://www.gatsbyjs.com\"></a>\r\n        </footer>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Layout\r\n","/**\r\n * SEO component that queries for data with\r\n *  Gatsby's useStaticQuery React hook\r\n *\r\n * See: https://www.gatsbyjs.com/docs/use-static-query/\r\n */\r\n\r\nimport * as React from \"react\"\r\nimport PropTypes from \"prop-types\"\r\nimport { Helmet } from \"react-helmet\"\r\nimport { useStaticQuery, graphql } from \"gatsby\"\r\n\r\nconst Seo = ({ description, lang, meta, title }) => {\r\n  const { site } = useStaticQuery(\r\n    graphql`\r\n      query {\r\n        site {\r\n          siteMetadata {\r\n            title\r\n            description\r\n            social {\r\n              twitter\r\n            }\r\n          }\r\n        }\r\n      }\r\n    `\r\n  )\r\n\r\n  const metaDescription = description || site.siteMetadata.description\r\n  const defaultTitle = site.siteMetadata?.title\r\n\r\n  return (\r\n    <Helmet\r\n      htmlAttributes={{\r\n        lang,\r\n      }}\r\n      title={title}\r\n      titleTemplate={defaultTitle ? `%s | ${defaultTitle}` : null}\r\n      meta={[\r\n        {\r\n          name: `description`,\r\n          content: metaDescription,\r\n        },\r\n        {\r\n          property: `og:title`,\r\n          content: title,\r\n        },\r\n        {\r\n          property: `og:description`,\r\n          content: metaDescription,\r\n        },\r\n        {\r\n          property: `og:type`,\r\n          content: `website`,\r\n        },\r\n        {\r\n          name: `twitter:card`,\r\n          content: `summary`,\r\n        },\r\n        {\r\n          name: `twitter:creator`,\r\n          content: site.siteMetadata?.social?.twitter || ``,\r\n        },\r\n        {\r\n          name: `twitter:title`,\r\n          content: title,\r\n        },\r\n        {\r\n          name: `twitter:description`,\r\n          content: metaDescription,\r\n        },\r\n        {\r\n          name: `google-site-verification`,\r\n          content: \"M0Wa_Sh6Ip9woLirwOec9KhuVfJmogHmiDoSA0nZEc0\",\r\n        },\r\n      ].concat(meta)}\r\n    />\r\n  )\r\n}\r\n\r\nSeo.defaultProps = {\r\n  lang: `en`,\r\n  meta: [],\r\n  description: ``,\r\n}\r\n\r\nSeo.propTypes = {\r\n  description: PropTypes.string,\r\n  lang: PropTypes.string,\r\n  meta: PropTypes.arrayOf(PropTypes.object),\r\n  title: PropTypes.string.isRequired,\r\n}\r\n\r\nexport default Seo\r\n","import * as React from \"react\"\r\nimport { graphql } from \"gatsby\"\r\n\r\nimport Layout from \"../components/layout\"\r\nimport Seo from \"../components/seo\"\r\n\r\nconst NotFoundPage = ({ data, location }) => {\r\n  const siteTitle = data.site.siteMetadata.title\r\n\r\n  return (\r\n    <Layout location={location} title={siteTitle}>\r\n      <Seo title=\"404: Not Found\" />\r\n      <h1>404: Not Found</h1>\r\n      <p>You just hit a route that doesn&#39;t exist... the sadness.</p>\r\n    </Layout>\r\n  )\r\n}\r\n\r\nexport default NotFoundPage\r\n\r\nexport const pageQuery = graphql`\r\n  query {\r\n    site {\r\n      siteMetadata {\r\n        title\r\n      }\r\n    }\r\n  }\r\n`\r\n"],"names":["location","children","isRootPath","__PATH_PREFIX__","pathname","useStaticQuery","className","Link","to","title","href","Seo","description","lang","meta","site","metaDescription","siteMetadata","defaultTitle","htmlAttributes","titleTemplate","name","content","property","social","twitter","concat","defaultProps","data","siteTitle"],"sourceRoot":""}