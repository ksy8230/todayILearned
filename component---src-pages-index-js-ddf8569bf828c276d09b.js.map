{"version":3,"file":"component---src-pages-index-js-ddf8569bf828c276d09b.js","mappings":"uJAyDA,IA9CY,WAAO,IAAD,IACVA,GAAOC,EAAAA,EAAAA,gBAAe,cAiBhB,UAAGD,EAAKE,KAAKC,oBAAb,OAAG,EAAwBC,OAC3B,UAAGJ,EAAKE,KAAKC,oBAAb,OAAG,EAAwBE,OAEvC,OACE,uBAAKC,UAAU,OACb,wC,kFCsHN,UAjJkB,SAAC,GAAwB,IAAD,EAArBN,EAAqB,EAArBA,KAAMO,EAAe,EAAfA,SACnBC,GAAY,UAAAR,EAAKE,KAAKC,oBAAV,eAAwBM,QAAxB,QACZC,EAAQV,EAAKW,kBAAkBC,MAE/BC,EAAeH,EAAMI,QAAO,SAAAC,GAAI,OACpCA,EAAKC,OAAOC,KAAKC,SAAS,gBAEtBC,EAAcT,EAAMI,QAAO,SAAAC,GAAI,OAAIA,EAAKC,OAAOC,KAAKC,SAAS,cAC7DE,EAAUV,EAAMI,QAAO,SAAAC,GAAI,OAAIA,EAAKC,OAAOC,KAAKC,SAAS,kBACzDG,EAAcX,EAAMI,QAAO,SAAAC,GAAI,OAAIA,EAAKC,OAAOC,KAAKC,SAAS,cAEnE,OAAqB,IAAjBR,EAAMY,OAEN,gBAAC,IAAD,CAAQf,SAAUA,EAAUE,MAAOD,GACjC,gBAAC,IAAD,CAAKC,MAAM,cACX,gBAAC,IAAD,MACA,uLAUJ,gBAAC,IAAD,CAAQF,SAAUA,EAAUE,MAAOD,GACjC,gBAAC,IAAD,CAAKC,MAAM,cACX,gBAAC,IAAD,MACA,oCACA,sBAAIc,MAAO,CAAEC,UAAU,SACpBL,EAAYM,KAAI,SAAAV,GACf,IAAMN,EAAQM,EAAKW,YAAYjB,OAASM,EAAKC,OAAOC,KAGpD,OAFAU,QAAQC,IAAIb,GAGV,sBAAIc,IAAKd,EAAKC,OAAOC,MACnB,2BACEX,UAAU,iBACVwB,WAAS,EACTC,SAAS,6BAET,8BACE,yBACE,gBAAC,EAAAC,KAAD,CAAMC,GAAE,GAAKlB,EAAKC,OAAOC,KAAQiB,SAAS,OACxC,wBAAMA,SAAS,YAAYzB,KAG/B,6BAAQM,EAAKW,YAAYS,aAerC,wCACA,sBAAIZ,MAAO,CAAEC,UAAU,SACpBX,EAAaY,KAAI,SAAAV,GAChB,IAAMN,EAAQM,EAAKW,YAAYjB,OAASM,EAAKC,OAAOC,KAGpD,OAFAU,QAAQC,IAAIb,GAGV,sBAAIc,IAAKd,EAAKC,OAAOC,MACnB,2BACEX,UAAU,iBACVwB,WAAS,EACTC,SAAS,6BAET,8BACE,yBACE,gBAAC,EAAAC,KAAD,CAAMC,GAAE,GAAKlB,EAAKC,OAAOC,KAAQiB,SAAS,OACxC,wBAAMA,SAAS,YAAYzB,KAG/B,6BAAQM,EAAKW,YAAYS,aAOrC,wCACA,sBAAIZ,MAAO,CAAEC,UAAU,SACpBJ,EAAQK,KAAI,SAAAV,GACX,IAAMN,EAAQM,EAAKW,YAAYjB,OAASM,EAAKC,OAAOC,KAGpD,OAFAU,QAAQC,IAAIb,GAGV,sBAAIc,IAAKd,EAAKC,OAAOC,MACnB,2BACEX,UAAU,iBACVwB,WAAS,EACTC,SAAS,6BAET,8BACE,yBACE,gBAAC,EAAAC,KAAD,CAAMC,GAAE,GAAKlB,EAAKC,OAAOC,KAAQiB,SAAS,OACxC,wBAAMA,SAAS,YAAYzB,KAG/B,6BAAQM,EAAKW,YAAYS,aAOrC,oCACA,sBAAIZ,MAAO,CAAEC,UAAU,SACpBH,EAAYI,KAAI,SAAAV,GACf,IAAMN,EAAQM,EAAKW,YAAYjB,OAASM,EAAKC,OAAOC,KAGpD,OAFAU,QAAQC,IAAIb,GAGV,sBAAIc,IAAKd,EAAKC,OAAOC,MACnB,2BACEX,UAAU,iBACVwB,WAAS,EACTC,SAAS,6BAET,8BACE,yBACE,gBAAC,EAAAC,KAAD,CAAMC,GAAE,GAAKlB,EAAKC,OAAOC,KAAQiB,SAAS,OACxC,wBAAMA,SAAS,YAAYzB,KAG/B,6BAAQM,EAAKW,YAAYS","sources":["webpack://gatsby-starter-blog/./src/components/bio.js","webpack://gatsby-starter-blog/./src/pages/index.js"],"sourcesContent":["/**\r\n * Bio component that queries for data\r\n * with Gatsby's useStaticQuery component\r\n *\r\n * See: https://www.gatsbyjs.com/docs/use-static-query/\r\n */\r\n\r\nimport * as React from \"react\"\r\nimport { useStaticQuery, graphql } from \"gatsby\"\r\nimport { StaticImage } from \"gatsby-plugin-image\"\r\n\r\nconst Bio = () => {\r\n  const data = useStaticQuery(graphql`\r\n    query BioQuery {\r\n      site {\r\n        siteMetadata {\r\n          author {\r\n            name\r\n            summary\r\n          }\r\n          social {\r\n            twitter\r\n          }\r\n        }\r\n      }\r\n    }\r\n  `)\r\n\r\n  // Set these values by editing \"siteMetadata\" in gatsby-config.js\r\n  const author = data.site.siteMetadata?.author\r\n  const social = data.site.siteMetadata?.social\r\n\r\n  return (\r\n    <div className=\"bio\">\r\n      <p>무엇이든 꾸준히</p>\r\n      {/* <StaticImage\r\n        className=\"bio-avatar\"\r\n        layout=\"fixed\"\r\n        formats={[\"auto\", \"webp\", \"avif\"]}\r\n        src=\"../images/profile-pic.png\"\r\n        width={50}\r\n        height={50}\r\n        quality={95}\r\n        alt=\"Profile picture\"\r\n      />\r\n      {author?.name && (\r\n        <p>\r\n          Written by <strong>{author.name}</strong> {author?.summary || null}\r\n          <a href={`https://twitter.com/${social?.twitter || ``}`}>\r\n            You should follow them on Twitter\r\n          </a>\r\n        </p>\r\n      )} */}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Bio\r\n","import * as React from \"react\"\r\nimport { Link, graphql } from \"gatsby\"\r\n\r\nimport Bio from \"../components/bio\"\r\nimport Layout from \"../components/layout\"\r\nimport Seo from \"../components/seo\"\r\n\r\nconst BlogIndex = ({ data, location }) => {\r\n  const siteTitle = data.site.siteMetadata?.title || `Title`\r\n  const posts = data.allMarkdownRemark.nodes\r\n\r\n  const bugListPosts = posts.filter(post =>\r\n    post.fields.slug.includes(\"/bugLists\")\r\n  )\r\n  const reviewPosts = posts.filter(post => post.fields.slug.includes(\"/review\"))\r\n  const jsPosts = posts.filter(post => post.fields.slug.includes(\"/javascript\"))\r\n  const dockerPosts = posts.filter(post => post.fields.slug.includes(\"/docker\"))\r\n\r\n  if (posts.length === 0) {\r\n    return (\r\n      <Layout location={location} title={siteTitle}>\r\n        <Seo title=\"All posts\" />\r\n        <Bio />\r\n        <p>\r\n          No blog posts found. Add markdown posts to \"content/blog\" (or the\r\n          directory you specified for the \"gatsby-source-filesystem\" plugin in\r\n          gatsby-config.js).\r\n        </p>\r\n      </Layout>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Layout location={location} title={siteTitle}>\r\n      <Seo title=\"All posts\" />\r\n      <Bio />\r\n      <h2>Review</h2>\r\n      <ol style={{ listStyle: `none` }}>\r\n        {reviewPosts.map(post => {\r\n          const title = post.frontmatter.title || post.fields.slug\r\n          console.log(post)\r\n\r\n          return (\r\n            <li key={post.fields.slug}>\r\n              <article\r\n                className=\"post-list-item\"\r\n                itemScope\r\n                itemType=\"http://schema.org/Article\"\r\n              >\r\n                <header>\r\n                  <p>\r\n                    <Link to={`${post.fields.slug}`} itemProp=\"url\">\r\n                      <span itemProp=\"headline\">{title}</span>\r\n                    </Link>\r\n                  </p>\r\n                  <small>{post.frontmatter.date}</small>\r\n                </header>\r\n                {/* <section>\r\n                  <p\r\n                    dangerouslySetInnerHTML={{\r\n                      __html: post.frontmatter.description || post.excerpt,\r\n                    }}\r\n                    itemProp=\"description\"\r\n                  />\r\n                </section> */}\r\n              </article>\r\n            </li>\r\n          )\r\n        })}\r\n      </ol>\r\n      <h2>Bug Report</h2>\r\n      <ol style={{ listStyle: `none` }}>\r\n        {bugListPosts.map(post => {\r\n          const title = post.frontmatter.title || post.fields.slug\r\n          console.log(post)\r\n\r\n          return (\r\n            <li key={post.fields.slug}>\r\n              <article\r\n                className=\"post-list-item\"\r\n                itemScope\r\n                itemType=\"http://schema.org/Article\"\r\n              >\r\n                <header>\r\n                  <p>\r\n                    <Link to={`${post.fields.slug}`} itemProp=\"url\">\r\n                      <span itemProp=\"headline\">{title}</span>\r\n                    </Link>\r\n                  </p>\r\n                  <small>{post.frontmatter.date}</small>\r\n                </header>\r\n              </article>\r\n            </li>\r\n          )\r\n        })}\r\n      </ol>\r\n      <h2>Javascript</h2>\r\n      <ol style={{ listStyle: `none` }}>\r\n        {jsPosts.map(post => {\r\n          const title = post.frontmatter.title || post.fields.slug\r\n          console.log(post)\r\n\r\n          return (\r\n            <li key={post.fields.slug}>\r\n              <article\r\n                className=\"post-list-item\"\r\n                itemScope\r\n                itemType=\"http://schema.org/Article\"\r\n              >\r\n                <header>\r\n                  <p>\r\n                    <Link to={`${post.fields.slug}`} itemProp=\"url\">\r\n                      <span itemProp=\"headline\">{title}</span>\r\n                    </Link>\r\n                  </p>\r\n                  <small>{post.frontmatter.date}</small>\r\n                </header>\r\n              </article>\r\n            </li>\r\n          )\r\n        })}\r\n      </ol>\r\n      <h2>Docker</h2>\r\n      <ol style={{ listStyle: `none` }}>\r\n        {dockerPosts.map(post => {\r\n          const title = post.frontmatter.title || post.fields.slug\r\n          console.log(post)\r\n\r\n          return (\r\n            <li key={post.fields.slug}>\r\n              <article\r\n                className=\"post-list-item\"\r\n                itemScope\r\n                itemType=\"http://schema.org/Article\"\r\n              >\r\n                <header>\r\n                  <p>\r\n                    <Link to={`${post.fields.slug}`} itemProp=\"url\">\r\n                      <span itemProp=\"headline\">{title}</span>\r\n                    </Link>\r\n                  </p>\r\n                  <small>{post.frontmatter.date}</small>\r\n                </header>\r\n              </article>\r\n            </li>\r\n          )\r\n        })}\r\n      </ol>\r\n    </Layout>\r\n  )\r\n}\r\n\r\nexport default BlogIndex\r\n\r\nexport const pageQuery = graphql`\r\n  query {\r\n    site {\r\n      siteMetadata {\r\n        title\r\n      }\r\n    }\r\n    allMarkdownRemark(sort: { fields: [frontmatter___date], order: DESC }) {\r\n      nodes {\r\n        excerpt\r\n        fields {\r\n          slug\r\n        }\r\n        frontmatter {\r\n          date(formatString: \"MMMM DD, YYYY\")\r\n          title\r\n          description\r\n        }\r\n      }\r\n    }\r\n  }\r\n`\r\n"],"names":["data","useStaticQuery","site","siteMetadata","author","social","className","location","siteTitle","title","posts","allMarkdownRemark","nodes","bugListPosts","filter","post","fields","slug","includes","reviewPosts","jsPosts","dockerPosts","length","style","listStyle","map","frontmatter","console","log","key","itemScope","itemType","Link","to","itemProp","date"],"sourceRoot":""}