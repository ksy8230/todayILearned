{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/base/web-performance/",
    "result": {"data":{"site":{"siteMetadata":{"title":"ksy8230.github.io"}},"markdownRemark":{"id":"4f611cac-9c08-5cc0-a576-73ca10d6399d","excerpt":"웹반응성 로딩 성능 개선 실험적 환경 속 테스트\r\n리얼 유저 환경 속 테스트 성능 개선 가이드 로드 이후 인터렉션(상호작용)에 집중 사용자인식 연구 결과\r\n사용자 입력 이후 100ms 이내 반응하는게 목표 웹 반응성 지표들\r\nTBT INP CLS total blocking time…","html":"<p>웹반응성</p>\n<p>로딩 성능 개선</p>\n<p>실험적 환경 속 테스트\r\n리얼 유저 환경 속 테스트</p>\n<p>성능 개선 가이드</p>\n<p>로드 이후 인터렉션(상호작용)에 집중</p>\n<p>사용자인식 연구 결과\r\n사용자 입력 이후 100ms 이내 반응하는게 목표</p>\n<p>웹 반응성 지표들\r\nTBT INP CLS</p>\n<ol>\n<li>total blocking time</li>\n</ol>\n<p>= 인터렉션 동안 발생한 총 블럭킹 시간의 합</p>\n<ol start=\"2\">\n<li>interaction to next paint</li>\n</ol>\n<p>= 사용자 입력이 발생하고 화면의 변화가 생길때까지의 시간</p>\n<p>사용자 입력이 발생하고 그 전의 작업이 끝날때까지 발생한 시간\r\n사용자 입력에 대한 이벤트 핸들러를 처리하는 시간\r\n사용자에게 전달할 시각적 피드백이 브라우저에서 돔에 반영되고 화면에 나타나기까지 걸리는 시간</p>\n<ol start=\"3\">\n<li>cumulative layout shift</li>\n</ol>\n<p>= 페이지 전체 수명동안 발생하는 예기치 않은 레이아웃 이동 점수</p>\n<p>반응성 측정 도구\r\n라이트하우스\r\n= 특정 환경에서 로드 성능 개선을 포함한 다양한 성능 측정\r\n&#x26; lighthouse user flow\r\n= 네비게이션 + 스냅샷 + 타임스팬\r\n= 단일 페이지 로드 성능 측정 + 사용자 인터렉션 후 페이지 상태 측정 + 임의의 시간동안 사용자 인터렉션 측정\r\n2. spa나 복잡한 폼의 접근성 이슈 확인</p>\n<ul>\n<li>performance, accessibility, best practice, seo</li>\n</ul>\n<p>크롬 데브툴스 리코더를 활용해 json 값을 가져와 cypress 같은 라이브러리로 실행하면 해당 수행 동작에 따라 반응성이 측정된 리포트를 볼 수 있다</p>\n<ol>\n<li>total blocking time 개선 사례</li>\n</ol>\n<p>브라우저가 화면을 렌더링하는 과정\r\n1.브라우저가 자바스크립트를 실행\r\n2.그 결과로 각 엘리먼트들의 스타일과 레이아웃을 계산\r\n3. 페인트 과정에서 이 계산된 결과를 화면에 어떻게 그릴지 전달\r\n4. 컴포짓 단계에서 실제 화면에 반영</p>\n<p>하지만 자바스크립트를 실행하는 과정에서 계산되지 않은 스타일 혹은 레이아웃을 참조해야하는 경우 강제로 계산하는 리플로우 과정이 추가되어 자바스크립트 수행 시간이 길어진다.</p>\n<p>개선\r\n계산되지 않은 스타일 및 레이아웃을 참조하지 않기 위해서 1~4과정이 수행된 뒤 참조할 수 있도록 자바스크립트 실행을 다음 프레임에 전달하는 requestAnimation 함수를 활용할 수 있다</p>\n<ol start=\"2\">\n<li>interaction to next paint</li>\n</ol>\n<p>긴급 업데이트, 전환 업데이트로 나눠서 사용자가 직접 클릭한 영역만 바로 업데이트되고 나머지 영역은 그 뒤에 업데이트되도록 수정 (react18에서 제공하는 api 함수 활용)\r\nstartTransition</p>\n<ol start=\"3\">\n<li>cumulative layout shift</li>\n</ol>\n<p>최소 height 값을 부여해 레이아웃이 전후가 유지되도록 활용</p>\n<p>정리\r\n반응성 지표별 개선</p>\n<ul>\n<li>블로킹 타임 발생시 강제 리플로우를 확인</li>\n<li>전체 화면 업데이트 발생 시 중요 부분 우선 업데이트 진행</li>\n</ul>","frontmatter":{"title":"웹 성능 개선 지표들","date":"2022-12-12","description":null,"tags":["base"]},"tableOfContents":""},"previous":{"fields":{"slug":"/javascript/how_it_works5/"},"frontmatter":{"title":"Javascript 기본-클래스"}},"next":null},"pageContext":{"id":"4f611cac-9c08-5cc0-a576-73ca10d6399d","previousPostId":"d7dad876-e04b-5d97-b218-128b73b92e42","nextPostId":null}},
    "staticQueryHashes": ["2841359383","3708219967"]}