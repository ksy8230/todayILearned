{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/base/인코딩의 종류/",
    "result": {"data":{"site":{"siteMetadata":{"title":"Today I Learned"}},"markdownRemark":{"id":"253a63da-545f-553c-b745-a8f81e366c66","excerpt":"이미지 파일을 웹에서 표현할 때 이미지 태그 속 src=\"\" 속성값은 크게 두 가지 방식으로 표현이 가능하다. 해당 이미지 파일의 경로를 넣는 방식 ex. src=“./image/test.png” 데이터를 직접 넣는 방식 ex. src=“data:image/jpeg;base6…","html":"<p>이미지 파일을 웹에서 표현할 때 이미지 태그 속 src=\"\" 속성값은 크게 두 가지 방식으로 표현이 가능하다.</p>\n<ol>\n<li>해당 이미지 파일의 경로를 넣는 방식 ex. src=“./image/test.png”</li>\n<li>데이터를 직접 넣는 방식 ex. src=“data:image/jpeg;base64 {binary data}”</li>\n</ol>\n<p>신규 프로젝트 작업 중 백엔드에서 넘겨주는 이미지 값이 바이트라 2번과 같은 인코딩 방식에 대한 의문이 생겨 잠시 구글링을 해 보았다.</p>\n<h3 id=\"대표적인-인코딩-방식들\" style=\"position:relative;\">대표적인 인코딩 방식들<a href=\"#%EB%8C%80%ED%91%9C%EC%A0%81%EC%9D%B8-%EC%9D%B8%EC%BD%94%EB%94%A9-%EB%B0%A9%EC%8B%9D%EB%93%A4\" aria-label=\"대표적인 인코딩 방식들 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>암호화된 데이터를 저장이나 교환을 목적으로 부호화하는 것을 인코딩한다고 한다.</p>\n<p>** 부호화란? 컴퓨터를 이용해 영상, 이미지, 소리 데이터를 생성할 때 데이터의 양을 줄이기 위해 데이터를 코드화하고 압축하는 것</p>\n<p>많이 쓰이는 대표적인 인코딩 방식으로 Base64, Hexadecimal 두 가지가 있다.</p>\n<ol>\n<li>Base64</li>\n</ol>\n<ul>\n<li>character 조합 : A 부터 Z, a 부터 z, 0 부터 9 + / => 64개</li>\n<li>인코딩된 길이 : 원 데이터 bytes의 1/3</li>\n</ul>\n<ol start=\"2\">\n<li>Hexadecimal</li>\n</ol>\n<ul>\n<li>character 조합 : 0 부터 9, A 부터 F => 16개</li>\n<li>인코딩된 길이 : 원 데이터 bytes * 2</li>\n</ul>\n<h3 id=\"프론트에서-채택한-방식\" style=\"position:relative;\">프론트에서 채택한 방식<a href=\"#%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%90%EC%84%9C-%EC%B1%84%ED%83%9D%ED%95%9C-%EB%B0%A9%EC%8B%9D\" aria-label=\"프론트에서 채택한 방식 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>자바스크립트에서는 Base54 인코딩 방식의 url도 Hexadecimal 인코딩 방식도 가능하다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber 0\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token keyword\">const</span> encodedStr <span class=\"token operator\">=</span> <span class=\"token function\">btoa</span><span class=\"token punctuation\">(</span>binary<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber 0\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">hexToImage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token keyword\">let</span> input <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span>frmConvert<span class=\"token punctuation\">.</span>hex<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">[^A-Fa-f0-9]</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span>\r\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">.</span>length <span class=\"token operator\">%</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cleaned hex string length is odd.\"</span><span class=\"token punctuation\">)</span>\r\n    <span class=\"token keyword\">return</span>\r\n  <span class=\"token punctuation\">}</span>\r\n\r\n  <span class=\"token keyword\">let</span> binary <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\r\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> input<span class=\"token punctuation\">.</span>length <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">let</span> h <span class=\"token operator\">=</span> input<span class=\"token punctuation\">.</span><span class=\"token function\">substr</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\r\n    binary<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>h<span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span>\r\n  <span class=\"token punctuation\">}</span>\r\n\r\n  <span class=\"token keyword\">let</span> byteArray <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Uint8Array</span><span class=\"token punctuation\">(</span>binary<span class=\"token punctuation\">)</span>\r\n  <span class=\"token keyword\">let</span> img <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".heximage\"</span><span class=\"token punctuation\">)</span>\r\n\r\n  img<span class=\"token punctuation\">.</span>src <span class=\"token operator\">=</span> window<span class=\"token punctuation\">.</span><span class=\"token constant\">URL</span><span class=\"token punctuation\">.</span><span class=\"token function\">createObjectURL</span><span class=\"token punctuation\">(</span>\r\n    <span class=\"token keyword\">new</span> <span class=\"token class-name\">Blob</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>byteArray<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> type<span class=\"token operator\">:</span> <span class=\"token string\">\"application/octet-stream\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\r\n  <span class=\"token punctuation\">)</span>\r\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>다만 인코딩된 길이가 Hexadecimal 인코딩 방식보다 Base64 인코딩 방식이 더 짧기 때문에 이미지 src 값에는 Base64 방식으로 인코딩된 url을 추가하였다.</p>\n<h3 id=\"-백엔드에서-넘어온-값이-Hexadecimal인-이유는\" style=\"position:relative;\">🤔 백엔드에서 넘어온 값이 Hexadecimal인 이유는?<a href=\"#-%EB%B0%B1%EC%97%94%EB%93%9C%EC%97%90%EC%84%9C-%EB%84%98%EC%96%B4%EC%98%A8-%EA%B0%92%EC%9D%B4-Hexadecimal%EC%9D%B8-%EC%9D%B4%EC%9C%A0%EB%8A%94\" aria-label=\" 백엔드에서 넘어온 값이 Hexadecimal인 이유는 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>네트워크를 통해 원시 데이터를 보낼 때 바이너리 데이터를 읽을 수 있어야 하는데 Base64보다 길이는 길더라도 덜 복잡하게 변환된(즉, 컴퓨터가 더 이해하기 쉬운) 인코딩 방식인 Hexadecimal 인코딩 데이터를 장고에서 기본적으로 채택하고 있는 걸까 추측 중.</p>","frontmatter":{"title":"인코딩의 종류","date":"2022-11-08","description":null,"tags":["base"]},"tableOfContents":"<ul>\n<li><a href=\"#%EB%8C%80%ED%91%9C%EC%A0%81%EC%9D%B8-%EC%9D%B8%EC%BD%94%EB%94%A9-%EB%B0%A9%EC%8B%9D%EB%93%A4\">대표적인 인코딩 방식들</a></li>\n<li><a href=\"#%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%90%EC%84%9C-%EC%B1%84%ED%83%9D%ED%95%9C-%EB%B0%A9%EC%8B%9D\">프론트에서 채택한 방식</a></li>\n<li><a href=\"#-%EB%B0%B1%EC%97%94%EB%93%9C%EC%97%90%EC%84%9C-%EB%84%98%EC%96%B4%EC%98%A8-%EA%B0%92%EC%9D%B4-hexadecimal%EC%9D%B8-%EC%9D%B4%EC%9C%A0%EB%8A%94\">🤔 백엔드에서 넘어온 값이 Hexadecimal인 이유는?</a></li>\n</ul>"},"previous":{"fields":{"slug":"/review/2022/"},"frontmatter":{"title":"2022 회고"}},"next":{"fields":{"slug":"/project/work/resource/"},"frontmatter":{"title":"리소스"}}},"pageContext":{"id":"253a63da-545f-553c-b745-a8f81e366c66","previousPostId":"4e4dd52e-7de5-5fe4-9d79-f43d25ab0c54","nextPostId":"e0fda7ed-7017-5922-89a9-638a38e745bb"}},
    "staticQueryHashes": ["2841359383","3708219967"]}