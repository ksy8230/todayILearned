{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/base/인코딩의 종류/",
    "result": {"data":{"site":{"siteMetadata":{"title":"Today I Learned"}},"markdownRemark":{"id":"253a63da-545f-553c-b745-a8f81e366c66","excerpt":"업데이트 일자 : 2022-11-14 이미지 파일을 웹에서 표현할 때 이미지 태그 속 src=\"\" 속성값은 크게 두 가지 방식으로 표현이 가능하다. 해당 이미지 파일의 경로를 넣는 방식 ex. src=“./image/test.png” 데이터를 직접 넣는 방식 ex. src=“data…","html":"<p>업데이트 일자 : 2022-11-14</p>\n<p>이미지 파일을 웹에서 표현할 때 이미지 태그 속 src=\"\" 속성값은 크게 두 가지 방식으로 표현이 가능하다.</p>\n<ol>\n<li>해당 이미지 파일의 경로를 넣는 방식 ex. src=“./image/test.png”</li>\n<li>데이터를 직접 넣는 방식 ex. src=“data:image/png;base64,{binary data}”</li>\n</ol>\n<p>신규 프로젝트 작업 중 백엔드에서 넘겨주는 이미지 값이 바이트라 2번과 같은 인코딩 방식에 대한 의문이 생겨 잠시 구글링을 해 보았다.</p>\n<h3 id=\"대표적인-인코딩-방식들\" style=\"position:relative;\">대표적인 인코딩 방식들<a href=\"#%EB%8C%80%ED%91%9C%EC%A0%81%EC%9D%B8-%EC%9D%B8%EC%BD%94%EB%94%A9-%EB%B0%A9%EC%8B%9D%EB%93%A4\" aria-label=\"대표적인 인코딩 방식들 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>암호화된 데이터를 저장이나 교환을 목적으로 부호화하는 것을 인코딩한다고 한다.</p>\n<p>** 부호화란? 컴퓨터를 이용해 영상, 이미지, 소리 데이터를 생성할 때 데이터의 양을 줄이기 위해 데이터를 코드화하고 압축하는 것</p>\n<p>많이 쓰이는 대표적인 인코딩 방식으로 Base64, Hexadecimal 두 가지가 있다.</p>\n<ol>\n<li>Base64</li>\n</ol>\n<ul>\n<li>character 조합 : A 부터 Z, a 부터 z, 0 부터 9 + / => 64개</li>\n<li>인코딩된 길이 : 원 데이터 bytes의 1/3</li>\n</ul>\n<ol start=\"2\">\n<li>Hexadecimal</li>\n</ol>\n<ul>\n<li>character 조합 : 0 부터 9, A 부터 F => 16개</li>\n<li>인코딩된 길이 : 원 데이터 bytes * 2</li>\n</ul>\n<h3 id=\"프론트에서-채택한-방식\" style=\"position:relative;\">프론트에서 채택한 방식<a href=\"#%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%90%EC%84%9C-%EC%B1%84%ED%83%9D%ED%95%9C-%EB%B0%A9%EC%8B%9D\" aria-label=\"프론트에서 채택한 방식 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>자바스크립트에서는 Base64 인코딩 방식도 Hexadecimal 인코딩 방식도 가능하다. 다만 인코딩된 길이가 Hexadecimal 인코딩 방식보다 Base64 인코딩 방식이 더 짧기 때문에 이미지 src 값에는 Base64 방식으로 인코딩된 url을 추가하였다. (일단… 그나마 익숙하게 들어본 용어기도 해서)</p>\n<p>api로부터 받은 응답의 결과는 아래와 같이 생겼었다. (이미지 출처: 스택오버플로우)\r\n<img src=\"https://user-images.githubusercontent.com/24996316/201669290-9e64e5bd-31ba-4ba0-9567-0cc86c13eaeb.png\" alt=\"image\">\r\n이런 모양의 데이터는 처음봐서 검색을 해 보니 전혀 <strong>가공되지 않은 png 이미지 파일의 바이너리 값</strong>이라고 한다.</p>\n<p>이 값을 img src 값에 그대로 넣어주면 에러가 나고 <strong>base64 인코딩 형태로 변환</strong>시키는 작업이 필요하다.</p>\n<p>웹 브라우저와 웹 서버 간의 데이터 전송을 할 때 사용되는 XMLHttpRequest 객체는 어떠한 형식의 데이터도 전송이 가능하다. XHR.responseType 지정을 통해 파일을 받는데 그 종류로는 “text”, “arraybuffer”, “blob”, “document”가 있고 지정하지 않으면 기본적으로 “text” 값이 들어간다.\r\n위 캡처의 형태와 같이 <strong>파일</strong> 형태의 데이터를 웹 브라우저와 서버가 주고 받을 때는 <strong>blob 혹은 arraybuffer 값을 이용</strong>한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber 0\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token function\">axios</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\r\n    method<span class=\"token operator\">:</span> <span class=\"token string\">'GET'</span><span class=\"token punctuation\">,</span>\r\n    url<span class=\"token operator\">:</span> <span class=\"token string\">'/getImageApi'</span><span class=\"token punctuation\">,</span>\r\n    responseType<span class=\"token operator\">:</span> <span class=\"token string\">'blob'</span>\r\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span>\r\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>responseType: ‘arraybuffer’를 설정하여 통신을 요청하면 아래와 같은 응답 값으로 바뀌어서 돌아온다. (arraybuffer vs blob 차이는 뭔지 추후에 더 공부해 보자) 단어 그대로 버퍼들의 배열 형태인 응답이다.</p>\n<blockquote>\n<p>버퍼란? 쉽게 말해 임시 저장 공간을 뜻한다. 웹 브라우저 중 크롬의 경우 954MB 정도의 이진 데이터를 저장할 수 있다.</p>\n</blockquote>\n<p><img src=\"https://user-images.githubusercontent.com/24996316/201671554-748a55ad-cd3f-4c86-b32d-240707c1c7b8.png\" alt=\"image\"></p>\n<p>이제 이 예쁘게 나열된 버퍼 배열을 문자열 형태의 base64 인코딩 형태로 바꿔준다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber 0\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token keyword\">let</span> base64ImageString <span class=\"token operator\">=</span> Buffer<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">,</span> <span class=\"token string\">'binary'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token string\">'base64'</span><span class=\"token punctuation\">)</span>\r\n<span class=\"token keyword\">let</span> imgSrc <span class=\"token operator\">=</span> <span class=\"token string\">\"data:image/png;base64,\"</span><span class=\"token operator\">+</span>base64ImageString</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<h3 id=\"시간될-때-조금-더-알아보면-좋을-것\" style=\"position:relative;\">시간될 때 조금 더 알아보면 좋을 것<a href=\"#%EC%8B%9C%EA%B0%84%EB%90%A0-%EB%95%8C-%EC%A1%B0%EA%B8%88-%EB%8D%94-%EC%95%8C%EC%95%84%EB%B3%B4%EB%A9%B4-%EC%A2%8B%EC%9D%84-%EA%B2%83\" aria-label=\"시간될 때 조금 더 알아보면 좋을 것 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<ul>\n<li>Base64 인코딩 방식 vs Hexadecimal 인코딩 방식의 차이</li>\n<li>arraybuffer vs blob 차이</li>\n</ul>","frontmatter":{"title":"인코딩의 종류","date":"2022-11-08","description":null,"tags":["base"]},"tableOfContents":"<ul>\n<li><a href=\"#%EB%8C%80%ED%91%9C%EC%A0%81%EC%9D%B8-%EC%9D%B8%EC%BD%94%EB%94%A9-%EB%B0%A9%EC%8B%9D%EB%93%A4\">대표적인 인코딩 방식들</a></li>\n<li><a href=\"#%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%90%EC%84%9C-%EC%B1%84%ED%83%9D%ED%95%9C-%EB%B0%A9%EC%8B%9D\">프론트에서 채택한 방식</a></li>\n<li><a href=\"#%EC%8B%9C%EA%B0%84%EB%90%A0-%EB%95%8C-%EC%A1%B0%EA%B8%88-%EB%8D%94-%EC%95%8C%EC%95%84%EB%B3%B4%EB%A9%B4-%EC%A2%8B%EC%9D%84-%EA%B2%83\">시간될 때 조금 더 알아보면 좋을 것</a></li>\n</ul>"},"previous":{"fields":{"slug":"/review/2022/"},"frontmatter":{"title":"2022 회고"}},"next":{"fields":{"slug":"/project/work/resource/"},"frontmatter":{"title":"리소스"}}},"pageContext":{"id":"253a63da-545f-553c-b745-a8f81e366c66","previousPostId":"4e4dd52e-7de5-5fe4-9d79-f43d25ab0c54","nextPostId":"e0fda7ed-7017-5922-89a9-638a38e745bb"}},
    "staticQueryHashes": ["2841359383","3708219967"]}