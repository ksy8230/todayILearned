{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/project/work/django/06.로그인과 회원가입/",
    "result": {"data":{"site":{"siteMetadata":{"title":"ksy8230.github.io/todayILearned/"}},"markdownRemark":{"id":"523be56d-2a6b-5087-8438-66cc15faccc3","excerpt":"…","html":"<h3 id=\"세션-로그인-방식\" style=\"position:relative;\">세션 로그인 방식<a href=\"#%EC%84%B8%EC%85%98-%EB%A1%9C%EA%B7%B8%EC%9D%B8-%EB%B0%A9%EC%8B%9D\" aria-label=\"세션 로그인 방식 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>작업을 들어가기 전에 간단하게 용어와 개념을 정리하자.</p>\n<blockquote>\n<p>세션?<br>\n같은 브라우저를 기준으로 들어오는 요청에 대한 상태를 유지시키는 기술이다. 이 상태는 사용자가 브러우저에 접속한 뒤 이런저런 요청과 응답을 이용한 후 종료할 때까지 유지된다.</p>\n</blockquote>\n<blockquote>\n<p>쿠키?<br>\n어떤 웹사이트를 방문했을 때 사용자에 대한 특정 정보를 기억하기 위한 파일로 세션과 마찬가지로 브라우저를 사용하는 사용자의 상태 정보를 유지하기 위한 기술이다.</p>\n</blockquote>\n<blockquote>\n<p>세션과 쿠키의 연결점<br>\n세션은 사용자의 정보를 사용자 컴퓨터의 메모리가 아닌 서버에 저장을 한다. 그리고 이 정보를 식별할 수 있는 세션ID를 파일로 담아(쿠키)을 사용자에게 넘겨줘 매요청마다 해당 사용자인지 확인한다.<br>\n쿠키는 사용자의 정보를 사용자 컴퓨터 메모리에 저장한다.</p>\n</blockquote>\n<blockquote>\n<p>CSRF?<br>\nCross Site Request Forgery의 약자로 사이트 요청 공격을 의미한다. 공격자가 타겟 사용자의 권한을 훔쳐서 해당 권한으로 악의적인 행위를 하는 것이다.<br>\n이를 방지하기 위해 세션과 연결된 랜덤한 토큰을 발행하여 요청이 안전한지 한번 더 확인시켜주는 게 CSRF 토큰이다.</p>\n</blockquote>\n<p><img src=\"https://user-images.githubusercontent.com/24996316/177935433-9242d85c-a247-4ff2-a3eb-b32242d4566c.png\" alt=\"image\"></p>\n<p>위 그림에서 CSRF 토큰은 사용자가 로그인할 때 브라우저에의 세션탭에 세션ID와 같이 저장이 될 것이다.<br>\n(즉, 쿠키는 세션ID, CSRF토큰 두 개가 되겠다)<br>\n그리고 이 토큰을 가지고 요청을 해야만 다른 API 호출이 가능하도록 만들어볼 것!</p>\n<h3 id=\"만들어볼-api-종류\" style=\"position:relative;\">만들어볼 API 종류<a href=\"#%EB%A7%8C%EB%93%A4%EC%96%B4%EB%B3%BC-api-%EC%A2%85%EB%A5%98\" aria-label=\"만들어볼 api 종류 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<ul>\n<li>✅ 회원가입 (/account/register/)</li>\n<li>✅ 로그인 (/account/login/)</li>\n</ul>\n<p>장고에서 기본적으로 세팅되어있는 인증 방식이 세션방식이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token operator\">//</span> setting<span class=\"token punctuation\">.</span>py\r\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\r\nCSRF_TRUSTED_ORIGINS <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'http://localhost:3000'</span><span class=\"token punctuation\">]</span>\r\nCORS_ORIGIN_WHITELIST <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'http://127.0.0.1:3000'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'http://localhost:3000'</span><span class=\"token punctuation\">)</span>\r\nCORS_ALLOW_CREDENTIALS <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span>\r\nCORS_EXPOSE_HEADERS <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'Content-Type'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'X-CSRFToken'</span><span class=\"token punctuation\">]</span>\r\n\r\nCSRF_COOKIE_SAMESITE <span class=\"token operator\">=</span> <span class=\"token string\">'Lax'</span> <span class=\"token comment\"># CSRF 쿠키의 SameSite 플래그 값을 설정하는 곳으로 내 쿠키가 사이트 간에 요청되는 걸 막는다</span>\r\nSESSION_COOKIE_SAMESITE <span class=\"token operator\">=</span> <span class=\"token string\">'Lax'</span> <span class=\"token comment\"># 세션 쿠키의 SameSite 플래그 값으로 내 쿠키가 사이트 간에 요청되는 걸 막는다</span>\r\nCSRF_COOKIE_HTTPONLY <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span> <span class=\"token comment\"># 클라이언트, 즉 자바스크립트로 CSRF 쿠키에 접근할 수 없다</span>\r\nSESSION_COOKIE_HTTPONLY <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span> <span class=\"token comment\"># 클라이언트, 즉 자바스크립트로 세션 쿠키에 접근할 수 없다</span>\r\n</code></pre></div>\n<h4 id=\"회원가입-api\" style=\"position:relative;\">회원가입 API<a href=\"#%ED%9A%8C%EC%9B%90%EA%B0%80%EC%9E%85-api\" aria-label=\"회원가입 api permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h4>\n<p>*** accountapp(사용자지정명칭)라는 계정관련한 장고앱이 만들어져있다는 가정하에 진행합니다.</p>\n<p>우선 사용자라는 객체들을 담을 DB 생성을 위한 사용자 모델을 만들어 준다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token operator\">//</span> accountapp <span class=\"token operator\">></span> models<span class=\"token punctuation\">.</span>py\r\n<span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>db <span class=\"token keyword\">import</span> models\r\n<span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>contrib<span class=\"token punctuation\">.</span>auth<span class=\"token punctuation\">.</span>models <span class=\"token keyword\">import</span> AbstractBaseUser<span class=\"token punctuation\">,</span> BaseUserManager\r\n\r\n\r\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">UserManager</span><span class=\"token punctuation\">(</span>BaseUserManager<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\r\n    <span class=\"token comment\"># 일반 user 생성</span>\r\n    <span class=\"token keyword\">def</span> <span class=\"token function\">create_user</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> email<span class=\"token punctuation\">,</span> username<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> password<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\r\n        <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> email<span class=\"token punctuation\">:</span>\r\n            <span class=\"token keyword\">raise</span> ValueError<span class=\"token punctuation\">(</span><span class=\"token string\">'must have user email'</span><span class=\"token punctuation\">)</span>\r\n        <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> username<span class=\"token punctuation\">:</span>\r\n            <span class=\"token keyword\">raise</span> ValueError<span class=\"token punctuation\">(</span><span class=\"token string\">'must have user username'</span><span class=\"token punctuation\">)</span>\r\n        <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> name<span class=\"token punctuation\">:</span>\r\n            <span class=\"token keyword\">raise</span> ValueError<span class=\"token punctuation\">(</span><span class=\"token string\">'must have user name'</span><span class=\"token punctuation\">)</span>\r\n        user <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">(</span>\r\n            email<span class=\"token operator\">=</span>self<span class=\"token punctuation\">.</span>normalize_email<span class=\"token punctuation\">(</span>email<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\r\n            username<span class=\"token operator\">=</span>username<span class=\"token punctuation\">,</span>\r\n            name<span class=\"token operator\">=</span>name\r\n        <span class=\"token punctuation\">)</span>\r\n        user<span class=\"token punctuation\">.</span>set_password<span class=\"token punctuation\">(</span>password<span class=\"token punctuation\">)</span>\r\n        user<span class=\"token punctuation\">.</span>save<span class=\"token punctuation\">(</span>using<span class=\"token operator\">=</span>self<span class=\"token punctuation\">.</span>_db<span class=\"token punctuation\">)</span>\r\n        <span class=\"token keyword\">return</span> user\r\n\r\n    <span class=\"token comment\"># 관리자 user 생성</span>\r\n    <span class=\"token keyword\">def</span> <span class=\"token function\">create_superuser</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> email<span class=\"token punctuation\">,</span> username<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> password<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\r\n        user <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>create_user<span class=\"token punctuation\">(</span>\r\n            email<span class=\"token punctuation\">,</span>\r\n            password<span class=\"token operator\">=</span>password<span class=\"token punctuation\">,</span>\r\n            username<span class=\"token operator\">=</span>username<span class=\"token punctuation\">,</span>\r\n            name<span class=\"token operator\">=</span>name\r\n        <span class=\"token punctuation\">)</span>\r\n        user<span class=\"token punctuation\">.</span>is_admin <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span>\r\n        user<span class=\"token punctuation\">.</span>save<span class=\"token punctuation\">(</span>using<span class=\"token operator\">=</span>self<span class=\"token punctuation\">.</span>_db<span class=\"token punctuation\">)</span>\r\n        <span class=\"token keyword\">return</span> user\r\n\r\n\r\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span>AbstractBaseUser<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\r\n    <span class=\"token builtin\">id</span> <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>AutoField<span class=\"token punctuation\">(</span>primary_key<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\r\n    email <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>EmailField<span class=\"token punctuation\">(</span>default<span class=\"token operator\">=</span><span class=\"token string\">''</span><span class=\"token punctuation\">,</span> max_length<span class=\"token operator\">=</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> null<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span> blank<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span> unique<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\r\n    username <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>CharField<span class=\"token punctuation\">(</span>default<span class=\"token operator\">=</span><span class=\"token string\">''</span><span class=\"token punctuation\">,</span> max_length<span class=\"token operator\">=</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> null<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span> blank<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span> unique<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\r\n    name <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>CharField<span class=\"token punctuation\">(</span>default<span class=\"token operator\">=</span><span class=\"token string\">''</span><span class=\"token punctuation\">,</span> max_length<span class=\"token operator\">=</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> null<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span> blank<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span>\r\n\r\n    <span class=\"token comment\"># User 모델의 필수 field</span>\r\n    is_active <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>BooleanField<span class=\"token punctuation\">(</span>default<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\r\n    is_admin <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>BooleanField<span class=\"token punctuation\">(</span>default<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span>\r\n\r\n    <span class=\"token comment\"># 헬퍼 클래스 사용</span>\r\n    objects <span class=\"token operator\">=</span> UserManager<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\r\n\r\n    <span class=\"token comment\">#  로그인 시, id/paswword 입력할 때 id값의 필드를 설정하는 곳</span>\r\n    USERNAME_FIELD <span class=\"token operator\">=</span> <span class=\"token string\">'username'</span>\r\n    <span class=\"token comment\"># 회원가입 시, 필수로 작성해야하는 field</span>\r\n    REQUIRED_FIELDS <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'email'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'name'</span><span class=\"token punctuation\">]</span>\r\n\r\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__str__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\r\n        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>username\r\n\r\n</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token operator\">//</span> setting<span class=\"token punctuation\">.</span>py\r\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\r\nAUTH_USER_MODEL <span class=\"token operator\">=</span> <span class=\"token string\">'accountapp.User'</span> <span class=\"token comment\"># 만든 사용자 모델을 인증에 연결해준다</span></code></pre></div>\n<p>회원가입 뷰단에서 불러와 사용할 serializers 파일이다.<br>\nAccountSerializer 클래스에서 User 모델을 만들어 json 형식으로 응답할 수 있도록 형태를 바꿔준다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token operator\">//</span> accountapp <span class=\"token operator\">></span> serializers<span class=\"token punctuation\">.</span>py\r\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">AccountSerializer</span><span class=\"token punctuation\">(</span>serializers<span class=\"token punctuation\">.</span>ModelSerializer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\r\n    <span class=\"token keyword\">def</span> <span class=\"token function\">create</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> validated_data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\r\n        user <span class=\"token operator\">=</span> User<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>create_user<span class=\"token punctuation\">(</span>\r\n            email<span class=\"token operator\">=</span>validated_data<span class=\"token punctuation\">[</span><span class=\"token string\">'email'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\r\n            username<span class=\"token operator\">=</span>validated_data<span class=\"token punctuation\">[</span><span class=\"token string\">'username'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\r\n            name<span class=\"token operator\">=</span>validated_data<span class=\"token punctuation\">[</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\r\n            password<span class=\"token operator\">=</span>validated_data<span class=\"token punctuation\">[</span><span class=\"token string\">'password'</span><span class=\"token punctuation\">]</span>\r\n        <span class=\"token punctuation\">)</span>\r\n        <span class=\"token keyword\">return</span> user\r\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">Meta</span><span class=\"token punctuation\">:</span>\r\n        model <span class=\"token operator\">=</span> User\r\n        fields <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'id'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'username'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'email'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'name'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'password'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>사용자 생성을 요청하면 요청된 데이터를 가지고 serializers 과정을 거쳐 리턴 받은 user를 db에 저장한다.<br>\n해당 요청은 권한이 없는 외부 사용자가 사용할 수 있도록 permission을 AllowAny로 설정했다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token operator\">//</span> accountapp <span class=\"token operator\">></span> views<span class=\"token punctuation\">.</span>py\r\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">CreateAccount</span><span class=\"token punctuation\">(</span>APIView<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\r\n    permission_classes <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>permissions<span class=\"token punctuation\">.</span>AllowAny<span class=\"token punctuation\">,</span><span class=\"token punctuation\">)</span>\r\n    <span class=\"token keyword\">def</span> <span class=\"token function\">post</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\r\n        serializer <span class=\"token operator\">=</span> AccountSerializer<span class=\"token punctuation\">(</span>data<span class=\"token operator\">=</span>request<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span>\r\n        <span class=\"token keyword\">if</span> serializer<span class=\"token punctuation\">.</span>is_valid<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\r\n            serializer<span class=\"token punctuation\">.</span>save<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\r\n            <span class=\"token keyword\">return</span> Response<span class=\"token punctuation\">(</span>serializer<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">,</span> status<span class=\"token operator\">=</span>status<span class=\"token punctuation\">.</span>HTTP_201_CREATED<span class=\"token punctuation\">)</span>\r\n        <span class=\"token keyword\">return</span> Response<span class=\"token punctuation\">(</span>serializer<span class=\"token punctuation\">.</span>errors<span class=\"token punctuation\">,</span> status<span class=\"token operator\">=</span>status<span class=\"token punctuation\">.</span>HTTP_400_BAD_REQUEST<span class=\"token punctuation\">)</span></code></pre></div>\n<p>이렇게 만든 api를 accountapp에 연결해 외부에서 /account/register/ 를 통해 실행될 수 있도록 세팅한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">from django.urls import path\r\nfrom accountapp.views import hello_world, Login, CreateAccount, AccountList\r\n\r\napp_name = \"accountapp\"\r\n\r\nurlpatterns = [\r\n    path('hello_world/', hello_world, name='hello_world'),\r\n    path('login/', Login.as_view(), name='login'),\r\n    path('register/', CreateAccount.as_view(), name='register'),\r\n    path('user_list/', AccountList.as_view(), name='user_list')\r\n]\r\n</code></pre></div>\n<h4 id=\"로그인-api\" style=\"position:relative;\">로그인 API<a href=\"#%EB%A1%9C%EA%B7%B8%EC%9D%B8-api\" aria-label=\"로그인 api permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h4>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token operator\">//</span> accountapp <span class=\"token operator\">></span> views<span class=\"token punctuation\">.</span>py\r\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Login</span><span class=\"token punctuation\">(</span>APIView<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\r\n    permission_classes <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>permissions<span class=\"token punctuation\">.</span>AllowAny<span class=\"token punctuation\">,</span><span class=\"token punctuation\">)</span>\r\n    <span class=\"token keyword\">def</span> <span class=\"token function\">post</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\r\n        data <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>data\r\n\r\n        username <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'username'</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span>\r\n        password <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'password'</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span>\r\n\r\n        user <span class=\"token operator\">=</span> authenticate<span class=\"token punctuation\">(</span>username<span class=\"token operator\">=</span>username<span class=\"token punctuation\">,</span> password<span class=\"token operator\">=</span>password<span class=\"token punctuation\">)</span>\r\n\r\n        <span class=\"token keyword\">if</span> user <span class=\"token keyword\">is</span> <span class=\"token keyword\">not</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\r\n            login<span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> user<span class=\"token punctuation\">)</span>\r\n            <span class=\"token keyword\">return</span> Response<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token string\">'message'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"User logged in successully\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'data'</span><span class=\"token punctuation\">:</span> user<span class=\"token punctuation\">.</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\r\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\r\n            <span class=\"token keyword\">return</span> Response<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token string\">'message'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"User does not exits\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> status<span class=\"token operator\">=</span><span class=\"token number\">400</span><span class=\"token punctuation\">)</span></code></pre></div>","frontmatter":{"title":"6. 무작정 장고로 사이드 프로젝트 만들기 - djangorestframework로 로그인과 회원가입 API 만들기","date":"2022-07-04","description":null,"tags":["Django"]},"tableOfContents":"<ul>\n<li>\n<p><a href=\"#%EC%84%B8%EC%85%98-%EB%A1%9C%EA%B7%B8%EC%9D%B8-%EB%B0%A9%EC%8B%9D\">세션 로그인 방식</a></p>\n</li>\n<li>\n<p><a href=\"#%EB%A7%8C%EB%93%A4%EC%96%B4%EB%B3%BC-api-%EC%A2%85%EB%A5%98\">만들어볼 API 종류</a></p>\n<ul>\n<li><a href=\"#%ED%9A%8C%EC%9B%90%EA%B0%80%EC%9E%85-api\">회원가입 API</a></li>\n<li><a href=\"#%EB%A1%9C%EA%B7%B8%EC%9D%B8-api\">로그인 API</a></li>\n</ul>\n</li>\n</ul>"},"previous":{"fields":{"slug":"/project/work/django/05.django and react2/"},"frontmatter":{"title":"5. 무작정 장고로 사이드 프로젝트 만들기 - djangorestframework와 react 연결해 보기 (2)"}},"next":{"fields":{"slug":"/project/work/django/07.Nextjs 전역 상태 만들기/"},"frontmatter":{"title":"7. 무작정 장고로 사이드프로젝트 만들기 - Nextjs에서 전역 상태로 사용자 불러오기"}}},"pageContext":{"id":"523be56d-2a6b-5087-8438-66cc15faccc3","previousPostId":"43e8deb8-6cdc-5fc6-82be-872b3b2891b3","nextPostId":"fda27897-8980-5df2-8567-d58d0e0bb6c6"}},
    "staticQueryHashes": ["2841359383","3708219967"]}