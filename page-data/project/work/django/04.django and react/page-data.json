{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/project/work/django/04.django and react/",
    "result": {"data":{"site":{"siteMetadata":{"title":"ksy8230.github.io"}},"markdownRemark":{"id":"85e9fc7a-78e3-5ce4-9690-fa11011bf564","excerpt":"장고와 리액트 연결하기 장고에서 제공하는 프론트 개발용 템플릿이 있지만 익숙한 리액트 라이브러리로 프론트를 개발하고 싶어 장고와 리액트를 연결하는 방법을 찾아보았다. 장고에 static 폴더에 리액트.js 파일을 cdn…","html":"<h3 id=\"장고와-리액트-연결하기\" style=\"position:relative;\">장고와 리액트 연결하기<a href=\"#%EC%9E%A5%EA%B3%A0%EC%99%80-%EB%A6%AC%EC%95%A1%ED%8A%B8-%EC%97%B0%EA%B2%B0%ED%95%98%EA%B8%B0\" aria-label=\"장고와 리액트 연결하기 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>장고에서 제공하는 프론트 개발용 템플릿이 있지만 익숙한 리액트 라이브러리로 프론트를 개발하고 싶어 장고와 리액트를 연결하는 방법을 찾아보았다.</p>\n<ol>\n<li>장고에 static 폴더에 리액트.js 파일을 cdn으로 연결해 장고 내부에서 리액트를 불러와 사용하는 방법</li>\n<li>백엔드앱과 프론트앱을 나누어서 프론트앱으로 리액트를 사용하는 방법</li>\n</ol>\n<p>1번 방법은 장고 내부에서 리액트 파일을 실행시키는 것이기 때문에 장고에 프론트 관련한 파일을 제외하고는 추가적인 설정이 필요가 없어 연동자체는 간결하다고 한다. 하지만 리액트에서 제공하는 api 사용에 있어 제약이 있다는 글이 있어 회사 내부에서 채택하고 있는 2번 방법으로 실습해 보기로 한다.</p>\n<p>✅ djangorestframework 설치하기</p>\n<p>장고와 리액트 연결이라고 적어놨지만 2번 방법은 결국 백엔드와 프론트가 분리되어 개발되는 방법이다. 앱을 역할로 분리함으로써 백엔드앱인 장고는 rest api 서버로 사용이 될 것이고 프론트앱인 리액트는 사용자 인터페이스 개발용도 사용될 것이다.</p>\n<p>rest_framework 를 사용하기 위해 아래와 같이 장고에 djangorestframework를 설치한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">> pip install djangorestframework</code></pre></div>\n<p>✅ setting.py에 앱 연결</p>\n<p><img src=\"https://user-images.githubusercontent.com/24996316/177022097-795cc983-0039-446e-b9bc-9a9ff0c63519.png\" alt=\"image\"></p>\n<p>✅ article 장고앱 만들기 (API용도로 사용할 앱)</p>\n<p>만들어볼 실습 프로젝트가 블로그이기에 장고 내부에 게시글을 관리할 목적으로 생성될 articleapp 앱을 새로 또 생성하였다.<br>\n앱 만드는 방법은 해당 게시글에서 참고 가능! 👉<a href=\"https://github.com/ksy8230/todayILearned/blob/main/content/blog/project/work/django/3.startapp.md,\" title=\"make django app\">장고에서 앱 만드는 법</a></p>\n<p><img src=\"https://user-images.githubusercontent.com/24996316/177022144-68d3b199-c19e-4c87-b248-6b0725edc566.png\" alt=\"image\"></p>\n<p>✅ article 모델 생성</p>\n<p>article 객체에 필요한 것들로는 제목, 내용, 업데이트된 날짜 정도가 가장 필수적인 내용이 될 것이다.</p>\n<p>articleapp > models.py</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>db <span class=\"token keyword\">import</span> models\r\n\r\n<span class=\"token comment\"># Create your models here.</span>\r\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Article</span><span class=\"token punctuation\">(</span>models<span class=\"token punctuation\">.</span>Model<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\r\n    title <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>CharField<span class=\"token punctuation\">(</span>max_length<span class=\"token operator\">=</span><span class=\"token number\">50</span><span class=\"token punctuation\">)</span>\r\n    content <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>TextField<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\r\n    updated_at <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>DateTimeField<span class=\"token punctuation\">(</span>auto_now<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\r\n</code></pre></div>\n<p>✅ 모델 내용을 바탕으로 db 생성 (마이그레이션)</p>\n<p>장고 프레임워크에서는 모델을 생성하면 manage.py 파일을 이용해 sqlite로 데이터베이스를 쉽게 모델 객체들과 맵핑하여 데이터 테이블들을 생성할 수 있는 것 같다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">> python manage.py makemigrations</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">> python manage.py migrate</code></pre></div>\n<p>✅ 관리자 등록</p>\n<p>생성한 article 모델을 장고 어드민에 등록하고 슈퍼관리자를 생성해 준다. (이 단계가 왜 필요한 건지는 아직 모르겠다)</p>\n<p>articleapp > admin.py</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>contrib <span class=\"token keyword\">import</span> admin\r\n<span class=\"token keyword\">from</span> <span class=\"token punctuation\">.</span>models <span class=\"token keyword\">import</span> Article\r\n<span class=\"token comment\"># Register your models here.</span>\r\nadmin<span class=\"token punctuation\">.</span>site<span class=\"token punctuation\">.</span>register<span class=\"token punctuation\">(</span>Article<span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">> python manage.py createsuperuser</code></pre></div>\n<p>✅ 시리얼라이저 생성</p>\n<p>djangorestframework를 설치한 이유가 여기서 나온다. djangorestframework 에서는 시리얼라이저라는 클래스를 제공하는데 이 클래스가 데이터베이스 인스턴스를 JSON 데이터 형터로 생성해준다.<br>\n즉, 시리얼라이저를 이용해 장고가 외부 요청에 맞는 데이터 응답의 값을 프론트가 읽을 수 있는 json 형태로 내려줄 수 있다. (API 생성 작업)</p>\n<p>articleapp > serializers.py</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> rest_framework <span class=\"token keyword\">import</span> serializers\r\n<span class=\"token keyword\">from</span> articleapp<span class=\"token punctuation\">.</span>models <span class=\"token keyword\">import</span> Article\r\n\r\n\r\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ArticleSerializer</span><span class=\"token punctuation\">(</span>serializers<span class=\"token punctuation\">.</span>ModelSerializer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\r\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">Meta</span><span class=\"token punctuation\">:</span>\r\n        model <span class=\"token operator\">=</span> Article\r\n        fields <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'id'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'title'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'content'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'updated_at'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>✅ api에 해당하는 소스</p>\n<p>아주 간단하게 article 목록을 조회하고 생성하는 api만 적어보았다.</p>\n<p>articleapp > views.py</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> rest_framework<span class=\"token punctuation\">.</span>views <span class=\"token keyword\">import</span> APIView\r\n<span class=\"token keyword\">from</span> rest_framework <span class=\"token keyword\">import</span> status\r\n<span class=\"token keyword\">from</span> rest_framework<span class=\"token punctuation\">.</span>response <span class=\"token keyword\">import</span> Response\r\n<span class=\"token keyword\">from</span> <span class=\"token punctuation\">.</span>serializers <span class=\"token keyword\">import</span> ArticleSerializer\r\n<span class=\"token keyword\">from</span> <span class=\"token punctuation\">.</span>models <span class=\"token keyword\">import</span> Article\r\n<span class=\"token comment\"># Create your views here.</span>\r\n\r\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ArticleList</span><span class=\"token punctuation\">(</span>APIView<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\r\n    <span class=\"token keyword\">def</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># 아티클 목록 GET 요청시</span>\r\n        articles <span class=\"token operator\">=</span> Article<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span><span class=\"token builtin\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 아티클 모델의 객체들을 가져와</span>\r\n        serializer <span class=\"token operator\">=</span> ArticleSerializer<span class=\"token punctuation\">(</span>articles<span class=\"token punctuation\">,</span> many<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 시리얼라이저로 데이터베이스의 값을 json 형태로 만든다</span>\r\n        <span class=\"token keyword\">return</span> Response<span class=\"token punctuation\">(</span>serializer<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 프론트로 응답</span>\r\n\r\n    <span class=\"token keyword\">def</span> <span class=\"token function\">post</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># 아티클 생성 POST 요청시</span>\r\n        serializer <span class=\"token operator\">=</span> ArticleSerializer<span class=\"token punctuation\">(</span>data<span class=\"token operator\">=</span>request<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 시리얼라이저로 요청 데이터를 json 형태로 만든다</span>\r\n        <span class=\"token keyword\">if</span> serializer<span class=\"token punctuation\">.</span>is_valid<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># 해당 데이터가 유효한 값이라면</span>\r\n            serializer<span class=\"token punctuation\">.</span>save<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 시리얼라이저로 데이터베이스에 해당 데이터를 저장한다</span>\r\n            <span class=\"token keyword\">return</span> Response<span class=\"token punctuation\">(</span>serializer<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">,</span> status<span class=\"token operator\">=</span>status<span class=\"token punctuation\">.</span>HTTP_201_CREATED<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 프론트로 생성 요청한 데이터를 json 형태로 응답</span>\r\n        <span class=\"token keyword\">return</span> Response<span class=\"token punctuation\">(</span>serializer<span class=\"token punctuation\">.</span>erros<span class=\"token punctuation\">,</span> status<span class=\"token operator\">=</span>status<span class=\"token punctuation\">.</span>HTTP_400_BAD_REQUEST<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 해당 데이터가 유효하지 않다면 프론트로 에러 응답</span></code></pre></div>\n<p>✅ api를 호출할 url 기재</p>\n<p>mollang(장고 전체앱) > urls.py</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>contrib <span class=\"token keyword\">import</span> admin\r\n<span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>urls <span class=\"token keyword\">import</span> path<span class=\"token punctuation\">,</span> include\r\n\r\nurlpatterns <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\r\n    path<span class=\"token punctuation\">(</span><span class=\"token string\">'admin/'</span><span class=\"token punctuation\">,</span> admin<span class=\"token punctuation\">.</span>site<span class=\"token punctuation\">.</span>urls<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\r\n    path<span class=\"token punctuation\">(</span><span class=\"token string\">'account/'</span><span class=\"token punctuation\">,</span> include<span class=\"token punctuation\">(</span><span class=\"token string\">'accountapp.urls'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\r\n    path<span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">,</span> include<span class=\"token punctuation\">(</span><span class=\"token string\">'articleapp.urls'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span><span class=\"token operator\">-</span> 추가!\r\n<span class=\"token punctuation\">]</span></code></pre></div>\n<p>articleapp > urls.py</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>urls <span class=\"token keyword\">import</span> path\r\n<span class=\"token keyword\">from</span> rest_framework<span class=\"token punctuation\">.</span>urlpatterns <span class=\"token keyword\">import</span> format_suffix_patterns\r\n<span class=\"token keyword\">from</span> articleapp<span class=\"token punctuation\">.</span>views <span class=\"token keyword\">import</span> ArticleList\r\n\r\nurlpatterns <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\r\n    path<span class=\"token punctuation\">(</span><span class=\"token string\">'article/'</span><span class=\"token punctuation\">,</span> ArticleList<span class=\"token punctuation\">.</span>as_view<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\r\n<span class=\"token punctuation\">]</span>\r\n\r\nurlpatterns <span class=\"token operator\">=</span> format_suffix_patterns<span class=\"token punctuation\">(</span>urlpatterns<span class=\"token punctuation\">)</span></code></pre></div>\n<p>여기까지 장고 세팅은 끝났다.</p>","frontmatter":{"title":"4. 무작정 장고로 사이드 프로젝트 만들기 - djangorestframework와 react 연결해 보기 (1)","date":"2022-07-03","description":null,"tags":["Django"]},"tableOfContents":"<ul>\n<li><a href=\"#%EC%9E%A5%EA%B3%A0%EC%99%80-%EB%A6%AC%EC%95%A1%ED%8A%B8-%EC%97%B0%EA%B2%B0%ED%95%98%EA%B8%B0\">장고와 리액트 연결하기</a></li>\n</ul>"},"previous":{"fields":{"slug":"/project/work/django/03.startapp/"},"frontmatter":{"title":"3. 무작정 장고로 사이드 프로젝트 만들기 - 앱 만들기"}},"next":{"fields":{"slug":"/project/work/django/05.django and react2/"},"frontmatter":{"title":"5. 무작정 장고로 사이드 프로젝트 만들기 - djangorestframework와 react 연결해 보기 (2)"}}},"pageContext":{"id":"85e9fc7a-78e3-5ce4-9690-fa11011bf564","previousPostId":"2bd4fbcb-6d65-546d-822b-cfbd58eae9b0","nextPostId":"43e8deb8-6cdc-5fc6-82be-872b3b2891b3"}},
    "staticQueryHashes": ["2841359383","3708219967"]}