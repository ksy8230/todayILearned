{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/project/work/django/07.Nextjs 전역 상태 만들기/",
    "result": {"data":{"site":{"siteMetadata":{"title":"Today I Learned"}},"markdownRemark":{"id":"bcb89388-fd84-50ca-a919-351c36058166","excerpt":"어떤 문제가 있는가 chrome-capture-2022-6-14 nextjs…","html":"<h3 id=\"어떤-문제가-있는가\" style=\"position:relative;\">어떤 문제가 있는가<a href=\"#%EC%96%B4%EB%96%A4-%EB%AC%B8%EC%A0%9C%EA%B0%80-%EC%9E%88%EB%8A%94%EA%B0%80\" aria-label=\"어떤 문제가 있는가 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p><img src=\"https://user-images.githubusercontent.com/24996316/178902066-7bd02c09-f3b0-407c-8c5a-95d5b0a9a7d0.gif\" alt=\"chrome-capture-2022-6-14\"></p>\n<p>nextjs로 구축한 내 프론트 웹 어플리케이션의 구성은 헤더 | 본문 | 푸터로 이루어져있다. 그리고 이 헤더의 우측엔 로그인 유무를 알 수 있는 인터페이스가 있는데 로그인 후 새로고침할 때마다 이렇게 로그인이 풀릴 것마냥 login 텍스트가 잠시 보였다가 다시 로그인된 상태로 돌아온다.<br>\n찰나이긴 하지만 너무 거슬리니 고쳐보자. 🤨</p>\n<h3 id=\"원인-파악\" style=\"position:relative;\">원인 파악<a href=\"#%EC%9B%90%EC%9D%B8-%ED%8C%8C%EC%95%85\" aria-label=\"원인 파악 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p><img src=\"https://user-images.githubusercontent.com/24996316/178902914-16b8417a-839d-4b98-895e-0c2e026ad8fa.png\" alt=\"image\"></p>\n<p>헤더의 영역은 컴포넌트로 관리를 하고 있고, 이 헤더 컴포넌트가 불러와질 때 리덕스의 액션함수를 호출해 사용자 정보를 me 라는 상태값으로 저장하고 있다. me라는 상태에 username이 존재한다면 (유저가 로그인된 상태라면) My Page가 보일 것이고, 그렇지 않다면 Login이 보일 것이다.</p>\n<p>문제는 헤더 컴포넌트가 마운트될 때 유저를 불러오는 액션 리듀서가 me라는 상태를 null로 초기화시킨 후<br>\n<img src=\"https://user-images.githubusercontent.com/24996316/178903537-4fbfaf0e-6922-4014-97f2-097e3650c650.png\" alt=\"image\"></p>\n<p>유저를 불러오는 API 호출이 완료되면 아래와 같이 me 객체에 유저 정보를 담아서 상태를 저장하는데 pending -> fulfilled 되는 과정에서 생기는 시간차이 때문에 위와 같은 이슈가 발생한 것이다.<br>\n<img src=\"https://user-images.githubusercontent.com/24996316/178903570-0de173d9-dc0e-4ccb-b42f-2c875421d0f6.png\" alt=\"image\"></p>\n<h3 id=\"어떻게-해결할까\" style=\"position:relative;\">어떻게 해결할까<a href=\"#%EC%96%B4%EB%96%BB%EA%B2%8C-%ED%95%B4%EA%B2%B0%ED%95%A0%EA%B9%8C\" aria-label=\"어떻게 해결할까 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>생각해본 방법은</p>\n<ol>\n<li>헤더 컴포넌트에서 <code class=\"language-text\">getInitialProps</code> 함수를 이용해 서버에서 먼저 API 호출을 하고 나온 결과를 해당 컴포넌트의 props에 주입시키기.</li>\n<li>_app.tsx 라는 앱의 시작점 파일에서 유저를 불러오는 액션 함수를 호출.</li>\n</ol>\n<h4 id=\"1번-방법\" style=\"position:relative;\">1번 방법<a href=\"#1%EB%B2%88-%EB%B0%A9%EB%B2%95\" aria-label=\"1번 방법 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h4>\n<p>1번 방법은 컴포넌트 안에서는 <code class=\"language-text\">getInitialProps</code> 함수를 이용해 서버사이드렌더링이 불가능해 실패했다.</p>\n<blockquote>\n<p>getInitialProps enables server-side rendering in a page and allows you to do initial data population, it means sending the page with the data already populated from the server. This is especially useful for SEO.<br>\ngetInitialProps는 페이지에서 서버사이드 렌더링이 가능하게 한다. 그리고 초기 데이터를 네 임의대로 채울 수 있게 한다. 이 말인즉, 서버로부터 이미 채워진 데이터와 같이 페이지를 프론트로 보내준다는 뜻이다. 이것은 SEO에도 아주 유용하다.</p>\n</blockquote>\n<h4 id=\"2번-방법\" style=\"position:relative;\">2번 방법<a href=\"#2%EB%B2%88-%EB%B0%A9%EB%B2%95\" aria-label=\"2번 방법 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h4>\n<p>2번 방법을 사용하기 위해선 <code class=\"language-text\">next-redux-wrapper</code> 라이브러리에서 제공하는 createWrapper라는 함수가 필요하다.</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token operator\">></span> <span class=\"token operator\">/</span>store<span class=\"token operator\">/</span>index<span class=\"token punctuation\">.</span>ts\r\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> createWrapper<span class=\"token punctuation\">,</span> MakeStore <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"next-redux-wrapper\"</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> wrapper <span class=\"token operator\">=</span> <span class=\"token function\">createWrapper</span><span class=\"token punctuation\">(</span>makeStore<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\r\n  debug<span class=\"token operator\">:</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">NODE_ENV</span> <span class=\"token operator\">!==</span> <span class=\"token string\">\"production\"</span><span class=\"token punctuation\">,</span>\r\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n\r\n<span class=\"token operator\">></span> _app<span class=\"token punctuation\">.</span>tsx\r\n<span class=\"token operator\">...</span>\r\n\r\nMyApp<span class=\"token punctuation\">.</span>getInitialProps <span class=\"token operator\">=</span> wrapper<span class=\"token punctuation\">.</span><span class=\"token function\">getInitialPageProps</span><span class=\"token punctuation\">(</span>\r\n  <span class=\"token punctuation\">(</span><span class=\"token parameter\">store</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">context</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> ctx <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> context<span class=\"token punctuation\">;</span>\r\n    <span class=\"token keyword\">const</span> allCookies <span class=\"token operator\">=</span> ctx<span class=\"token punctuation\">.</span>req<span class=\"token operator\">?.</span>headers<span class=\"token punctuation\">.</span>cookie<span class=\"token punctuation\">;</span>\r\n    <span class=\"token keyword\">const</span> parts <span class=\"token operator\">=</span> allCookies<span class=\"token operator\">?.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">; </span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token keyword\">let</span> sessionid <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span> <span class=\"token keyword\">as</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>parts<span class=\"token operator\">?.</span>length <span class=\"token operator\">===</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n      sessionid <span class=\"token operator\">=</span> parts<span class=\"token operator\">?.</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">?.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sessionid=\"</span><span class=\"token punctuation\">)</span><span class=\"token operator\">?.</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span>\r\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sessionid<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n      <span class=\"token keyword\">const</span> res <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> axios<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http://localhost:8000/account/whoIam/\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\r\n        withCredentials<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\r\n        headers<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\r\n          Cookie<span class=\"token operator\">:</span> allCookies <span class=\"token keyword\">as</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span>\r\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\r\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n      store<span class=\"token punctuation\">.</span><span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\r\n        type<span class=\"token operator\">:</span> <span class=\"token constant\">HYDRATE</span><span class=\"token punctuation\">,</span>\r\n        payload<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> users<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> me<span class=\"token operator\">:</span> res<span class=\"token punctuation\">.</span>data <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\r\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\r\n      store<span class=\"token punctuation\">.</span><span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\r\n        type<span class=\"token operator\">:</span> <span class=\"token constant\">HYDRATE</span><span class=\"token punctuation\">,</span>\r\n        payload<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> hydrate<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> username<span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\r\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span>\r\n  <span class=\"token punctuation\">}</span>\r\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n</code></pre></div>\n<p>위의 코드와 같이 MyApp이 갖고 있는 <code class=\"language-text\">getInitialProps</code> 함수를 createWrapper를 이용해 우리가 지정하고 싶은 로직으로 오버라이드시키는 것이다.<br>\n<code class=\"language-text\">getInitialPageProps</code>라는 말에서 알 수 있듯이 이 작업을 수행하면 nextjs에서 만든 모든 페이지들에서 내가 지정한 데이터들을 props으로 받을 수 있다. 👍 근데 내가 원했던 건 페이지마다 user 정보를 주입시키는게 아니라 리덕스를 이용해 전역 상태에 유저 상태를 저장해주고 싶은 것.</p>","frontmatter":{"title":"7. 무작정 장고로 사이드프로젝트 만들기 - Nextjs에서 전역 상태로 사용자 불러오기","date":"2022-07-05","description":null,"tags":["Django"]},"tableOfContents":"<ul>\n<li>\n<p><a href=\"#%EC%96%B4%EB%96%A4-%EB%AC%B8%EC%A0%9C%EA%B0%80-%EC%9E%88%EB%8A%94%EA%B0%80\">어떤 문제가 있는가</a></p>\n</li>\n<li>\n<p><a href=\"#%EC%9B%90%EC%9D%B8-%ED%8C%8C%EC%95%85\">원인 파악</a></p>\n</li>\n<li>\n<p><a href=\"#%EC%96%B4%EB%96%BB%EA%B2%8C-%ED%95%B4%EA%B2%B0%ED%95%A0%EA%B9%8C\">어떻게 해결할까</a></p>\n<ul>\n<li><a href=\"#1%EB%B2%88-%EB%B0%A9%EB%B2%95\">1번 방법</a></li>\n<li><a href=\"#2%EB%B2%88-%EB%B0%A9%EB%B2%95\">2번 방법</a></li>\n</ul>\n</li>\n</ul>"},"previous":{"fields":{"slug":"/project/work/django/06.로그인과 회원가입/"},"frontmatter":{"title":"6. 무작정 장고로 사이드 프로젝트 만들기 - djangorestframework로 로그인과 회원가입 API 만들기"}},"next":{"fields":{"slug":"/project/work/django/8.내 정보 수정/"},"frontmatter":{"title":"8. 무작정 장고로 사이드프로젝트 만들기 - 내 정보 수정하기"}}},"pageContext":{"id":"bcb89388-fd84-50ca-a919-351c36058166","previousPostId":"09b9fac1-e7f9-5477-b9b1-66d83754709a","nextPostId":"e1241ee3-7332-5d80-b4a7-4ccd0927bc77"}},
    "staticQueryHashes": ["2841359383","3708219967"]}