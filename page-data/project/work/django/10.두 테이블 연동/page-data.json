{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/project/work/django/10.두 테이블 연동/",
    "result": {"data":{"site":{"siteMetadata":{"title":"ksy8230.github.io/todayILearned/"}},"markdownRemark":{"id":"539a7a6c-8ccb-5f4e-bb38-6476ee3cc15a","excerpt":"게시글과 작성자 만들고 있는 사이드 프로젝트에는 업체를 등록하는 페이지가 존재한다. 그리고 이 페이지를 작성한 작성자의 이름이 노출됐으면 좋겠다. 업체 모델의 필드 중 username 필드를 db…","html":"<h3 id=\"게시글과-작성자\" style=\"position:relative;\">게시글과 작성자<a href=\"#%EA%B2%8C%EC%8B%9C%EA%B8%80%EA%B3%BC-%EC%9E%91%EC%84%B1%EC%9E%90\" aria-label=\"게시글과 작성자 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>만들고 있는 사이드 프로젝트에는 업체를 등록하는 페이지가 존재한다. 그리고 이 페이지를 작성한 작성자의 이름이 노출됐으면 좋겠다.</p>\n<p>업체 모델의 필드 중 username 필드를 db에 저장할 때 프론트단에서 가져온 값을 그대로 저장했는데, 이 경우 사용자가 본인의 정보를 수정한 경우 싱크가 맞지 않아버린다.</p>\n<p>ex. 업체 리스트 생성 당시 내 이름이 김아무개인데 나중에 김아무개를 이아무개로 변경 시 업체 리스트 등록자에도 이아무개로 변경되는 것이 맞음</p>\n<p>“업체 테이블”과 “사용자 테이블”은 따로 존재하고 업체 테이블은 사용자의 정보를 참조해야 한다.<br>\n이 경우 사용할 수 있는 것이 <strong>외래키 (Foreign Key)</strong> 이다.</p>\n<h3 id=\"작업-내용\" style=\"position:relative;\">작업 내용<a href=\"#%EC%9E%91%EC%97%85-%EB%82%B4%EC%9A%A9\" aria-label=\"작업 내용 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>업체 모델의 username 필드를 User 테이블에서 가져오도록 지정을 한다.<br>\n이때 username 필드에 들어가는 값은 User 테이블에서 해당하는 사용자의 id 값이 들어갈 것이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">companyapp <span class=\"token operator\">></span> models<span class=\"token punctuation\">.</span>py\r\n\r\n  <span class=\"token builtin\">id</span> <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>AutoField<span class=\"token punctuation\">(</span>primary_key<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\r\n  name <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>CharField<span class=\"token punctuation\">(</span>max_length<span class=\"token operator\">=</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\r\n  categories <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>JSONField<span class=\"token punctuation\">(</span>default<span class=\"token operator\">=</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">)</span>\r\n  region <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>IntegerField<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\r\n  phone <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>CharField<span class=\"token punctuation\">(</span>max_length<span class=\"token operator\">=</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\r\n  siteUrl <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>CharField<span class=\"token punctuation\">(</span>max_length<span class=\"token operator\">=</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\r\n  created_at <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>DateTimeField<span class=\"token punctuation\">(</span>auto_now<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\r\n  username <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>ForeignKey<span class=\"token punctuation\">(</span>User<span class=\"token punctuation\">,</span> null<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> blank<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> on_delete<span class=\"token operator\">=</span>models<span class=\"token punctuation\">.</span>CASCADE<span class=\"token punctuation\">)</span> 수정된 부분 ✔</code></pre></div>\n<p>아래 API는 업체를 등록시키는 뷰단의 내용이다.<br>\n추가시킬 내용을 프론트에서 받아와 serializer에 적힌 필드대로 데이터베이스에 저장을 할 것인데, 여기서 username에 해당하는 필드의 값은 프론트에서 받아오는 것이 아닌 이 API를 “요청한 사용자”로 지정한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">companyapp <span class=\"token operator\">></span> views<span class=\"token punctuation\">.</span>py\r\n\r\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">RegisterCompany</span><span class=\"token punctuation\">(</span>APIView<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\r\n    authentication_classes <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>SessionAuthentication<span class=\"token punctuation\">,</span><span class=\"token punctuation\">)</span>\r\n    permission_classes <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>permissions<span class=\"token punctuation\">.</span>IsAuthenticated<span class=\"token punctuation\">,</span><span class=\"token punctuation\">)</span>\r\n    <span class=\"token keyword\">def</span> <span class=\"token function\">post</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\r\n        serializer <span class=\"token operator\">=</span> CompanySerializer<span class=\"token punctuation\">(</span>data<span class=\"token operator\">=</span>request<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span>\r\n        <span class=\"token keyword\">if</span> serializer<span class=\"token punctuation\">.</span>is_valid<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\r\n            serializer<span class=\"token punctuation\">.</span>save<span class=\"token punctuation\">(</span>username<span class=\"token operator\">=</span>self<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">)</span> 수정된 부분 ✔\r\n            <span class=\"token keyword\">return</span> Response<span class=\"token punctuation\">(</span>serializer<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">,</span> status<span class=\"token operator\">=</span>status<span class=\"token punctuation\">.</span>HTTP_201_CREATED<span class=\"token punctuation\">)</span>\r\n        <span class=\"token keyword\">return</span> Response<span class=\"token punctuation\">(</span>serializer<span class=\"token punctuation\">.</span>errors<span class=\"token punctuation\">,</span> status<span class=\"token operator\">=</span>status<span class=\"token punctuation\">.</span>HTTP_400_BAD_REQUEST<span class=\"token punctuation\">)</span></code></pre></div>\n<p>프론트로 보낼 응답인 JSON의 내부에도 username이라는 값을 내려줄 건데, views.py 파일의 serializer 작업에서 넣어준 “요청한 유저”의 객체를 읽어온다.<br>\n장고가 참 편하다고 느낀 부분이 이 부분이다. 참조된 테이블의 특정 컬럼에서 내가 내려주고 싶은 값을 지정하는 작업이 편리하다는 것.<br>\n업체 테이블에서 username이라는 필드에는 사용자의 id로 저장이 되어 있을 텐데 serializer 클래스에서 내가 내려주고 싶은 값으로 바꿔줄 수 있다.<br>\n업체를 누가 등록했는지 식별할 수 있는 사용자 닉네임으로 변경했다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">companyapp <span class=\"token operator\">></span> serializer<span class=\"token punctuation\">.</span>py\r\n\r\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">CompanySerializer</span><span class=\"token punctuation\">(</span>serializers<span class=\"token punctuation\">.</span>ModelSerializer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\r\n  username <span class=\"token operator\">=</span> serializers<span class=\"token punctuation\">.</span>ReadOnlyField<span class=\"token punctuation\">(</span>source<span class=\"token operator\">=</span><span class=\"token string\">'username.name'</span><span class=\"token punctuation\">)</span> 수정된 부분 ✔\r\n  <span class=\"token keyword\">class</span> <span class=\"token class-name\">Meta</span><span class=\"token punctuation\">:</span>\r\n      model <span class=\"token operator\">=</span> Company\r\n      fields <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'id'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'name'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'categories'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'region'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'phone'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'siteUrl'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'created_at'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'username'</span><span class=\"token punctuation\">)</span></code></pre></div>","frontmatter":{"title":"10. 무작정 장고로 사이드프로젝트 만들기","date":"2022-08-02","description":null,"tags":["Django"]},"tableOfContents":"<ul>\n<li><a href=\"#%EA%B2%8C%EC%8B%9C%EA%B8%80%EA%B3%BC-%EC%9E%91%EC%84%B1%EC%9E%90\">게시글과 작성자</a></li>\n<li><a href=\"#%EC%9E%91%EC%97%85-%EB%82%B4%EC%9A%A9\">작업 내용</a></li>\n</ul>"},"previous":{"fields":{"slug":"/project/work/django/9.버그리스트(update.220722)/"},"frontmatter":{"title":"9. 무작정 장고로 사이드프로젝트 만들기 - 버그리스트"}},"next":{"fields":{"slug":"/setting/react/웹취약점관련/"},"frontmatter":{"title":"웹 보안, 웹 취약점 설정"}}},"pageContext":{"id":"539a7a6c-8ccb-5f4e-bb38-6476ee3cc15a","previousPostId":"cb75d0aa-ae6a-5fce-9ebd-fea9f7103776","nextPostId":"4c5d0b17-b2f9-50e8-bdaa-d3e656189870"}},
    "staticQueryHashes": ["2841359383","3708219967"]}