{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/project/work/django/8.내 정보 수정/",
    "result": {"data":{"site":{"siteMetadata":{"title":"Today I Learned"}},"markdownRemark":{"id":"90987e9a-6e0f-5a5e-9ab9-d95065cff6ef","excerpt":"만들어볼 API 종류 ✅ 내 정보 수정 (/account/updateUser/) *** accountapp(사용자지정명칭)이라는 계정관련한 장고앱이 만들어져있다는 가정하에 진행합니다. 새로운 serializer…","html":"<h3>만들어볼 API 종류</h3>\n<ul>\n<li>✅ 내 정보 수정 (/account/updateUser/)</li>\n</ul>\n<p>*** accountapp(사용자지정명칭)이라는 계정관련한 장고앱이 만들어져있다는 가정하에 진행합니다.</p>\n<h4>새로운 serializer 클래스 생성 기준</h4>\n<p>프론트에서 보내온 새로운 내 정보를 받아 지정한 모델 양식에 맞게 검증 후, json 형태로 만들어주는 작업이 필요하다.<br>\nserializer 클래스를 새로 생성해야하는 기준이 무엇인가 궁금했는데 Meta 영역에서 지정해주는 경우가 다르다면 새로운 serializer 클래스를 생성하는게 좋은 것 같다.👈</p>\n<p><code class=\"language-text\">fields</code>: 호출 받는 데이터 영역</p>\n<p><code class=\"language-text\">extra_kwargs</code>: 데이터 직렬화할 때 각 데이터마다 옵션을 설정해주는 영역</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token operator\">//</span> accountapp <span class=\"token operator\">></span> serializers<span class=\"token punctuation\">.</span>py\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">AccountDetailSerializer</span><span class=\"token punctuation\">(</span>serializers<span class=\"token punctuation\">.</span>ModelSerializer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">Meta</span><span class=\"token punctuation\">:</span> 👈\n        model <span class=\"token operator\">=</span> User\n        fields <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'id'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'username'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'email'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'name'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'password'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">)</span>\n        extra_kwargs <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token string\">'id'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'read_only'</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">//</span> 고유한 <span class=\"token builtin\">id</span> 값은 읽기만 가능하도록\n            <span class=\"token string\">'password'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'required'</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'write_only'</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">//</span> 비밀번호 수정은 필수가 아니며<span class=\"token punctuation\">,</span> 쓰기<span class=\"token punctuation\">(</span>수정<span class=\"token punctuation\">)</span>이 가능하도록\n            <span class=\"token string\">'username'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'required'</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">False</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">//</span> <span class=\"token builtin\">id</span> 수정은 필수가 아니다\n        <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">update</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> instance<span class=\"token punctuation\">,</span> validated_data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        instance<span class=\"token punctuation\">.</span>username <span class=\"token operator\">=</span> validated_data<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">\"username\"</span><span class=\"token punctuation\">,</span> instance<span class=\"token punctuation\">.</span>username<span class=\"token punctuation\">)</span>\n        password <span class=\"token operator\">=</span> validated_data<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">\"password\"</span><span class=\"token punctuation\">,</span> instance<span class=\"token punctuation\">.</span>password<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> password<span class=\"token punctuation\">.</span>startswith<span class=\"token punctuation\">(</span><span class=\"token string\">\"pbkdf2_sha256$\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            instance<span class=\"token punctuation\">.</span>set_password<span class=\"token punctuation\">(</span>validated_data<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">\"password\"</span><span class=\"token punctuation\">,</span> instance<span class=\"token punctuation\">.</span>password<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        instance<span class=\"token punctuation\">.</span>email <span class=\"token operator\">=</span> validated_data<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">\"email\"</span><span class=\"token punctuation\">,</span> instance<span class=\"token punctuation\">.</span>email<span class=\"token punctuation\">)</span>\n        instance<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> validated_data<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span> instance<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span>\n        instance<span class=\"token punctuation\">.</span>save<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">return</span> instance</code></pre></div>\n<h4>view 파일에서 serializer를 불러올 때 넣어주는 인자값</h4>\n<p>정보를 수정하기 위해 serializer 클래스 내부에서 update 함수를 이용한다.<br>\nupdate 함수는 인자값을 두 개를 갖고 있다. (비교 및 수정될 instance와 검증할 데이터)</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">update</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> instance<span class=\"token punctuation\">,</span> validated_data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></code></pre></div>\n<p>비교 및 수정된 instance = 해당 api를 요청한 사용자✔<br>\n검증할 데이터 = 수정 요청으로 넘어온 데이터✔</p>\n<p>views.py 파일에서 AccountDetailSerializer를 불러올 때 이 두 개의 인자값과 매칭시켜서 보내준다.✔</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token operator\">//</span> accountapp <span class=\"token operator\">></span> views<span class=\"token punctuation\">.</span>py\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token comment\"># 사용자 수정</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">UpdateAccount</span><span class=\"token punctuation\">(</span>APIView<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    authentication_classes <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>SessionAuthentication<span class=\"token punctuation\">,</span><span class=\"token punctuation\">)</span>\n    permission_classes <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>permissions<span class=\"token punctuation\">.</span>IsAuthenticated<span class=\"token punctuation\">,</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">patch</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">,</span> <span class=\"token builtin\">format</span><span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        user <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">.</span>user\n        serializer <span class=\"token operator\">=</span> AccountDetailSerializer<span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">,</span> data<span class=\"token operator\">=</span>request<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">,</span> partial<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>✔\n        <span class=\"token keyword\">if</span> serializer<span class=\"token punctuation\">.</span>is_valid<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            serializer<span class=\"token punctuation\">.</span>save<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span> Response<span class=\"token punctuation\">(</span>serializer<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">,</span> status<span class=\"token operator\">=</span>status<span class=\"token punctuation\">.</span>HTTP_201_CREATED<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> Response<span class=\"token punctuation\">(</span>serializer<span class=\"token punctuation\">.</span>errors<span class=\"token punctuation\">,</span> status<span class=\"token operator\">=</span>status<span class=\"token punctuation\">.</span>HTTP_400_BAD_REQUEST<span class=\"token punctuation\">)</span></code></pre></div>\n<h4>비밀번호는 암호화시켜서 저장</h4>\n<p>한참 헤맸던 부분이다.<br>\n회원가입시 비밀번호를 1234로 생성하였다해도 db에는 암호화된 값으로 저장이 된다. 이는 수정할 때도 마찬가지로 암호화되어서 저장되어야 한다는 의미다.<br>\n하지만 기존의 비밀번호를 1234 -> 1111로 변경했을 때 serializer로 넘어온 데이터는 암호화되어 넘어오는게 아닌, 프론트에서 보내주는 그대로의 데이터인 111로 넘어온다.<br>\n따라서 아래와 같이 instance의 password 값을 set_password 함수를 이용해 검증된 비밀번호로 암호화시켜주는 작업이 필요하다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> password<span class=\"token punctuation\">.</span>startswith<span class=\"token punctuation\">(</span><span class=\"token string\">\"pbkdf2_sha256$\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            instance<span class=\"token punctuation\">.</span>set_password<span class=\"token punctuation\">(</span>validated_data<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">\"password\"</span><span class=\"token punctuation\">,</span> instance<span class=\"token punctuation\">.</span>password<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>","frontmatter":{"title":"8. 무작정 장고로 사이드프로젝트 만들기 - 내 정보 수정하기","date":"2022-07-06","description":null,"tags":["Django"]}},"previous":{"fields":{"slug":"/project/work/django/07.Nextjs 전역 상태 만들기/"},"frontmatter":{"title":"7. 무작정 장고로 사이드프로젝트 만들기 - Nextjs에서 전역 상태로 사용자 불러오기"}},"next":{"fields":{"slug":"/project/work/django/9.버그리스트(update.220722)/"},"frontmatter":{"title":"9. 무작정 장고로 사이드프로젝트 만들기 - 버그리스트"}}},"pageContext":{"id":"90987e9a-6e0f-5a5e-9ab9-d95065cff6ef","previousPostId":"67f9e754-5bce-5160-86ea-57b771b1dc9e","nextPostId":"80f4f568-ab25-5f0f-ab41-d0c4e9152648"}},
    "staticQueryHashes": ["2841359383","3708219967"]}