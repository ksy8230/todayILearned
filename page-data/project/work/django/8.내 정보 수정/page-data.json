{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/project/work/django/8.내 정보 수정/",
    "result": {"data":{"site":{"siteMetadata":{"title":"Today I Learned"}},"markdownRemark":{"id":"1cb0e10e-a023-59a9-8736-098876f092ef","excerpt":"만들어볼 API 종류 ✅ 내 정보 수정 (/account/updateUser/) *** accountapp(사용자지정명칭)이라는 계정관련한 장고앱이 만들어져있다는 가정하에 진행합니다. 새로운 serializer…","html":"<h3 id=\"만들어볼-api-종류\" style=\"position:relative;\">만들어볼 API 종류<a href=\"#%EB%A7%8C%EB%93%A4%EC%96%B4%EB%B3%BC-api-%EC%A2%85%EB%A5%98\" aria-label=\"만들어볼 api 종류 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<ul>\n<li>✅ 내 정보 수정 (/account/updateUser/)</li>\n</ul>\n<p>*** accountapp(사용자지정명칭)이라는 계정관련한 장고앱이 만들어져있다는 가정하에 진행합니다.</p>\n<h4 id=\"새로운-serializer-클래스-생성-기준\" style=\"position:relative;\">새로운 serializer 클래스 생성 기준<a href=\"#%EC%83%88%EB%A1%9C%EC%9A%B4-serializer-%ED%81%B4%EB%9E%98%EC%8A%A4-%EC%83%9D%EC%84%B1-%EA%B8%B0%EC%A4%80\" aria-label=\"새로운 serializer 클래스 생성 기준 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h4>\n<p>프론트에서 보내온 새로운 내 정보를 받아 지정한 모델 양식에 맞게 검증 후, json 형태로 만들어주는 작업이 필요하다.<br>\nserializer 클래스를 새로 생성해야하는 기준이 무엇인가 궁금했는데 Meta 영역에서 지정해주는 경우가 다르다면 새로운 serializer 클래스를 생성하는게 좋은 것 같다.👈</p>\n<p><code class=\"language-text\">fields</code>: 호출 받는 데이터 영역</p>\n<p><code class=\"language-text\">extra_kwargs</code>: 데이터 직렬화할 때 각 데이터마다 옵션을 설정해주는 영역</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token operator\">//</span> accountapp <span class=\"token operator\">></span> serializers<span class=\"token punctuation\">.</span>py\r\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\r\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">AccountDetailSerializer</span><span class=\"token punctuation\">(</span>serializers<span class=\"token punctuation\">.</span>ModelSerializer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\r\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">Meta</span><span class=\"token punctuation\">:</span> 👈\r\n        model <span class=\"token operator\">=</span> User\r\n        fields <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'id'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'username'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'email'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'name'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'password'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">)</span>\r\n        extra_kwargs <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\r\n            <span class=\"token string\">'id'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'read_only'</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">//</span> 고유한 <span class=\"token builtin\">id</span> 값은 읽기만 가능하도록\r\n            <span class=\"token string\">'password'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'required'</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'write_only'</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">//</span> 비밀번호 수정은 필수가 아니며<span class=\"token punctuation\">,</span> 쓰기<span class=\"token punctuation\">(</span>수정<span class=\"token punctuation\">)</span>이 가능하도록\r\n            <span class=\"token string\">'username'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'required'</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">False</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">//</span> <span class=\"token builtin\">id</span> 수정은 필수가 아니다\r\n        <span class=\"token punctuation\">}</span>\r\n\r\n    <span class=\"token keyword\">def</span> <span class=\"token function\">update</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> instance<span class=\"token punctuation\">,</span> validated_data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\r\n        instance<span class=\"token punctuation\">.</span>username <span class=\"token operator\">=</span> validated_data<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">\"username\"</span><span class=\"token punctuation\">,</span> instance<span class=\"token punctuation\">.</span>username<span class=\"token punctuation\">)</span>\r\n        password <span class=\"token operator\">=</span> validated_data<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">\"password\"</span><span class=\"token punctuation\">,</span> instance<span class=\"token punctuation\">.</span>password<span class=\"token punctuation\">)</span>\r\n        <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> password<span class=\"token punctuation\">.</span>startswith<span class=\"token punctuation\">(</span><span class=\"token string\">\"pbkdf2_sha256$\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\r\n            instance<span class=\"token punctuation\">.</span>set_password<span class=\"token punctuation\">(</span>validated_data<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">\"password\"</span><span class=\"token punctuation\">,</span> instance<span class=\"token punctuation\">.</span>password<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\r\n        instance<span class=\"token punctuation\">.</span>email <span class=\"token operator\">=</span> validated_data<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">\"email\"</span><span class=\"token punctuation\">,</span> instance<span class=\"token punctuation\">.</span>email<span class=\"token punctuation\">)</span>\r\n        instance<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> validated_data<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span> instance<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span>\r\n        instance<span class=\"token punctuation\">.</span>save<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\r\n\r\n        <span class=\"token keyword\">return</span> instance</code></pre></div>\n<h4 id=\"view-파일에서-serializer를-불러올-때-넣어주는-인자값\" style=\"position:relative;\">view 파일에서 serializer를 불러올 때 넣어주는 인자값<a href=\"#view-%ED%8C%8C%EC%9D%BC%EC%97%90%EC%84%9C-serializer%EB%A5%BC-%EB%B6%88%EB%9F%AC%EC%98%AC-%EB%95%8C-%EB%84%A3%EC%96%B4%EC%A3%BC%EB%8A%94-%EC%9D%B8%EC%9E%90%EA%B0%92\" aria-label=\"view 파일에서 serializer를 불러올 때 넣어주는 인자값 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h4>\n<p>정보를 수정하기 위해 serializer 클래스 내부에서 update 함수를 이용한다.<br>\nupdate 함수는 인자값을 두 개를 갖고 있다. (비교 및 수정될 instance와 검증할 데이터)</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">update</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> instance<span class=\"token punctuation\">,</span> validated_data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></code></pre></div>\n<p>비교 및 수정된 instance = 해당 api를 요청한 사용자✔<br>\n검증할 데이터 = 수정 요청으로 넘어온 데이터✔</p>\n<p>views.py 파일에서 AccountDetailSerializer를 불러올 때 이 두 개의 인자값과 매칭시켜서 보내준다.✔</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token operator\">//</span> accountapp <span class=\"token operator\">></span> views<span class=\"token punctuation\">.</span>py\r\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\r\n<span class=\"token comment\"># 사용자 수정</span>\r\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">UpdateAccount</span><span class=\"token punctuation\">(</span>APIView<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\r\n    authentication_classes <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>SessionAuthentication<span class=\"token punctuation\">,</span><span class=\"token punctuation\">)</span>\r\n    permission_classes <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>permissions<span class=\"token punctuation\">.</span>IsAuthenticated<span class=\"token punctuation\">,</span><span class=\"token punctuation\">)</span>\r\n    <span class=\"token keyword\">def</span> <span class=\"token function\">patch</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">,</span> <span class=\"token builtin\">format</span><span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\r\n        user <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">.</span>user\r\n        serializer <span class=\"token operator\">=</span> AccountDetailSerializer<span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">,</span> data<span class=\"token operator\">=</span>request<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">,</span> partial<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>✔\r\n        <span class=\"token keyword\">if</span> serializer<span class=\"token punctuation\">.</span>is_valid<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\r\n            serializer<span class=\"token punctuation\">.</span>save<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\r\n            <span class=\"token keyword\">return</span> Response<span class=\"token punctuation\">(</span>serializer<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">,</span> status<span class=\"token operator\">=</span>status<span class=\"token punctuation\">.</span>HTTP_201_CREATED<span class=\"token punctuation\">)</span>\r\n        <span class=\"token keyword\">return</span> Response<span class=\"token punctuation\">(</span>serializer<span class=\"token punctuation\">.</span>errors<span class=\"token punctuation\">,</span> status<span class=\"token operator\">=</span>status<span class=\"token punctuation\">.</span>HTTP_400_BAD_REQUEST<span class=\"token punctuation\">)</span></code></pre></div>\n<h4 id=\"비밀번호는-암호화시켜서-저장\" style=\"position:relative;\">비밀번호는 암호화시켜서 저장<a href=\"#%EB%B9%84%EB%B0%80%EB%B2%88%ED%98%B8%EB%8A%94-%EC%95%94%ED%98%B8%ED%99%94%EC%8B%9C%EC%BC%9C%EC%84%9C-%EC%A0%80%EC%9E%A5\" aria-label=\"비밀번호는 암호화시켜서 저장 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h4>\n<p>한참 헤맸던 부분이다.<br>\n회원가입시 비밀번호를 1234로 생성하였다해도 db에는 암호화된 값으로 저장이 된다. 이는 수정할 때도 마찬가지로 암호화되어서 저장되어야 한다는 의미다.<br>\n하지만 기존의 비밀번호를 1234 -> 1111로 변경했을 때 serializer로 넘어온 데이터는 암호화되어 넘어오는게 아닌, 프론트에서 보내주는 그대로의 데이터인 111로 넘어온다.<br>\n따라서 아래와 같이 instance의 password 값을 set_password 함수를 이용해 검증된 비밀번호로 암호화시켜주는 작업이 필요하다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> password<span class=\"token punctuation\">.</span>startswith<span class=\"token punctuation\">(</span><span class=\"token string\">\"pbkdf2_sha256$\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\r\n            instance<span class=\"token punctuation\">.</span>set_password<span class=\"token punctuation\">(</span>validated_data<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">\"password\"</span><span class=\"token punctuation\">,</span> instance<span class=\"token punctuation\">.</span>password<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>","frontmatter":{"title":"8. 무작정 장고로 사이드프로젝트 만들기 - 내 정보 수정하기","date":"2022-07-06","description":null,"tags":["Django"]},"tableOfContents":"<ul>\n<li>\n<p><a href=\"#%EB%A7%8C%EB%93%A4%EC%96%B4%EB%B3%BC-api-%EC%A2%85%EB%A5%98\">만들어볼 API 종류</a></p>\n<ul>\n<li><a href=\"#%EC%83%88%EB%A1%9C%EC%9A%B4-serializer-%ED%81%B4%EB%9E%98%EC%8A%A4-%EC%83%9D%EC%84%B1-%EA%B8%B0%EC%A4%80\">새로운 serializer 클래스 생성 기준</a></li>\n<li><a href=\"#view-%ED%8C%8C%EC%9D%BC%EC%97%90%EC%84%9C-serializer%EB%A5%BC-%EB%B6%88%EB%9F%AC%EC%98%AC-%EB%95%8C-%EB%84%A3%EC%96%B4%EC%A3%BC%EB%8A%94-%EC%9D%B8%EC%9E%90%EA%B0%92\">view 파일에서 serializer를 불러올 때 넣어주는 인자값</a></li>\n<li><a href=\"#%EB%B9%84%EB%B0%80%EB%B2%88%ED%98%B8%EB%8A%94-%EC%95%94%ED%98%B8%ED%99%94%EC%8B%9C%EC%BC%9C%EC%84%9C-%EC%A0%80%EC%9E%A5\">비밀번호는 암호화시켜서 저장</a></li>\n</ul>\n</li>\n</ul>"},"previous":{"fields":{"slug":"/project/work/django/07.Nextjs 전역 상태 만들기/"},"frontmatter":{"title":"7. 무작정 장고로 사이드프로젝트 만들기 - Nextjs에서 전역 상태로 사용자 불러오기"}},"next":{"fields":{"slug":"/project/work/django/9.버그리스트(update.220722)/"},"frontmatter":{"title":"9. 무작정 장고로 사이드프로젝트 만들기 - 버그리스트"}}},"pageContext":{"id":"1cb0e10e-a023-59a9-8736-098876f092ef","previousPostId":"fda27897-8980-5df2-8567-d58d0e0bb6c6","nextPostId":"cb75d0aa-ae6a-5fce-9ebd-fea9f7103776"}},
    "staticQueryHashes": ["2841359383","3708219967"]}