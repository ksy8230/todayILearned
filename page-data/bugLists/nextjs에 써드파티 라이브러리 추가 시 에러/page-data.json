{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/bugLists/nextjs에 써드파티 라이브러리 추가 시 에러/",
    "result": {"data":{"site":{"siteMetadata":{"title":"Today I Learned"}},"markdownRemark":{"id":"1bf27e92-f932-5510-829d-30d07f897830","excerpt":"nextjs 기반의 프로젝트로 작업 중… nextjs에 커스텀한 모듈들만 모아둔 써드파티 라이브러리를 추가해야할 일이 생겼다. CRA 기반의 프로젝트 기준으로 작업되었던 모듈들이라 정말 미친듯한 에러들이 떴는데… 이 과정에서 CRA와 nextjs…","html":"<p>nextjs 기반의 프로젝트로 작업 중… nextjs에 커스텀한 모듈들만 모아둔 써드파티 라이브러리를 추가해야할 일이 생겼다.<br>\nCRA 기반의 프로젝트 기준으로 작업되었던 모듈들이라 정말 미친듯한 에러들이 떴는데… 이 과정에서 CRA와 nextjs가 외부 모듈을 받아들이는 포맷이 다르다는 걸 알게 되었다.<br>\n프론트 개발자끼리 사용하려고 예쁘게 정리해둔 모듈들을 rollup을 이용해 빌드시킨 후 verdaccio에 배포를 한 뒤 필요한 프로젝트에 추가하는 식으로 사용을 하는데<br>\n여태까지 esm 형식으로 CRA에 추가해 왔던 것이 nextjs에서는 인식이 안 되었던 것… nextjs는 cjs, 즉 common js로만 패키지 모듈을 인식하고 있었다.<br>\n빌드 파일의 용량을 줄이겠다고 컴포넌트를 개발할 때 가능하면 -> (라이브러리명)/esm/locale.js 이런 식으로 범위를 좁혀서 import 시킨 뒤 배포를 했는데 이런 것들이 에러를 뿜었던 것.</p>\n<p>esm 글자들을 지워주고 재배포하니 예쁘게 잘 동작한다.</p>","frontmatter":{"title":"nextjs에 써드파티 라이브러리 추가 시 에러","date":"2022-09-14","description":null,"tags":["버그리포트"]},"tableOfContents":""},"previous":{"fields":{"slug":"/nextjs/Nextjs/"},"frontmatter":{"title":"NextJS API 공부 - 동적 페이지 서버사이드 렌더링 작업 (getStaticPaths, getStaticProps)"}},"next":{"fields":{"slug":"/review/2022/"},"frontmatter":{"title":"2022 회고"}}},"pageContext":{"id":"1bf27e92-f932-5510-829d-30d07f897830","previousPostId":"55ba5a1e-95cf-52dc-bade-0f12320e60f0","nextPostId":"a9e4fe9a-9572-5f3b-9095-cd51be615d0b"}},
    "staticQueryHashes": ["2841359383","3708219967"]}