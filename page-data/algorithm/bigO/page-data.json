{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/algorithm/bigO/",
    "result": {"data":{"site":{"siteMetadata":{"title":"ksy8230.github.io"}},"markdownRemark":{"id":"3cbd35c1-4f45-51c7-929a-8f73086537e7","excerpt":"…","html":"<p>이번 방통대 학기부터 알고리즘을 듣게 되었는데 우연히 유데미에서 저렴한 가격으로 자바스크립트를 이용해 알고리즘 강의가 풀린 걸 발견했다. 🥰<br>\n학기 강의만 들으면 어려울 것 같았는데 나에게 익숙한 언어로 다른 강의도 함께 병행하면 도움이 될 것 같다.</p>\n<h3 id=\"빅오-표기법이란\" style=\"position:relative;\">빅오 표기법이란<a href=\"#%EB%B9%85%EC%98%A4-%ED%91%9C%EA%B8%B0%EB%B2%95%EC%9D%B4%EB%9E%80\" aria-label=\"빅오 표기법이란 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>알고리즘의 효율성을 표기해주는 표기법이다. 알고리즘의 효율성은 데이터 개수(n)가 주어졌을 때 덧셈, 뺄셈, 곱셈 같은 기본 연산의 횟수를 의미한다.<br>\n빅오 표기법은 알고리즘의 시간 복잡도와 공간 복잡도를 나타내는데 주로 사용된다.<br>\n(시간 복잡도는 알고리즘의 시간 효율성을 의미하고, 공간 복잡도는 알고리즘의 공간(메모리) 효율성을 의미한다.)</p>\n<p><img src=\"https://user-images.githubusercontent.com/24996316/154831296-dc1994da-af15-4c35-bc02-57e48279714b.png\" alt=\"image\"></p>\n<h3 id=\"시간-복잡도\" style=\"position:relative;\">시간 복잡도<a href=\"#%EC%8B%9C%EA%B0%84-%EB%B3%B5%EC%9E%A1%EB%8F%84\" aria-label=\"시간 복잡도 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<ul>\n<li>\n<p>시간의 효율성</p>\n</li>\n<li>\n<p>O(n) : 실행 비율이 1:1로 늘어나는 것.</p>\n<p>가장 쉬운 예로 변수 n 값을 받았을 때 1부터 n까지를 더하는 루프 함수가 있다면 이 경우 빅O(n) 효율성을 가진 시간 복잡도를 의미한다.</p>\n</li>\n<li>\n<p>O(n^2) : 실행 시간이 n^2으로 늘어나는 것.<br>\n<img src=\"https://user-images.githubusercontent.com/24996316/154831345-12c37cef-5606-4e56-bed5-0e37a104a85a.png\" alt=\"image\"></p>\n<p>루프문의 중첩된 함수의 경우 빅오 n^2(제곱) 효율성을 가진 시간 복잡도를 의미한다.</p>\n</li>\n<li>\n<p>O(log n) : 실행 시간이 로그형으로 늘어나는 것.<br>\n데이터양이 많아져도 시간이 조금씩 늘어나며 시간 복잡도에서 O(log n)이 나오면 좋은 시간 효율성을 가졌다고 본다.</p>\n</li>\n</ul>\n<h3 id=\"공간-복잡도\" style=\"position:relative;\">공간 복잡도<a href=\"#%EA%B3%B5%EA%B0%84-%EB%B3%B5%EC%9E%A1%EB%8F%84\" aria-label=\"공간 복잡도 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<ul>\n<li>공간의 효율성</li>\n<li>undefined, boolean, number : 입력의 크기와 상관 없이 불변의 공간을 갖는다.</li>\n<li>string, 객체, 배열: o(n) 공간 복잡도를 갖는다.</li>\n</ul>\n<p>공간 복잡도의 예시를 보자.</p>\n<p>예시1</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">function logUpTo(n) {\r\n    for (var i = 1; i &lt;= n; i++) {\r\n        console.log(i);\r\n    }\r\n}</code></pre></div>\n<p>위 코드의 공간 복잡도는 o(1)이 된다. 이유는 루프문을 몇번을 돌아도 함수 내부에 할당된 변수인 var 공간이 변하지 않기 때문이다.</p>\n<p>예시2</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">function onlyElementsAtEvenIndex(array) {\r\n    var newArray = Array(Math.ceil(array.length / 2));\r\n    for (var i = 0; i &lt; array.length; i++) {\r\n        if (i % 2 === 0) {\r\n            newArray[i / 2] = array[i];\r\n        }\r\n    }\r\n    return newArray;\r\n}</code></pre></div>\n<p>위 코드의 공간 복잡도는 o(n)이 된다. 이유는 루프문을 돌 때마다 배열에 할당된 공간이 매개변수에 맞게 늘어나기 때문이다.</p>\n<p>예시3</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">function subtotals(array) {\r\n    var subtotalArray = Array(array.length);\r\n    for (var i = 0; i &lt; array.length; i++) {\r\n        var subtotal = 0;\r\n        for (var j = 0; j &lt;= i; j++) {\r\n            subtotal += array[j];\r\n        }\r\n        subtotalArray[i] = subtotal;\r\n    }\r\n    return subtotalArray;\r\n}</code></pre></div>\n<p>위 코드의 공간 복잡도는 o(n)이 된다. 함수 내부에 할당된 변수는 i, j가 이중 루프문으로 배열을 증가시키지만 어쨌든 리턴되는 결과값은 이중으로 돌고 나온 하나의 배열이기 때문이다.</p>","frontmatter":{"title":"빅오 표기법","date":"2022-02-20","description":null,"tags":["base"]},"tableOfContents":"<ul>\n<li><a href=\"#%EB%B9%85%EC%98%A4-%ED%91%9C%EA%B8%B0%EB%B2%95%EC%9D%B4%EB%9E%80\">빅오 표기법이란</a></li>\n<li><a href=\"#%EC%8B%9C%EA%B0%84-%EB%B3%B5%EC%9E%A1%EB%8F%84\">시간 복잡도</a></li>\n<li><a href=\"#%EA%B3%B5%EA%B0%84-%EB%B3%B5%EC%9E%A1%EB%8F%84\">공간 복잡도</a></li>\n</ul>"},"previous":{"fields":{"slug":"/project/work/kubernetes/"},"frontmatter":{"title":"쿠버네티스란"}},"next":{"fields":{"slug":"/bugLists/gitlab_docker_connection_error/"},"frontmatter":{"title":"docker daemon 커넥션 에러"}}},"pageContext":{"id":"3cbd35c1-4f45-51c7-929a-8f73086537e7","previousPostId":"aed27215-3e43-5b0c-ae94-cf24b2b6e761","nextPostId":"52581684-6d06-5f9c-ae75-35866f457012"}},
    "staticQueryHashes": ["1414085880","2841359383"]}