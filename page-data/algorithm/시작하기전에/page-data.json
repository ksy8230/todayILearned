{"componentChunkName":"component---src-templates-blog-post-js","path":"/algorithm/시작하기전에/","result":{"data":{"site":{"siteMetadata":{"title":"ksy8230.github.io"}},"markdownRemark":{"id":"85d6edcb-6b08-5e8c-b2b1-b5cfcc3994dd","excerpt":"…","html":"<h2 id=\"자료구조의-종류\" style=\"position:relative;\">자료구조의 종류<a href=\"#%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0%EC%9D%98-%EC%A2%85%EB%A5%98\" aria-label=\"자료구조의 종류 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<ol>\n<li>단순 구조</li>\n<li>선형 구조</li>\n</ol>\n<ul>\n<li>자료들이 선형으로 나열되어있는 구조로 한 원소 뒤에 하나의 원소만 존재하는 형태이다.</li>\n<li>배열, 연결리스트, 스택, 큐</li>\n</ul>\n<ol start=\"3\">\n<li>비선형 구조</li>\n</ol>\n<ul>\n<li>원소가 여러개의 원소와 관계를 가질 수 있는 구조로 계층적인 구조나 망형 구조를 표현할 때 적합하다.</li>\n<li>트리, 그래프</li>\n</ul>\n<blockquote>\n<p>완벽한 자료 구조는 없다\r\n다만 상황에 맞는 자료 구조가 있을 뿐이므로 각 자료구조들이 어떤 상황에 알맞는지 아는 것이 중요하다.</p>\n</blockquote>\n<h2 id=\"시간-복잡도\" style=\"position:relative;\">시간 복잡도<a href=\"#%EC%8B%9C%EA%B0%84-%EB%B3%B5%EC%9E%A1%EB%8F%84\" aria-label=\"시간 복잡도 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>시간 복잡도는 빅오 표기법의 개념으로 설명이 가능하다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/24996316/154831296-dc1994da-af15-4c35-bc02-57e48279714b.png\" alt=\"image\"></p>\n<p>빅오 표기법은 위 그래프의 순서로 가장 빠른순부터 가장 느린순까지 표기할 수 있다.<br>\n빅오 표기법의 특징은 크게 두 가지이다.</p>\n<ol>\n<li>상수항은 무시</li>\n</ol>\n<ul>\n<li>데이터 입력값(n)이 충분히 크다고 가정하므로 상수항 같은 사소한 부분은 무시</li>\n</ul>\n<ol start=\"2\">\n<li>가장 큰 항 외에는 무시</li>\n</ol>\n<ul>\n<li>빅오 표기법은 데이터 입력값(n)의 크기에 따라 영향을 받기 때문에 가장 영향력이 큰 항에 이외에 영향력이 없는 항들은 무시</li>\n</ul>\n<h2 id=\"자바스크립트의-9가지-코드-트릭\" style=\"position:relative;\">자바스크립트의 9가지 코드 트릭<a href=\"#%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%EC%9D%98-9%EA%B0%80%EC%A7%80-%EC%BD%94%EB%93%9C-%ED%8A%B8%EB%A6%AD\" aria-label=\"자바스크립트의 9가지 코드 트릭 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<ol>\n<li>구조 분해 할당을 이용한 변수 swap<br>\nES6의 구조 분해 할당 문법을 사용하여 두 변수를 swap 할 수 있다.</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">let a = 5, b = 10;\r\n[a, b] = [b, a];\r\nconsole.log(a, b); // 10 5</code></pre></div>\n<ol start=\"2\">\n<li>배열 생성으로 루프 제거하기<br>\n보통 단순히 범위 루프를 돌고 싶다면 다음과 같이 코드를 작성한다.</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">let sum = 0;\r\nfor (let i = 5; i &lt; 10; i += 1) {\r\n    sum += i;\r\n}</code></pre></div>\n<p>만약 범위 루프를 함수형 프로그래밍 방식으로 사용하고 싶다면 배열을 생성해서 사용할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const sum = Array.from(new Array(5), (_, k) => k + 5)\r\n    .reduce((acc, cur) => acc + cur, 0);</code></pre></div>\n<h2 id=\"배열\" style=\"position:relative;\">배열<a href=\"#%EB%B0%B0%EC%97%B4\" aria-label=\"배열 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<ol>\n<li>\n<p>자료구조 중 선형구조에 해당한다.</p>\n</li>\n<li>\n<p>일반적으로는 변수에 배열이 할당될 때 고정된 크기를 가지지만 스크립트 언어에서는 동적으로 크기가 증감되도록 만들어져있다.</p>\n</li>\n<li>\n<p>원하는 원소의 index 번호를 알면 그 번호로 원소에 접근할 수 있다.</p>\n<ul>\n<li>3-1. index는 number의 형태가 아니어도 가능하다. key값으로 false를 넣으면 자동으로 string 타입(arr[‘false’])으로 변환되어 배열에 접근한다. 이는 자바스크립트에서 배열은 객체 타입으로 취급되기 때문이다.</li>\n<li>3-2. 배열에 값을 추가, 삭제할 때 값들이 하나씩 밀리기 때문에 빅오(n)만큼의 시간복잡도가 소요된다.</li>\n<li>3-3. 배열에 값을 탐색할 때는 값들이 순차적으로 이루어져있기 때문에 해당 index로 바로 접근해 빅오(1)만큼의 시간복잡도가 소요된다.</li>\n</ul>\n</li>\n<li>\n<p>원소를 삭제하면 해당 index의 위치는 비어진다.</p>\n</li>\n<li>\n<p>배열을 다양한 값으로 초기값 넣는법</p>\n</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const arr1 = new Array(5).fill(0); // [0,0,0,0,0]\r\nconst arr2 = Array.from(Array(5), (value, index) => { return value + 1; }); // [1,2,3,4,5]</code></pre></div>\n<h2 id=\"연결리스트\" style=\"position:relative;\">연결리스트<a href=\"#%EC%97%B0%EA%B2%B0%EB%A6%AC%EC%8A%A4%ED%8A%B8\" aria-label=\"연결리스트 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<ol>\n<li>\n<p>자료구조 중 선형구조에 해당한다.</p>\n</li>\n<li>\n<p>연결리스트는 요소들로 이루어져있고 각 요소들은 데이터영역, 포인터영역으로 구성된다.</p>\n<ul>\n<li>2-1. 리스트의 요소들은 포인터로 연결되어있다.</li>\n<li>2-2. 리스트의 요소를 추가, 삭제할 때 포인터를 사용하기 때문에 빅오(1)만큼의 시간복잡도가 소요된다.</li>\n<li>2-3. 리스트의 요소를 탐색할 때는 요소들이 순차적으로 이루어져있지 않기 때문에 모든 요소를 순회하여 빅오(n)만큼의 시간복잡도가 소요된다.</li>\n</ul>\n</li>\n<li>\n<p>연결리스트의 형태를 코드로 살펴보면 아래와 같다.</p>\n</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Node</span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> value\r\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span>\r\n  <span class=\"token punctuation\">}</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>요소에 해당하는 개별 노드는 데이터영역인 value와 포인터 정보 영역인 next를 갖는다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">SinglyLinkedList</span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span>\r\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>tail <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span>\r\n  <span class=\"token punctuation\">}</span>\r\n\r\n  <span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token operator\">...</span>\r\n  <span class=\"token punctuation\">}</span>\r\n  <span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token operator\">...</span>\r\n  <span class=\"token punctuation\">}</span>\r\n  <span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token operator\">...</span>\r\n  <span class=\"token punctuation\">}</span>\r\n  <span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token operator\">...</span>\r\n  <span class=\"token punctuation\">}</span>\r\n  <span class=\"token function\">display</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token operator\">...</span>\r\n  <span class=\"token punctuation\">}</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>개별노드로 이루어진 연결리스트는 탐색(find), 추가(insert), 삭제(remove)의 메서드를 갖는다.<br>\n또한 연결리스트에 append, display를 추가해 연결리스트의 값을 할당하고 화면에 보여주도록 해 보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">SinglyLinkedList</span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token operator\">...</span>\r\n  <span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">let</span> currentNode <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head\r\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>currentNode<span class=\"token punctuation\">.</span>value <span class=\"token operator\">!==</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n      currentNode <span class=\"token operator\">=</span> currentNode<span class=\"token punctuation\">.</span>next\r\n    <span class=\"token punctuation\">}</span>\r\n    <span class=\"token keyword\">return</span> currentNode\r\n  <span class=\"token punctuation\">}</span>\r\n  <span class=\"token operator\">...</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>탐색</strong></p>\n<p>요소를 찾기 위해 현재 요소를 헤드에 지정한다. 그리고 현재 요소의 값이 찾는 값과 같으면 리턴하고, 그렇지 않으면 while문으로 돌며 현재 요소의 값을 다음 요소의 값으로 지정해 탐색한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">SinglyLinkedList</span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token operator\">...</span>\r\n  <span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">node<span class=\"token punctuation\">,</span> newValue</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">const</span> newNode <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">(</span>newValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    newNode<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\r\n    node<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> newNode<span class=\"token punctuation\">;</span>\r\n  <span class=\"token punctuation\">}</span>\r\n  <span class=\"token operator\">...</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>추가</strong><br>\nex. [1,2,3] 리스트에서 2위치에 4를 추가하겠다라고 했을 때 결과는 [1,2,4,3]이 되어야한다.</p>\n<p>요소(4)를 추가하기 위해 추가될 위치 정보(2)와 추가할 노드 정보(4)를 파라미터로 넘겨준다.<br>\n새로 추가될 노드(4)는 추가할 노드 정보(4)를 기반으로 생성하고, 새로운 노드의 포인터 값(null)은 추가될 위치에 있던 노드의 포인터(2)로 바꾼다.<br>\n추가될 위치(2)에 있던 노드의 포인터는 새로 추가될 노드(4)를 가리키도록 지정한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">SinglyLinkedList</span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token operator\">...</span>\r\n  <span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">.</span>value <span class=\"token operator\">===</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\r\n      <span class=\"token keyword\">let</span> prevNode <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">;</span>\r\n      <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>prevNode<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">.</span>value <span class=\"token operator\">!==</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n        prevNode <span class=\"token operator\">=</span> prevNode<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\r\n      <span class=\"token punctuation\">}</span>\r\n\r\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>prevNode<span class=\"token punctuation\">.</span>next <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n        prevNode<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> prevNode<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\r\n      <span class=\"token punctuation\">}</span>\r\n    <span class=\"token punctuation\">}</span>\r\n  <span class=\"token punctuation\">}</span>\r\n  <span class=\"token operator\">...</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>삭제</strong>\r\nex. [1,2,3] 리스트에서 2를 삭제한다면 결과는 [1,3]이 되어야한다.</p>\n<p>우선 삭제할 노드의 포인터 값을 헤드부터 설정해 삭제할 대상을 while문으로 찾는다.<br>\n삭제할 노드의 포인터 값이 존재하면 이 값을 다음의 다음 포인터로 연결해 중간 요소 정보를 없앤다.<br>\n해당 삭제 작업은 추가와 달리 삭제될 위치 정보를 파라미터로 넘겨주지 않아서 빅오(n) 시간복잡도를 갖는다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">SinglyLinkedList</span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token operator\">...</span>\r\n  <span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">newValue</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">const</span> newNode <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">(</span>newValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head <span class=\"token operator\">=</span> newNode<span class=\"token punctuation\">;</span>\r\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>tail <span class=\"token operator\">=</span> newNode<span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\r\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>tail<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> newNode<span class=\"token punctuation\">;</span>\r\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>tail <span class=\"token operator\">=</span> newNode<span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span>\r\n  <span class=\"token punctuation\">}</span>\r\n  <span class=\"token operator\">...</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>할당</strong>\r\n연결리스트 요소를 할당하기 위헤 새로운 노드를 파라미터 기반의 값으로 생성한다.<br>\n만일 연결리스트에 헤드값이 없으면 새로운 노드가 헤드이자 테일이 된다.<br>\n연결리스트에 헤드값이 있으면 테일의 포인터를 새로운 노드로 지정하고 테일에 새로운 노드를 할당한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">SinglyLinkedList</span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token operator\">...</span>\r\n  <span class=\"token function\">display</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">let</span> currentNode <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">;</span>\r\n    <span class=\"token keyword\">let</span> displayString <span class=\"token operator\">=</span> <span class=\"token string\">\"[\"</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>currentNode <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n      displayString <span class=\"token operator\">+=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>currentNode<span class=\"token punctuation\">.</span>value<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">, </span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\r\n      currentNode <span class=\"token operator\">=</span> currentNode<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span>\r\n    displayString <span class=\"token operator\">=</span> displayString<span class=\"token punctuation\">.</span><span class=\"token function\">substr</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> displayString<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    displayString <span class=\"token operator\">+=</span> <span class=\"token string\">\"]\"</span><span class=\"token punctuation\">;</span>\r\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>displayString<span class=\"token punctuation\">)</span>\r\n  <span class=\"token punctuation\">}</span>\r\n  <span class=\"token operator\">...</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"배열-vs-연결리스트\" style=\"position:relative;\">배열 vs 연결리스트<a href=\"#%EB%B0%B0%EC%97%B4-vs-%EC%97%B0%EA%B2%B0%EB%A6%AC%EC%8A%A4%ED%8A%B8\" aria-label=\"배열 vs 연결리스트 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>이 둘의 가장 큰 특징은 메모리 구성 방식이 다르다는 점이다.\r\n배열에 할당된 메모리는 순차적으로 이루어져있지만 연결리스트에 할당된 메모리들은 연속적이지 않고 퍼져있다.</p>","frontmatter":{"title":"알고리즘 공부를 시작하기 전에 개념 정리","date":"2022-12-24","description":null,"tags":["base"]},"tableOfContents":"<ul>\n<li><a href=\"#%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0%EC%9D%98-%EC%A2%85%EB%A5%98\">자료구조의 종류</a></li>\n<li><a href=\"#%EC%8B%9C%EA%B0%84-%EB%B3%B5%EC%9E%A1%EB%8F%84\">시간 복잡도</a></li>\n<li><a href=\"#%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%EC%9D%98-9%EA%B0%80%EC%A7%80-%EC%BD%94%EB%93%9C-%ED%8A%B8%EB%A6%AD\">자바스크립트의 9가지 코드 트릭</a></li>\n<li><a href=\"#%EB%B0%B0%EC%97%B4\">배열</a></li>\n<li><a href=\"#%EC%97%B0%EA%B2%B0%EB%A6%AC%EC%8A%A4%ED%8A%B8\">연결리스트</a></li>\n<li><a href=\"#%EB%B0%B0%EC%97%B4-vs-%EC%97%B0%EA%B2%B0%EB%A6%AC%EC%8A%A4%ED%8A%B8\">배열 vs 연결리스트</a></li>\n</ul>"},"previous":{"fields":{"slug":"/reactjs/react-query-migration/"},"frontmatter":{"title":"Redux에서 React-Query로 마이그레이션"}},"next":{"fields":{"slug":"/project/work/mollang/1.storybook/"},"frontmatter":{"title":"Storybook으로 공통 모듈 컨벤션 만들기 (feat.rollup, tailwindcss)"}}},"pageContext":{"id":"85d6edcb-6b08-5e8c-b2b1-b5cfcc3994dd","previousPostId":"d9debd10-5497-51f1-9ae5-df5f27848358","nextPostId":"09e56341-2075-50e1-b7b9-7c6079cd8098"}},"staticQueryHashes":["1414085880","2841359383"]}