{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/reactjs/리랜더링이 먹히는 경우/",
    "result": {"data":{"site":{"siteMetadata":{"title":"Today I Learned"}},"markdownRemark":{"id":"5cc229b9-d641-5d9a-868b-250bc5e70d05","excerpt":"리덕스 라이브러리를 활용해 상태값들을 관리하며 개발하던 중 리렌더링이 비이상적으로 되는 현상이 발생했다. 새로고침을 할 때마다 화면에 보이는 값이 매번 동일하게 보이지 않았다. image 총 개수를 불러오는 api (이하 액션 A…","html":"<p>리덕스 라이브러리를 활용해 상태값들을 관리하며 개발하던 중 리렌더링이 비이상적으로 되는 현상이 발생했다.<br>\n새로고침을 할 때마다 화면에 보이는 값이 매번 동일하게 보이지 않았다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/24996316/201300319-b62f9714-e59c-42a5-bc39-567c36c6d68c.png\" alt=\"image\"></p>\n<p>총 개수를 불러오는 api (이하 액션 A라 지칭)</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\r\n  <span class=\"token property\">\"total\"</span><span class=\"token operator\">:</span> <span class=\"token number\">10</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>그룹들이 각각 얼마나 사용했는지를 나타내는 데이터 api (이하 액션 B라 지칭)</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\r\n  <span class=\"token property\">\"data\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\r\n    <span class=\"token punctuation\">{</span>\r\n      <span class=\"token property\">\"title\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"group1\"</span><span class=\"token punctuation\">,</span>\r\n      <span class=\"token property\">\"value\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span>\r\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\r\n    <span class=\"token punctuation\">{</span>\r\n      <span class=\"token property\">\"title\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"group2\"</span><span class=\"token punctuation\">,</span>\r\n      <span class=\"token property\">\"value\"</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span>\r\n    <span class=\"token punctuation\">}</span>\r\n  <span class=\"token punctuation\">]</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이 두 api를 가지고 대략 위와 같은 ui를 표현해야하는데 모든 그룹의 사용량 합의 값이 보였다 안 보였다 하는 것. 이유가 뭘까 궁금해 버그 현상을 구현해 놓고 소스를 살펴보니 나는 두 가지 실수를 했었다.</p>\n<ol>\n<li>리렌더링되어야할 useEffect의 두 번째 인자값 누락</li>\n<li>서로 다른 api임에도 리듀서에서 동일한 상태값으로 로딩을 시키려했던 것</li>\n</ol>\n<p>1번에서 문제가 난 코드의 상황은 아래와 같았다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber 0\" class=\"language-js line-numbers\"><code class=\"language-js\">  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">let</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>totalCount <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// &lt;- totalCount: useSelector를 이용해 가져온 상태값</span>\r\n      <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> fetchData<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// &lt;- fetchData: useSelector를 이용해 가져온 상태값</span>\r\n        <span class=\"token keyword\">const</span> group <span class=\"token operator\">=</span> fetchData<span class=\"token operator\">?.</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\r\n        count <span class=\"token operator\">+=</span> group<span class=\"token operator\">?.</span>value<span class=\"token punctuation\">;</span>\r\n      <span class=\"token punctuation\">}</span>\r\n      <span class=\"token function\">setUsed</span><span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// &lt;- ❗ count 값 0으로 찍힘</span>\r\n    <span class=\"token punctuation\">}</span>\r\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>totalCount<span class=\"token punctuation\">,</span> loaded<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>해당 useEffect는 totalCount, fetchData의 값을 useSelector에서 가져와 사용하고 있기 때문에 totalCount의 값과 fetchData의 값의 변화를 관찰하며 리렌더링하는 역할을 한다. 그런데 useEffect의 두 번째 인자에 fetchData 값이 빠져있어서 fetchData가 업데이트되지 못한 상태로 하위 코드들이 계산이 돼 버그 현상이 나타났던 것.<br>\n다만 여기서 의문이었던 점은 loaded 값이었다. loaded 값에 따라 위 useEffect는 재발생되어야했는데 왜 그렇지 못했을까?</p>\n<p>해당 api과 관련된 액션 A와 액션 B의 리듀서를 살펴보니 답이 나왔다.</p>\n<ol>\n<li>액션 A Request (state: {loaded: false;, else state… }) => 액션 A Success (state: {loaded: true;, else state… })</li>\n<li>액션 B Request (state: {loaded: false;, else state… }) => 액션 B Success (state: {loaded: true;, else state…})</li>\n</ol>\n<p>두 액션이 함께 실행되어야했는데 두 액션이 같은 상태값을 변화시키고 있어서 리렌더링의 오류가 생겼던 것이다.<br>\n이때 해결 방법은 액션 A, 액션 B의 로딩 상태의 값을 다르게 바꿔주거나 useEffect의 두 번째 인자값에 누락된 fetchData를 추가시켜주면 버그 현상이 해결이 되는 걸 확인했다.</p>","frontmatter":{"title":"리렌더링이 먹히는 경우","date":"2022-11-11","description":null,"tags":["reactjs"]},"tableOfContents":""},"previous":{"fields":{"slug":"/project/work/resource/"},"frontmatter":{"title":"리소스"}},"next":{"fields":{"slug":"/nextjs/nextjs로 마이그레이션하기 - 개념/"},"frontmatter":{"title":"NextJS로 마이그레이션하기 - 개념"}}},"pageContext":{"id":"5cc229b9-d641-5d9a-868b-250bc5e70d05","previousPostId":"e0fda7ed-7017-5922-89a9-638a38e745bb","nextPostId":"29807ffc-4449-5ee2-893f-62471678760c"}},
    "staticQueryHashes": ["2841359383","3708219967"]}