{"componentChunkName":"component---src-templates-blog-post-js","path":"/javascript/1.js_list/","result":{"data":{"site":{"siteMetadata":{"title":"ksy8230.github.io"}},"markdownRemark":{"id":"d370894b-242a-5c0a-87e8-bdb19df3c614","excerpt":"1. prototype이란? 클래스 없이 상속의 효과를 구현하게 해주는 방법 1.1 Function.bind 가능한 이유? 자바스크립트에서 객체는 모두 숨김 프로퍼티 [[Prototype…","html":"<h2 id=\"1-prototype이란\" style=\"position:relative;\">1. prototype이란?<a href=\"#1-prototype%EC%9D%B4%EB%9E%80\" aria-label=\"1 prototype이란 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<ul>\n<li>클래스 없이 상속의 효과를 구현하게 해주는 방법</li>\n</ul>\n<h3 id=\"11-functionbind-가능한-이유\" style=\"position:relative;\">1.1 Function.bind 가능한 이유?<a href=\"#11-functionbind-%EA%B0%80%EB%8A%A5%ED%95%9C-%EC%9D%B4%EC%9C%A0\" aria-label=\"11 functionbind 가능한 이유 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<ul>\n<li>자바스크립트에서 객체는 모두 숨김 프로퍼티 [[Prototype]] 를 갖고 있다. 함수도 객체이므로 마찬가지이다. 다만 함수 객체 내에는 기본적으로 prototype이라는 프로퍼티가 존재하고 이 프로퍼티 내부에 bind라는 메서드가 존재한다. 따라서 Function.bind가 실행 가능하다.</li>\n</ul>\n<h3 id=\"12-prototype을-이용해-상속-구현해-보기\" style=\"position:relative;\">1.2 prototype을 이용해 상속 구현해 보기<a href=\"#12-prototype%EC%9D%84-%EC%9D%B4%EC%9A%A9%ED%95%B4-%EC%83%81%EC%86%8D-%EA%B5%AC%ED%98%84%ED%95%B4-%EB%B3%B4%EA%B8%B0\" aria-label=\"12 prototype을 이용해 상속 구현해 보기 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/**\r\n * 외부에서 받은 name 인자값을 name 프로퍼티로 갖는 함수 객체 생성\r\n * 이때 디폴트 프로퍼티가 constructor 프로퍼티로 설정된다\r\n * Rabbit.prototype = { constructor: Rabbit }\r\n * 그리고 constructor 프로퍼티는 함수 자신을 가리킨다\r\n */</span>\r\n<span class=\"token keyword\">function</span> <span class=\"token function\">Rabbit</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name\r\n<span class=\"token punctuation\">}</span>\r\n<span class=\"token comment\">// 해당 함수 객체의 프로퍼티에 eat=true 속성을 부여시킨다</span>\r\n<span class=\"token class-name\">Rabbit</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>eats <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\r\n<span class=\"token comment\">/**\r\n * 함수 객체를 new 생성자로 호출하면 만들어진 인스턴스는 { constructor: Rabbit }을 상속 받는다\r\n * 그리고 함수 객체를 new 생성자로 호출할 때 빈 객체를 만들어 해당 객체에 this를 할당시킨다\r\n * 따라서 만들어진 인스턴스의 name 값은 토끼1이 할당된다\r\n */</span>\r\n<span class=\"token keyword\">const</span> rabbit <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Rabbit</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"토끼1\"</span><span class=\"token punctuation\">)</span>\r\n<span class=\"token comment\">/**\r\n * 만들어진 인스턴스는 {constructor: Rabbit}을 상속 받았으므로 아래의 콘솔 결과는 true가 나온다\r\n */</span>\r\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>rabbit<span class=\"token punctuation\">.</span>eats<span class=\"token punctuation\">)</span></code></pre></div>\n<h2 id=\"2-this\" style=\"position:relative;\">2. this<a href=\"#2-this\" aria-label=\"2 this permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<ul>\n<li>현재 실행 문맥을 의미</li>\n<li>전역 공간에선 전역 객체를 가리키고 호출한 객체가 있는 경우 그 객체를 가리킨다</li>\n</ul>\n<h3 id=\"2-1-언제-결정되나\" style=\"position:relative;\">2-1. 언제 결정되나?<a href=\"#2-1-%EC%96%B8%EC%A0%9C-%EA%B2%B0%EC%A0%95%EB%90%98%EB%82%98\" aria-label=\"2 1 언제 결정되나 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<ul>\n<li>함수를 메서드로 호출할 때 호출 주체를 가리킨다</li>\n</ul>\n<h3 id=\"2-2-화살표-함수의-this는\" style=\"position:relative;\">2-2. 화살표 함수의 this는?<a href=\"#2-2-%ED%99%94%EC%82%B4%ED%91%9C-%ED%95%A8%EC%88%98%EC%9D%98-this%EB%8A%94\" aria-label=\"2 2 화살표 함수의 this는 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<ul>\n<li>자바스크립트에서 함수는 호출될 때 매개변수로 전달되는 인자값 외에 암묵적으로 <code class=\"language-text\">arguments 객체</code>와 <code class=\"language-text\">this</code>를 전달 받는다.</li>\n<li>그런데 화살표 함수는 함수를 호출할 때 this 바인딩 과정을 하지 않는다.</li>\n</ul>\n<h3 id=\"2-3-this를-변경시키는-방법은\" style=\"position:relative;\">2-3. this를 변경시키는 방법은?<a href=\"#2-3-this%EB%A5%BC-%EB%B3%80%EA%B2%BD%EC%8B%9C%ED%82%A4%EB%8A%94-%EB%B0%A9%EB%B2%95%EC%9D%80\" aria-label=\"2 3 this를 변경시키는 방법은 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<ul>\n<li>함수를 호출하는 방식은 크게 함수호출/메서드호출/생성자함수호출/call,apply,bind 호출로 가능하다</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 함수 호출</span>\r\n<span class=\"token keyword\">let</span> <span class=\"token function-variable function\">test</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span>\r\n<span class=\"token punctuation\">}</span>\r\n<span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\r\n\r\n<span class=\"token comment\">// 메서드 호출</span>\r\n<span class=\"token keyword\">let</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">method</span><span class=\"token operator\">:</span> test <span class=\"token punctuation\">}</span>\r\nobj<span class=\"token punctuation\">.</span><span class=\"token function\">method</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\r\n\r\n<span class=\"token comment\">// 생성자 함수 호출</span>\r\n<span class=\"token keyword\">let</span> instance <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\r\n\r\n<span class=\"token comment\">// apply/call/bind 호출</span>\r\n<span class=\"token keyword\">let</span> obj2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"obj2\"</span> <span class=\"token punctuation\">}</span>\r\n<span class=\"token function\">test</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>obj2<span class=\"token punctuation\">)</span>\r\n<span class=\"token function\">test</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>obj2<span class=\"token punctuation\">)</span>\r\n<span class=\"token function\">test</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>obj2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<ul>\n<li>call, apply를 이용해 <code class=\"language-text\">첫번째 매개변수</code>에 객체를 제공하면 <code class=\"language-text\">this</code>가 해당 객체에 할당된다</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">me</span><span class=\"token operator\">:</span> <span class=\"token string\">\"me\"</span> <span class=\"token punctuation\">}</span>\r\n<span class=\"token keyword\">function</span> <span class=\"token function\">findThis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>me\r\n<span class=\"token punctuation\">}</span>\r\n<span class=\"token function\">findThis</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span>\r\n<span class=\"token function\">findThis</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span></code></pre></div>\n<ul>\n<li>call, apply의 <code class=\"language-text\">두번째 매개변수</code>를 이용해 호출할 함수의 매개변수를 제공한다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">c<span class=\"token punctuation\">,</span> d</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>a <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>b <span class=\"token operator\">+</span> c <span class=\"token operator\">+</span> d\r\n<span class=\"token punctuation\">}</span>\r\n<span class=\"token keyword\">let</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">b</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">}</span>\r\n<span class=\"token comment\">/**\r\n * apply는 두번째 매개변수로 배열을 받는다\r\n */</span>\r\n<span class=\"token function\">add</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 10</span>\r\n<span class=\"token function\">add</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 10</span></code></pre></div>\n<ul>\n<li>bind 함수로 호출하면 <code class=\"language-text\">첫번째 매개변수</code>의 값을 this로 할당한 새로운 함수를 생성한다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token literal-property property\">x</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\r\n  <span class=\"token function-variable function\">method</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>x\r\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\r\n<span class=\"token punctuation\">}</span>\r\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span><span class=\"token function\">method</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 1</span>\r\n\r\n<span class=\"token keyword\">let</span> onlyMethod <span class=\"token operator\">=</span> obj<span class=\"token punctuation\">.</span>method\r\n<span class=\"token comment\">/**\r\n * 객체의 메서드 함수만 변수에 할당시켜 해당 함수를 호출하면 this가 obj 객체를 가리키는게 아닌 전역 객체를 가리킨다. 전역 객체는 x 값이 없어서 undefined가 된다.\r\n */</span>\r\n<span class=\"token function\">onlyMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// undefined</span>\r\n\r\n<span class=\"token comment\">// onlyMethod</span>\r\n<span class=\"token keyword\">let</span> bindx <span class=\"token operator\">=</span> <span class=\"token function\">onlyMethod</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span></code></pre></div>\n<h2 id=\"4-클로저\" style=\"position:relative;\">4. 클로저<a href=\"#4-%ED%81%B4%EB%A1%9C%EC%A0%80\" aria-label=\"4 클로저 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<h3 id=\"41-클로저-정의한다면\" style=\"position:relative;\">4.1 클로저 정의한다면?<a href=\"#41-%ED%81%B4%EB%A1%9C%EC%A0%80-%EC%A0%95%EC%9D%98%ED%95%9C%EB%8B%A4%EB%A9%B4\" aria-label=\"41 클로저 정의한다면 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<ul>\n<li>함수가 함수를 반환할 때 자신을 둘러싼 환경 정보를 가지고 반환되는 걸 의미한다</li>\n<li>자바스크립트에서 모든 함수는 함수가 생성된 곳의 렉시컬 환경을 기억해 <code class=\"language-text\">[[Environment]]</code>라 불리는 숨김 프로퍼티를 갖는데 여기에 함수가 만들어진 곳의 주변 정보가 저장된다.</li>\n<li>이를 렉시컬 스코프로 정보를 가져온다고도 말한다.</li>\n</ul>\n<h3 id=\"42-클로저-구현\" style=\"position:relative;\">4.2 클로저 구현?<a href=\"#42-%ED%81%B4%EB%A1%9C%EC%A0%80-%EA%B5%AC%ED%98%84\" aria-label=\"42 클로저 구현 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">calc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token keyword\">let</span> number <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\r\n  <span class=\"token keyword\">function</span> <span class=\"token function\">increase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n    number <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\r\n    <span class=\"token keyword\">return</span> increase\r\n  <span class=\"token punctuation\">}</span>\r\n<span class=\"token punctuation\">}</span>\r\n<span class=\"token keyword\">let</span> newCalc <span class=\"token operator\">=</span> <span class=\"token function\">calc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\r\n<span class=\"token function\">newCalc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h3 id=\"43-react-hook에서-클로저가-어떻게-쓰이는가\" style=\"position:relative;\">4.3 React hook에서 클로저가 어떻게 쓰이는가?<a href=\"#43-react-hook%EC%97%90%EC%84%9C-%ED%81%B4%EB%A1%9C%EC%A0%80%EA%B0%80-%EC%96%B4%EB%96%BB%EA%B2%8C-%EC%93%B0%EC%9D%B4%EB%8A%94%EA%B0%80\" aria-label=\"43 react hook에서 클로저가 어떻게 쓰이는가 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<ul>\n<li>리액트 훅 api인 useState가 클로저로 구현되어있다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> _value<span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token keyword\">export</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">initialValue</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\r\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>_value <span class=\"token operator\">===</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\r\n    _value <span class=\"token operator\">=</span> initialValue<span class=\"token punctuation\">;</span>\r\n  <span class=\"token punctuation\">}</span>\r\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">setValue</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">newValue</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n    _value <span class=\"token operator\">=</span> newValue<span class=\"token punctuation\">;</span>\r\n  <span class=\"token punctuation\">}</span>\r\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>_value<span class=\"token punctuation\">,</span> setValue<span class=\"token punctuation\">]</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>\n<p>리액트 훅에서는 useState를 이용해 생성된 상태를 접근하고 유지하기 위해 useState 바깥에 상태를 저장한다. 따라서 useState 함수의 실행 장소가 어디가 되었든 클로저를 통해 바깥에 저장된 상태에 접근해 useState 두번째 배열값인 setState 함수로 상태를 변경한다.</p>\n</li>\n<li>\n<p><a href=\"https://goidle.github.io/react/in-depth-react-reconciler_1/\">https://goidle.github.io/react/in-depth-react-reconciler_1/</a></p>\n</li>\n</ul>\n<h2 id=\"커링이란\" style=\"position:relative;\">커링이란?<a href=\"#%EC%BB%A4%EB%A7%81%EC%9D%B4%EB%9E%80\" aria-label=\"커링이란 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>인자를 여러개 받는 함수를 분리해 함수의 체인으로 만드는 방법이다</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 일반</span>\r\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">normal</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> a <span class=\"token operator\">*</span> b <span class=\"token operator\">*</span> c\r\n<span class=\"token comment\">// 커링</span>\r\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">currying</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">a</span> <span class=\"token operator\">=></span> <span class=\"token parameter\">b</span> <span class=\"token operator\">=></span> <span class=\"token parameter\">c</span> <span class=\"token operator\">=></span> a <span class=\"token operator\">*</span> b <span class=\"token operator\">*</span> c\r\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">currying</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h2 id=\"고차함수란\" style=\"position:relative;\">고차함수란?<a href=\"#%EA%B3%A0%EC%B0%A8%ED%95%A8%EC%88%98%EB%9E%80\" aria-label=\"고차함수란 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>함수를 파라미터로 전달받거나 리턴값으로 반환해주는 메서드</p>\n<ul>\n<li>forEach() : 배열을 순회하며 연산을 수행할 때</li>\n<li>.map() : 기존 배열에 연산을 수행해 새로운 배열을 얻을 때</li>\n<li>findIndex() : 배열의 특정 값의 idx를 구할 때</li>\n<li>.filter() : 배열 중 특정 조건에 부합하는 새로운 배열을 얻을 때</li>\n<li>.reduce() : 누산 연산을 할 때</li>\n<li>.sort() : 배열을 정렬할 때</li>\n<li>reduce 한번 구현해보기</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span>\r\n<span class=\"token keyword\">const</span> sum <span class=\"token operator\">=</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">preValue<span class=\"token punctuation\">,</span> currentValue<span class=\"token punctuation\">,</span> currentIdx<span class=\"token punctuation\">,</span> thisArr</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token comment\">/**\r\n   * preValue : 누산가, 순회하며 계속 더해지는 값\r\n   * currentValue : 현재값\r\n   * currentIdx : 현재 idx\r\n   * thisArr : 참조한 배열\r\n   */</span>\r\n  <span class=\"token keyword\">return</span> preValue <span class=\"token operator\">+</span> currentValue\r\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\r\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Sum: \"</span> <span class=\"token operator\">+</span> sum<span class=\"token punctuation\">)</span></code></pre></div>\n<h2 id=\"일급-객체가-뭔가요\" style=\"position:relative;\">일급 객체가 뭔가요?<a href=\"#%EC%9D%BC%EA%B8%89-%EA%B0%9D%EC%B2%B4%EA%B0%80-%EB%AD%94%EA%B0%80%EC%9A%94\" aria-label=\"일급 객체가 뭔가요 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>이름 없는 리터럴로 생성 가능하다</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">test</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"!\"</span><span class=\"token punctuation\">)</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>변수에 할당 가능하다<br>\n다른 함수를 인자로 받을 수 있다<br>\n함수로서의 결과로 리턴될 수 있다</p>\n<h3 id=\"자바스크립트에서-함수가-일급-객체라면-일급-객체로-뭘-할-수-있나요\" style=\"position:relative;\">자바스크립트에서 함수가 일급 객체라면, 일급 객체로 뭘 할 수 있나요?<a href=\"#%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%EC%97%90%EC%84%9C-%ED%95%A8%EC%88%98%EA%B0%80-%EC%9D%BC%EA%B8%89-%EA%B0%9D%EC%B2%B4%EB%9D%BC%EB%A9%B4-%EC%9D%BC%EA%B8%89-%EA%B0%9D%EC%B2%B4%EB%A1%9C-%EB%AD%98-%ED%95%A0-%EC%88%98-%EC%9E%88%EB%82%98%EC%9A%94\" aria-label=\"자바스크립트에서 함수가 일급 객체라면 일급 객체로 뭘 할 수 있나요 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>자바스크립트에서 함수는 일급 객체이기 때문에 다른 함수의 매개변수로 함수가 사용될 수 있고 함수의 반환값으로 사용될 수 있다. 이런 특징들로 함수형 프로그래밍이 가능하다.</p>\n<h2 id=\"함수형-프로그래밍\" style=\"position:relative;\">함수형 프로그래밍<a href=\"#%ED%95%A8%EC%88%98%ED%98%95-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D\" aria-label=\"함수형 프로그래밍 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<ul>\n<li><code class=\"language-text\">함수를 다른 함수의 파라미터로</code> 넘길 수도 있고 <code class=\"language-text\">리턴값으로</code> 함수를 받을 수도 있는 프로그래밍 방법</li>\n<li>외부 상태에 의존하지 않고 외부 상태를 변형하지도 않는 <code class=\"language-text\">순수함수형</code> 프로그래밍</li>\n</ul>\n<h3 id=\"순수-함수가-뭔가요-일반-함수와는-어떤-차이가-있죠\" style=\"position:relative;\">순수 함수가 뭔가요? 일반 함수와는 어떤 차이가 있죠?<a href=\"#%EC%88%9C%EC%88%98-%ED%95%A8%EC%88%98%EA%B0%80-%EB%AD%94%EA%B0%80%EC%9A%94-%EC%9D%BC%EB%B0%98-%ED%95%A8%EC%88%98%EC%99%80%EB%8A%94-%EC%96%B4%EB%96%A4-%EC%B0%A8%EC%9D%B4%EA%B0%80-%EC%9E%88%EC%A3%A0\" aria-label=\"순수 함수가 뭔가요 일반 함수와는 어떤 차이가 있죠 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>순수 함수는 외부 상태에 의존하지 않고 외부 상태로인해 변경이 없는 함수이고,<br>\n일반 함수는 외부 상태에 의존하거나 외부 값으로인해 변경이 일어나는 함수이다.</p>\n<h2 id=\"객체-프로그래밍\" style=\"position:relative;\">객체 프로그래밍<a href=\"#%EA%B0%9D%EC%B2%B4-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D\" aria-label=\"객체 프로그래밍 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<ul>\n<li>필요한 <code class=\"language-text\">데이터를 추상화</code>시켜 <code class=\"language-text\">객체들끼리 상호작용</code>을 통해 프로그래밍하는 방법</li>\n</ul>\n<h3 id=\"객체-표현-방식-중-자주-사용하는-것은\" style=\"position:relative;\">객체 표현 방식 중 자주 사용하는 것은?<a href=\"#%EA%B0%9D%EC%B2%B4-%ED%91%9C%ED%98%84-%EB%B0%A9%EC%8B%9D-%EC%A4%91-%EC%9E%90%EC%A3%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EB%8A%94-%EA%B2%83%EC%9D%80\" aria-label=\"객체 표현 방식 중 자주 사용하는 것은 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<ul>\n<li><code class=\"language-text\">new Object</code>, <code class=\"language-text\">객체 리터럴</code>, <code class=\"language-text\">new 생성자 함수</code></li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 내장 Object() 생성자 함수</span>\r\n<span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\r\nobj<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"이름\"</span>\r\n<span class=\"token comment\">// 객체 리터럴</span>\r\n<span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"이름\"</span><span class=\"token punctuation\">,</span>\r\n<span class=\"token punctuation\">}</span>\r\n<span class=\"token comment\">// new 생성자 함수</span>\r\n<span class=\"token keyword\">function</span> <span class=\"token function\">Objectf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"이름\"</span>\r\n<span class=\"token punctuation\">}</span>\r\n<span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Objectf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<ul>\n<li>객체 리터럴 방식을 많이 사용했다. 이유는 데이터를 담는 용도로만 객체 표현을 많이 했고 셋 중 어떤 데이터들이 들어있는지 가장 눈으로 보기에 직관적인 표현법이라 생각했다.</li>\n</ul>\n<h2 id=\"합성은-상속과-어떤-장점이-있는지\" style=\"position:relative;\">합성은 상속과 어떤 장점이 있는지?<a href=\"#%ED%95%A9%EC%84%B1%EC%9D%80-%EC%83%81%EC%86%8D%EA%B3%BC-%EC%96%B4%EB%96%A4-%EC%9E%A5%EC%A0%90%EC%9D%B4-%EC%9E%88%EB%8A%94%EC%A7%80\" aria-label=\"합성은 상속과 어떤 장점이 있는지 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<ul>\n<li></li>\n</ul>\n<h2 id=\"mutable한-값과-immutable한-값의-저장-방식의-차이\" style=\"position:relative;\">mutable한 값과 immutable한 값의 저장 방식의 차이<a href=\"#mutable%ED%95%9C-%EA%B0%92%EA%B3%BC-immutable%ED%95%9C-%EA%B0%92%EC%9D%98-%EC%A0%80%EC%9E%A5-%EB%B0%A9%EC%8B%9D%EC%9D%98-%EC%B0%A8%EC%9D%B4\" aria-label=\"mutable한 값과 immutable한 값의 저장 방식의 차이 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<ul>\n<li><code class=\"language-text\">값에 의한 호출</code>과 <code class=\"language-text\">참조에 의한 호출</code>의 차이이다.</li>\n<li>값에 의한 호출은 string, number, boolean, undefined, null 등 원시 자료형을 사용하는 변수들에 해당한다. 이 값에 해당한 변수들은 인자로 넘겨줄 때 <code class=\"language-text\">값을 복사한 상태로 넘겨줘서</code> 다른 메모리값이 생성된다. 따라서 원래의 변수값이 유지된다.</li>\n<li>참조에 의한 호출은 Object, Array와 같은 객체들에게 해당된다. 객체들은 인자로 넘겨질 때 <code class=\"language-text\">원래 값의 주소를 참조</code>하므로 <code class=\"language-text\">변경된 부분이 원래 값에도 반영</code>이 된다.</li>\n</ul>\n<h2 id=\"immutable-이것의-단점도-있는지\" style=\"position:relative;\">immutable? 이것의 단점도 있는지?<a href=\"#immutable-%EC%9D%B4%EA%B2%83%EC%9D%98-%EB%8B%A8%EC%A0%90%EB%8F%84-%EC%9E%88%EB%8A%94%EC%A7%80\" aria-label=\"immutable 이것의 단점도 있는지 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<h2 id=\"json-데이터-파싱-시-가장-신경쓰는-것은\" style=\"position:relative;\">JSON 데이터 파싱 시 가장 신경쓰는 것은?<a href=\"#json-%EB%8D%B0%EC%9D%B4%ED%84%B0-%ED%8C%8C%EC%8B%B1-%EC%8B%9C-%EA%B0%80%EC%9E%A5-%EC%8B%A0%EA%B2%BD%EC%93%B0%EB%8A%94-%EA%B2%83%EC%9D%80\" aria-label=\"json 데이터 파싱 시 가장 신경쓰는 것은 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<h2 id=\"자바스크립트에서-변수를-할당하는-방법\" style=\"position:relative;\">자바스크립트에서 변수를 할당하는 방법<a href=\"#%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%EC%97%90%EC%84%9C-%EB%B3%80%EC%88%98%EB%A5%BC-%ED%95%A0%EB%8B%B9%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95\" aria-label=\"자바스크립트에서 변수를 할당하는 방법 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<ol>\n<li>\n<p>선언 단계</p>\n<ul>\n<li>변수를 실행 컨텍스트의 변수 객체에 등록한다.</li>\n</ul>\n</li>\n<li>\n<p>초기화 단계</p>\n<ul>\n<li>변수를 위한 공간을 메모리에 확보한다. 이 단계에서 변수는 undefined로 초기화된다.</li>\n</ul>\n</li>\n<li>\n<p>할당 단계</p>\n<ul>\n<li>undefined된 초기화 변수에 실제 값을 할당한다.</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"var-vs-letconst\" style=\"position:relative;\">var vs let,const<a href=\"#var-vs-letconst\" aria-label=\"var vs letconst permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<ul>\n<li>var 키워드는 선언과 동시에 초기화 단계가 이루어진다. 따라서 변수 선언 전에 해당값을 불러오면 undfined가 찍힌다.</li>\n<li>let, const 키워드는 선언과 초기화가 분리되어 이루어진다. 변수 선언 전에 해당값을 불러오면 참조 에러가 뜬다.</li>\n</ul>\n<p><a href=\"https://medium.com/@HoseungJang/javascript%EC%97%90%EC%84%9C-async-await%EC%9D%98-%EB%B3%91%EB%AA%A9-%EB%AC%B8%EC%A0%9C-%EA%B0%9C%EC%84%A0%ED%95%98%EA%B8%B0-60d54795c4fa\">https://medium.com/@HoseungJang/javascript%EC%97%90%EC%84%9C-async-await%EC%9D%98-%EB%B3%91%EB%AA%A9-%EB%AC%B8%EC%A0%9C-%EA%B0%9C%EC%84%A0%ED%95%98%EA%B8%B0-60d54795c4fa</a></p>\n<h3 id=\"settimout에-promise를-적용한다면\" style=\"position:relative;\">setTimout에 promise를 적용한다면?<a href=\"#settimout%EC%97%90-promise%EB%A5%BC-%EC%A0%81%EC%9A%A9%ED%95%9C%EB%8B%A4%EB%A9%B4\" aria-label=\"settimout에 promise를 적용한다면 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">delay</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">ms</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve</span> <span class=\"token operator\">=></span>\r\n    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n      <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>ms<span class=\"token punctuation\">)</span>\r\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> ms<span class=\"token punctuation\">)</span>\r\n  <span class=\"token punctuation\">)</span>\r\n<span class=\"token punctuation\">}</span>\r\n\r\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">main2</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">main start</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\r\n\r\n  <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">delay</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span>\r\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span>\r\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">main end</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\r\n<span class=\"token punctuation\">}</span>\r\n\r\n<span class=\"token function\">main2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h2 id=\"generator란\" style=\"position:relative;\">generator란?<a href=\"#generator%EB%9E%80\" aria-label=\"generator란 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>ES6에서 도입된 제너레이터는 코드 블록의 실행을 일시 중지했다가 필요한 시점에 재개할 수 있는 특수한 함수다.</p>\n<h3 id=\"제너레이터와-일반-함수의-차이\" style=\"position:relative;\">제너레이터와 일반 함수의 차이?<a href=\"#%EC%A0%9C%EB%84%88%EB%A0%88%EC%9D%B4%ED%84%B0%EC%99%80-%EC%9D%BC%EB%B0%98-%ED%95%A8%EC%88%98%EC%9D%98-%EC%B0%A8%EC%9D%B4\" aria-label=\"제너레이터와 일반 함수의 차이 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<h2 id=\"es-next-관심있는-문법은\" style=\"position:relative;\">es next 관심있는 문법은?<a href=\"#es-next-%EA%B4%80%EC%8B%AC%EC%9E%88%EB%8A%94-%EB%AC%B8%EB%B2%95%EC%9D%80\" aria-label=\"es next 관심있는 문법은 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<ul>\n<li><a href=\"https://velog.io/@kt5680608/ESNext-%EC%A3%BC%EC%9A%94-%EB%AC%B8%EB%B2%95\">https://velog.io/@kt5680608/ESNext-%EC%A3%BC%EC%9A%94-%EB%AC%B8%EB%B2%95</a></li>\n</ul>\n<h2 id=\"debugging\" style=\"position:relative;\">debugging<a href=\"#debugging\" aria-label=\"debugging permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<h3 id=\"버그-문제를-어떻게-해결-디버깅-방식\" style=\"position:relative;\">버그 문제를 어떻게 해결? (디버깅 방식)<a href=\"#%EB%B2%84%EA%B7%B8-%EB%AC%B8%EC%A0%9C%EB%A5%BC-%EC%96%B4%EB%96%BB%EA%B2%8C-%ED%95%B4%EA%B2%B0-%EB%94%94%EB%B2%84%EA%B9%85-%EB%B0%A9%EC%8B%9D\" aria-label=\"버그 문제를 어떻게 해결 디버깅 방식 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<h3 id=\"call-stack\" style=\"position:relative;\">call stack?<a href=\"#call-stack\" aria-label=\"call stack permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<h3 id=\"network-오류-상황-어떻게-확인\" style=\"position:relative;\">network 오류 상황 어떻게 확인?<a href=\"#network-%EC%98%A4%EB%A5%98-%EC%83%81%ED%99%A9-%EC%96%B4%EB%96%BB%EA%B2%8C-%ED%99%95%EC%9D%B8\" aria-label=\"network 오류 상황 어떻게 확인 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p><a href=\"https://github.com/junh0328/prepare_frontend_interview/blob/main/js.md\">https://github.com/junh0328/prepare_frontend_interview/blob/main/js.md</a></p>","frontmatter":{"title":"Javascript 면접 주제","date":"2022-01-09","description":null,"tags":["javascript"]},"tableOfContents":"<ul>\n<li>\n<p><a href=\"#1-prototype%EC%9D%B4%EB%9E%80\">1. prototype이란?</a></p>\n<ul>\n<li><a href=\"#11-functionbind-%EA%B0%80%EB%8A%A5%ED%95%9C-%EC%9D%B4%EC%9C%A0\">1.1 Function.bind 가능한 이유?</a></li>\n<li><a href=\"#12-prototype%EC%9D%84-%EC%9D%B4%EC%9A%A9%ED%95%B4-%EC%83%81%EC%86%8D-%EA%B5%AC%ED%98%84%ED%95%B4-%EB%B3%B4%EA%B8%B0\">1.2 prototype을 이용해 상속 구현해 보기</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#2-this\">2. this</a></p>\n<ul>\n<li><a href=\"#2-1-%EC%96%B8%EC%A0%9C-%EA%B2%B0%EC%A0%95%EB%90%98%EB%82%98\">2-1. 언제 결정되나?</a></li>\n<li><a href=\"#2-2-%ED%99%94%EC%82%B4%ED%91%9C-%ED%95%A8%EC%88%98%EC%9D%98-this%EB%8A%94\">2-2. 화살표 함수의 this는?</a></li>\n<li><a href=\"#2-3-this%EB%A5%BC-%EB%B3%80%EA%B2%BD%EC%8B%9C%ED%82%A4%EB%8A%94-%EB%B0%A9%EB%B2%95%EC%9D%80\">2-3. this를 변경시키는 방법은?</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#4-%ED%81%B4%EB%A1%9C%EC%A0%80\">4. 클로저</a></p>\n<ul>\n<li><a href=\"#41-%ED%81%B4%EB%A1%9C%EC%A0%80-%EC%A0%95%EC%9D%98%ED%95%9C%EB%8B%A4%EB%A9%B4\">4.1 클로저 정의한다면?</a></li>\n<li><a href=\"#42-%ED%81%B4%EB%A1%9C%EC%A0%80-%EA%B5%AC%ED%98%84\">4.2 클로저 구현?</a></li>\n<li><a href=\"#43-react-hook%EC%97%90%EC%84%9C-%ED%81%B4%EB%A1%9C%EC%A0%80%EA%B0%80-%EC%96%B4%EB%96%BB%EA%B2%8C-%EC%93%B0%EC%9D%B4%EB%8A%94%EA%B0%80\">4.3 React hook에서 클로저가 어떻게 쓰이는가?</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EC%BB%A4%EB%A7%81%EC%9D%B4%EB%9E%80\">커링이란?</a></p>\n</li>\n<li>\n<p><a href=\"#%EA%B3%A0%EC%B0%A8%ED%95%A8%EC%88%98%EB%9E%80\">고차함수란?</a></p>\n</li>\n<li>\n<p><a href=\"#%EC%9D%BC%EA%B8%89-%EA%B0%9D%EC%B2%B4%EA%B0%80-%EB%AD%94%EA%B0%80%EC%9A%94\">일급 객체가 뭔가요?</a></p>\n<ul>\n<li><a href=\"#%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%EC%97%90%EC%84%9C-%ED%95%A8%EC%88%98%EA%B0%80-%EC%9D%BC%EA%B8%89-%EA%B0%9D%EC%B2%B4%EB%9D%BC%EB%A9%B4-%EC%9D%BC%EA%B8%89-%EA%B0%9D%EC%B2%B4%EB%A1%9C-%EB%AD%98-%ED%95%A0-%EC%88%98-%EC%9E%88%EB%82%98%EC%9A%94\">자바스크립트에서 함수가 일급 객체라면, 일급 객체로 뭘 할 수 있나요?</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%ED%95%A8%EC%88%98%ED%98%95-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D\">함수형 프로그래밍</a></p>\n<ul>\n<li><a href=\"#%EC%88%9C%EC%88%98-%ED%95%A8%EC%88%98%EA%B0%80-%EB%AD%94%EA%B0%80%EC%9A%94-%EC%9D%BC%EB%B0%98-%ED%95%A8%EC%88%98%EC%99%80%EB%8A%94-%EC%96%B4%EB%96%A4-%EC%B0%A8%EC%9D%B4%EA%B0%80-%EC%9E%88%EC%A3%A0\">순수 함수가 뭔가요? 일반 함수와는 어떤 차이가 있죠?</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EA%B0%9D%EC%B2%B4-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D\">객체 프로그래밍</a></p>\n<ul>\n<li><a href=\"#%EA%B0%9D%EC%B2%B4-%ED%91%9C%ED%98%84-%EB%B0%A9%EC%8B%9D-%EC%A4%91-%EC%9E%90%EC%A3%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EB%8A%94-%EA%B2%83%EC%9D%80\">객체 표현 방식 중 자주 사용하는 것은?</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%ED%95%A9%EC%84%B1%EC%9D%80-%EC%83%81%EC%86%8D%EA%B3%BC-%EC%96%B4%EB%96%A4-%EC%9E%A5%EC%A0%90%EC%9D%B4-%EC%9E%88%EB%8A%94%EC%A7%80\">합성은 상속과 어떤 장점이 있는지?</a></p>\n</li>\n<li>\n<p><a href=\"#mutable%ED%95%9C-%EA%B0%92%EA%B3%BC-immutable%ED%95%9C-%EA%B0%92%EC%9D%98-%EC%A0%80%EC%9E%A5-%EB%B0%A9%EC%8B%9D%EC%9D%98-%EC%B0%A8%EC%9D%B4\">mutable한 값과 immutable한 값의 저장 방식의 차이</a></p>\n</li>\n<li>\n<p><a href=\"#immutable-%EC%9D%B4%EA%B2%83%EC%9D%98-%EB%8B%A8%EC%A0%90%EB%8F%84-%EC%9E%88%EB%8A%94%EC%A7%80\">immutable? 이것의 단점도 있는지?</a></p>\n</li>\n<li>\n<p><a href=\"#json-%EB%8D%B0%EC%9D%B4%ED%84%B0-%ED%8C%8C%EC%8B%B1-%EC%8B%9C-%EA%B0%80%EC%9E%A5-%EC%8B%A0%EA%B2%BD%EC%93%B0%EB%8A%94-%EA%B2%83%EC%9D%80\">JSON 데이터 파싱 시 가장 신경쓰는 것은?</a></p>\n</li>\n<li>\n<p><a href=\"#%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%EC%97%90%EC%84%9C-%EB%B3%80%EC%88%98%EB%A5%BC-%ED%95%A0%EB%8B%B9%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95\">자바스크립트에서 변수를 할당하는 방법</a></p>\n<ul>\n<li><a href=\"#var-vs-letconst\">var vs let,const</a></li>\n<li><a href=\"#settimout%EC%97%90-promise%EB%A5%BC-%EC%A0%81%EC%9A%A9%ED%95%9C%EB%8B%A4%EB%A9%B4\">setTimout에 promise를 적용한다면?</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#generator%EB%9E%80\">generator란?</a></p>\n<ul>\n<li><a href=\"#%EC%A0%9C%EB%84%88%EB%A0%88%EC%9D%B4%ED%84%B0%EC%99%80-%EC%9D%BC%EB%B0%98-%ED%95%A8%EC%88%98%EC%9D%98-%EC%B0%A8%EC%9D%B4\">제너레이터와 일반 함수의 차이?</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#es-next-%EA%B4%80%EC%8B%AC%EC%9E%88%EB%8A%94-%EB%AC%B8%EB%B2%95%EC%9D%80\">es next 관심있는 문법은?</a></p>\n</li>\n<li>\n<p><a href=\"#debugging\">debugging</a></p>\n<ul>\n<li><a href=\"#%EB%B2%84%EA%B7%B8-%EB%AC%B8%EC%A0%9C%EB%A5%BC-%EC%96%B4%EB%96%BB%EA%B2%8C-%ED%95%B4%EA%B2%B0-%EB%94%94%EB%B2%84%EA%B9%85-%EB%B0%A9%EC%8B%9D\">버그 문제를 어떻게 해결? (디버깅 방식)</a></li>\n<li><a href=\"#call-stack\">call stack?</a></li>\n<li><a href=\"#network-%EC%98%A4%EB%A5%98-%EC%83%81%ED%99%A9-%EC%96%B4%EB%96%BB%EA%B2%8C-%ED%99%95%EC%9D%B8\">network 오류 상황 어떻게 확인?</a></li>\n</ul>\n</li>\n</ul>"},"previous":{"fields":{"slug":"/reactjs/chartjs1/"},"frontmatter":{"title":"react-chartjs 에서 라인에 glow 효과 주는 법"}},"next":{"fields":{"slug":"/docker/docker3/"},"frontmatter":{"title":"생활코딩 Docker 이미지 만드는 법"}}},"pageContext":{"id":"d370894b-242a-5c0a-87e8-bdb19df3c614","previousPostId":"8ad0a4bb-6328-5506-8a1a-a451b816b505","nextPostId":"c70e72a4-a4a6-51a6-b6a2-1f86e0702c43"}},"staticQueryHashes":["1414085880","2841359383"]}