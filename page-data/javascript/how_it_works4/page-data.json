{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/javascript/how_it_works4/",
    "result": {"data":{"site":{"siteMetadata":{"title":"ksy8230.github.io"}},"markdownRemark":{"id":"868c645e-7d74-5177-a4ae-355800f0d51c","excerpt":"Frame 55 개체를 표현하기 위해 객체라는 개념이 있고 이 객체의 행위를 위해 메서드 함수를 사용하며 메서드 함수가 객체에 접근하기 위해 this…","html":"<p><img src=\"https://user-images.githubusercontent.com/24996316/203940809-40ff5208-ed46-46ba-8568-4ff0237c59da.png\" alt=\"Frame 55\"></p>\n<p>개체를 표현하기 위해 객체라는 개념이 있고 이 객체의 행위를 위해 메서드 함수를 사용하며 메서드 함수가 객체에 접근하기 위해 this라는 개념이 있다는 것까지 정리되었다.<br>\n그런데 이 객체가 아주 많은 케이스를 개발해야하는 상황이 온다면 이 모든 객체들을 어떻게 만들어줘야할까? 단순히 백 개의 객체를 만들어야한다고 해서 100번의 복붙 작업이 이루어지지는 않을 것이다.<br>\n객체들끼리의 상관관계를 따져서 최대한 비슷한 기능을 가진 추상적인 객체를 만들어 재활용 가능한 객체를 만든다면 훨씬 더 유용하다. 바로 프로토타입이 존재하는 이유가 여기서 나온다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/24996316/204169773-427758f8-0f66-4cdb-8026-1d884034689c.JPG\" alt=\"프로토타입1\"></p>\n<p>test라는 함수를 만든 뒤 이 함수를 <code class=\"language-text\">console.dir(test)</code>로 찍어서 보면 위와 같은 결과가 나온다.</p>\n<h3 id=\"prototype\" style=\"position:relative;\">[[Prototype]]<a href=\"#prototype\" aria-label=\"prototype permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>자바스크립트에서의 객체들은 모두 숨김 프로퍼티를 갖는다. 이 숨김 프로퍼티의 값은 부모 참조값을 누굴 갖냐에 따라 null이 될수도 있고 다른 대상을 참조하는 값으로 가질 수도 있다. (부모를 참조하는 값 = 프로토타입) 자바스크립트에서 프로토타입의 동작은 참 편리하게 작동한다. 특정 객체의 프로퍼티를 읽으려했을 때 값이 없는 경우 자동으로 프로토타입에서 프로퍼티가 있는지 찾아준다. 예시가 조금 그렇지만 사람으로 따지면 마치 자식에게 돈이 없으면 이 자식의 부모를 알아서 찾아내 돈을 뽑아내는 느낌이다. 자유로운 자바스크립트는 또한 이런 프로토타입의 값을 개발자가 수정하도록 해 주는 함수를 제공해 준다.</p>\n<blockquote>\n<p>❗ [[Prototype]]의 값을 추가하거나 가져오는 게터세터의 역할로 <strong>proto</strong>가 있고 근래에는 Object.getPrototypeOf, Object.setPrototypeOf 함수를 많이 쓴다고 한다</p>\n</blockquote>\n<h4 id=\"리터럴-객체의-프로토타입\" style=\"position:relative;\">리터럴 객체의 프로토타입<a href=\"#%EB%A6%AC%ED%84%B0%EB%9F%B4-%EA%B0%9D%EC%B2%B4%EC%9D%98-%ED%94%84%EB%A1%9C%ED%86%A0%ED%83%80%EC%9E%85\" aria-label=\"리터럴 객체의 프로토타입 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h4>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber 0\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token keyword\">let</span> animal <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\r\n  eats<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\r\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token keyword\">let</span> rabbit <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\r\n  jumps<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\r\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\r\nrabbit<span class=\"token punctuation\">.</span>__proto__ <span class=\"token operator\">=</span> animal<span class=\"token punctuation\">;</span> <span class=\"token comment\">//</span>\r\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">dir</span><span class=\"token punctuation\">(</span>rabbit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>rabbit 리터럴 객체의 프로토타입에 animal 리터럴 객체 값을 부여했다. 결과를 확인해 보면 rabbit 리터럴 객체의 프로토타입에 eats라는 프로퍼티가 추가됐다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/24996316/204171239-8bf227c0-3698-4189-ad3e-156e48b702c3.png\" alt=\"image\"></p>\n<h4 id=\"생성자-함수의-프로토타입\" style=\"position:relative;\">생성자 함수의 프로토타입<a href=\"#%EC%83%9D%EC%84%B1%EC%9E%90-%ED%95%A8%EC%88%98%EC%9D%98-%ED%94%84%EB%A1%9C%ED%86%A0%ED%83%80%EC%9E%85\" aria-label=\"생성자 함수의 프로토타입 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h4>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber 0\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">Rabbit</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span>\r\n\r\n<span class=\"token keyword\">let</span> rabbit <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Rabbit</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"그냥 흰 토끼\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">dir</span><span class=\"token punctuation\">(</span>rabbit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p><img src=\"https://user-images.githubusercontent.com/24996316/204172352-c9dba09e-34d1-49ed-8c3f-5f9d95baf35f.png\" alt=\"image\"></p>\n<p>자바스크립트에서는 리터럴 객체 말고도 new 생성자 함수를 이용해 객체를 만들 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber 0\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token keyword\">let</span> animal <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\r\n  eats<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\r\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token keyword\">function</span> <span class=\"token function\">Rabbit</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token class-name\">Rabbit</span><span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> animal<span class=\"token punctuation\">;</span>\r\n<span class=\"token keyword\">let</span> rabbit <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Rabbit</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"먹는 흰 토끼\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">dir</span><span class=\"token punctuation\">(</span>rabbit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p><img src=\"https://user-images.githubusercontent.com/24996316/204172527-d4a1c6ca-47f0-415d-b189-8eb8b11c7379.png\" alt=\"image\"></p>\n<p>그리고 생성자 함수에서 프로토타입 정보를 접근하는 방법은 <strong>함수 객체 내에 기본으로 존재하는 prototype 프로퍼티를 통해 가능하다.</strong></p>\n<p>prototype 프로퍼티를 이용해 Rabbit 함수 프로토타입에 값을 추가하기 전의 new 생성자 Rabbit 함수로 만들어진 rabbit의 형태를 먼저 살펴보면 아래와 같이 생겼다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/24996316/204172881-d5c3bb1e-3a11-427e-a2f1-c65068129619.JPG\" alt=\"프로토타입4\"></p>\n<p>rabbit은 생성자 함수(constructor function)를 통해 만들어진 변수 객체이다. 자바스크립트 생성자의 특징 중 하나로, 생성자 함수는 new 키워드를 통해 만들어질 때 빈 객체를 만들어 this를 할당시킨다. 그러고나서 해당 함수 본문을 실행하는데 위 코드의 Rabbit을 예로 들자면 this에 name이라는 프로퍼티를 추가한 상태가 된다. 그리고 런타임에서 this를 반환하기 때문에 rabbit.name의 결과값이 “그냥 흰 토끼”가 되는 것이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber 0\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">Rabbit</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span>\r\n<span class=\"token keyword\">let</span> rabbit <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Rabbit</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"그냥 흰 토끼\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span></span></pre></div>\n<p>사실 이 코드의 동작과</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber 0\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token keyword\">let</span> rabbit <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\r\n  name<span class=\"token operator\">:</span> <span class=\"token string\">\"그냥 흰 토끼\"</span>\r\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<p>이 코드는 동일하게 동작한다. 다만 new 생성자 함수를 사용한다면 리터럴 객체보다 쉽게 다른 이름을 가진 Rabbit 객체를 만들 수 있게 된다.</p>\n<h4 id=\"생성자-함수-객체와-일반-함수의-차이\" style=\"position:relative;\">생성자 함수 객체와 일반 함수의 차이<a href=\"#%EC%83%9D%EC%84%B1%EC%9E%90-%ED%95%A8%EC%88%98-%EA%B0%9D%EC%B2%B4%EC%99%80-%EC%9D%BC%EB%B0%98-%ED%95%A8%EC%88%98%EC%9D%98-%EC%B0%A8%EC%9D%B4\" aria-label=\"생성자 함수 객체와 일반 함수의 차이 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h4>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber 0\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">Rabbit</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span>\r\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">dir</span><span class=\"token punctuation\">(</span>Rabbit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span></span></pre></div>\n<p><img src=\"https://user-images.githubusercontent.com/24996316/204173581-881d0663-78a0-4219-af31-73e97e8a150e.png\" alt=\"image\"></p>\n<p>함수 자체를 조회해 보면 [[Prototype]] 는 f 함수를 가리키고 있고 함수도 결국은 객체이기에 f 함수의 [[Prototype]] 은 Object를 가리키고 있다.\r\n하지만 이 Rabbit을 생성자로 함수로 만들어 해당 함수의 인스턴스인 rabbit을 조회해 보면</p>\n<p><img src=\"https://user-images.githubusercontent.com/24996316/204173760-7f1de34b-ea2e-4af1-8db6-9c0f7d9b9ed9.png\" alt=\"image\"></p>\n<p>인스턴스는 객체이기에 당연히 부모를 참조하는 [[Prototype]] 은 Object를 가리키고 있다.<br>\n또한 prototype 프로퍼티는 함수에만 존재한다는 사실을 다시 확인해 볼 수 있다.</p>\n<h3 id=\"함수-prototype-프로퍼티-의도대로-사용하기\" style=\"position:relative;\">함수 prototype 프로퍼티 의도대로 사용하기<a href=\"#%ED%95%A8%EC%88%98-prototype-%ED%94%84%EB%A1%9C%ED%8D%BC%ED%8B%B0-%EC%9D%98%EB%8F%84%EB%8C%80%EB%A1%9C-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\" aria-label=\"함수 prototype 프로퍼티 의도대로 사용하기 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>다시 아까의 예시로 돌아가서 Rabbit이라는 함수로 new 생성자를 이용해 각각 다른 이름을 가진 토끼 객체를 만들려고 한다. 그런데 이 토끼 객체의 부모 참조값에 eat:true 속성을 공통으로 부여하고 싶다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/24996316/204174411-20d4ce0d-da2e-402c-ad31-a884ec1fdff7.JPG\" alt=\"프로토타입5\"></p>\n<p>위와 같이 Rabbit 함수의 prototype에 eats:true 객체 리터럴을 부여하고 rabbit 인스턴스를 조회해보면 의도한 것처럼 콘솔 결과가 잘 나온다. 그런데 Rabbit 함수 자체를 조회해 보면 일반 함수와 뭔가 다른 점이 보인다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/24996316/204175107-2ff3a7c7-665a-4ebf-aca0-43e9b171fcb3.png\" alt=\"image\"> <img src=\"https://user-images.githubusercontent.com/24996316/204173581-881d0663-78a0-4219-af31-73e97e8a150e.png\" alt=\"image\"></p>\n<p>함수의 prototype에 생성자 역할을 하는 constructor가 존재하지 않게 되었다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/24996316/204175270-f81f5f92-5ba8-4d29-a01a-7361322f5595.JPG\" alt=\"프로토타입6\"></p>\n<p>Rabbit 함수는 생성자 함수가 없는 객체가 되어 당연히 위와 같이 다른 이름을 가진 토끼를 만들 수 없다.<br>\n이런 상황을 방지하기 위해 함수의 propertype 속성을 건드릴 때는 객체를 부여하는 식의 덮어쓰기 말고 <strong>Rabbit.prototype.eats = true 식으로 프로퍼티를 추가해야한다.</strong></p>\n<h3 id=\"prototype-최적화\" style=\"position:relative;\">[[Prototype]] 최적화<a href=\"#prototype-%EC%B5%9C%EC%A0%81%ED%99%94\" aria-label=\"prototype 최적화 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>대개는 객체를 생성할 때만 [[Prototype]]을 설정하고 이후엔 수정하지 않는 걸 권장한다. 위 코드들의 예시를 들자면 rabbit이 animal을 상속받도록 설정하고 난 이후엔 상속 관계를 변경하지 않는 게 좋다는 뜻이다. 왜냐면 자바스크립트 엔진은 설정된 상속 시나리오를 토대로 최적화가 되어있기 때문에 Object.setPrototypeOf나 obj.proto=를 써서 프로토타입을 그때그때 바꾸는 연산은 객체 프로퍼티 접근과 관련된 최적화를 망치기 때문에 성능에 나쁜 영향을 미친다. [[Prototype]]을 수정했을 때 다음 결과가 정확한 경우, 혹은 속도가 중요하지 않은 경우가 아니라면 [[Prototype]]의 잦은 수정은 지양해야한다.</p>\n<h3 id=\"참고한-글\" style=\"position:relative;\">참고한 글<a href=\"#%EC%B0%B8%EA%B3%A0%ED%95%9C-%EA%B8%80\" aria-label=\"참고한 글 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p><a href=\"https://ko.javascript.info/function-prototype\">함수의 prototype 프로퍼티</a></p>","frontmatter":{"title":"Javascript 기본-프로토타입","date":"2022-11-28","description":null,"tags":["javascript"]},"tableOfContents":"<ul>\n<li>\n<p><a href=\"#prototype\">[[Prototype]]</a></p>\n<ul>\n<li><a href=\"#%EB%A6%AC%ED%84%B0%EB%9F%B4-%EA%B0%9D%EC%B2%B4%EC%9D%98-%ED%94%84%EB%A1%9C%ED%86%A0%ED%83%80%EC%9E%85\">리터럴 객체의 프로토타입</a></li>\n<li><a href=\"#%EC%83%9D%EC%84%B1%EC%9E%90-%ED%95%A8%EC%88%98%EC%9D%98-%ED%94%84%EB%A1%9C%ED%86%A0%ED%83%80%EC%9E%85\">생성자 함수의 프로토타입</a></li>\n<li><a href=\"#%EC%83%9D%EC%84%B1%EC%9E%90-%ED%95%A8%EC%88%98-%EA%B0%9D%EC%B2%B4%EC%99%80-%EC%9D%BC%EB%B0%98-%ED%95%A8%EC%88%98%EC%9D%98-%EC%B0%A8%EC%9D%B4\">생성자 함수 객체와 일반 함수의 차이</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%ED%95%A8%EC%88%98-prototype-%ED%94%84%EB%A1%9C%ED%8D%BC%ED%8B%B0-%EC%9D%98%EB%8F%84%EB%8C%80%EB%A1%9C-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\">함수 prototype 프로퍼티 의도대로 사용하기</a></p>\n</li>\n<li>\n<p><a href=\"#prototype-%EC%B5%9C%EC%A0%81%ED%99%94\">[[Prototype]] 최적화</a></p>\n</li>\n<li>\n<p><a href=\"#%EC%B0%B8%EA%B3%A0%ED%95%9C-%EA%B8%80\">참고한 글</a></p>\n</li>\n</ul>"},"previous":{"fields":{"slug":"/javascript/how_it_works3/"},"frontmatter":{"title":"Javascript 기본-객체와 메서드, 그리고 this"}},"next":{"fields":{"slug":"/javascript/how_it_works5/"},"frontmatter":{"title":"Javascript 기본-클래스"}}},"pageContext":{"id":"868c645e-7d74-5177-a4ae-355800f0d51c","previousPostId":"43dba548-3dbb-56dd-8c34-56fa7a92aa0b","nextPostId":"59f0b0c2-36fd-541c-801b-c27b316cd9d5"}},
    "staticQueryHashes": ["2841359383","3708219967"]}