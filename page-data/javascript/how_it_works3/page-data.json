{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/javascript/how_it_works3/",
    "result": {"data":{"site":{"siteMetadata":{"title":"ksy8230.github.io"}},"markdownRemark":{"id":"43dba548-3dbb-56dd-8c34-56fa7a92aa0b","excerpt":"Frame 41 (…","html":"<p><img src=\"https://user-images.githubusercontent.com/24996316/203472502-a8534622-8fd4-4a12-98e8-e4385213fb06.png\" alt=\"Frame 41 (2)\"></p>\n<h3 id=\"객체\" style=\"position:relative;\">객체<a href=\"#%EA%B0%9D%EC%B2%B4\" aria-label=\"객체 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>자바스크립트를 설명하는 위키의 설명글에 따르면 아래와 같다.</p>\n<blockquote>\n<p>자바스크립트는 객체 기반의 프로그래밍을 가능하게 해 주는 언어이다.</p>\n</blockquote>\n<p>객체란 사람, 블로그, 토끼 등 실존하는 개체를 표현할 때 사용하는 단어로 이 실존 개체들을 자바스크립트를 통해 프로그래밍으로써 표현이 가능하다는 의미이기도 하다. 또한 개체는 특정한 행위를 하는데 이런 동적인 개념을 자바스크립트에선 메서드로서 표현이 가능하다.</p>\n<h3 id=\"메서드\" style=\"position:relative;\">메서드<a href=\"#%EB%A9%94%EC%84%9C%EB%93%9C\" aria-label=\"메서드 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>개체에 행위를 부여하기위해선 메서드는 개체에 접근할 수단이 필요하다. 그리고 그 수단으로 this가 있다.<br>\n<strong>리터럴 객체 속 메서드의 this는 객체를 가리킨다</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber 0\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token keyword\">let</span> user <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\r\n    name<span class=\"token operator\">:</span> <span class=\"token string\">\"ksy\"</span><span class=\"token punctuation\">,</span>\r\n    <span class=\"token function\">studyJS</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">가 공부를 합니다.</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span>\r\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\r\n\r\nuser<span class=\"token punctuation\">.</span><span class=\"token function\">studyJS</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ksy가 공부를 합니다.</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>user라는 객체에 studyJS 메서드를 만들어 user객체가 해당 메서드를 호출했을 때 “ksy가 공부를 합니다”라는 행위를 하게 한다. 그리고 studyJS 메서드 내부에서 this를 이용해 user 객체의 정보 중 name 값을 가져오는 걸 확인할 수 있다.</p>\n<h3 id=\"함수-안의-this\" style=\"position:relative;\">함수 안의 this<a href=\"#%ED%95%A8%EC%88%98-%EC%95%88%EC%9D%98-this\" aria-label=\"함수 안의 this permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>그렇다면 함수 안에서의 this도 마찬가지일까?<br>\n함수와 메서드의 용어에 혼동이 와서 많이 헷갈렸는데 this를 설명할 때만큼은 분명하게 짚고 넘어가야 편하다.</p>\n<p>객체 > 함수 > 메서드 (> 포괄의 의미)</p>\n<p>메서드는 리터럴 객체{…}에 포함되어 있는 함수이고<br>\n더 큰 개념의 함수는 자바스크립트에서 작업을 수행하는 구성 블록, 혹은 독립적인 코드 조각이다.<br>\n그리고 함수에서 더 큰 개념에 바로 객체가 있다.</p>\n<p>자바스크립트에선 모든 함수에 this를 사용할 수 있다. 그리고 this가 나온 자바스크립트 코드를 이해할 때 헷갈리지 말아야할 부분이 있는데 다른 프로그래밍과 다르게 <strong>자바스크립트의 this는 런타임에서 결정된다.</strong> 호출한 주체가 누구냐에 따라 값이 달라진다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber 0\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token keyword\">let</span> picka <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>name<span class=\"token operator\">:</span> <span class=\"token string\">\"피카츄\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token keyword\">let</span> kobugi <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>name<span class=\"token operator\">:</span> <span class=\"token string\">\"꼬부기\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token keyword\">function</span> <span class=\"token function\">skill</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">가 공격한다</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\r\n\r\npicka<span class=\"token punctuation\">.</span>attack <span class=\"token operator\">=</span> skill<span class=\"token punctuation\">;</span>\r\nkobugi<span class=\"token punctuation\">.</span>attack <span class=\"token operator\">=</span> skill<span class=\"token punctuation\">;</span>\r\n\r\npicka<span class=\"token punctuation\">.</span><span class=\"token function\">attack</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\nkobugi<span class=\"token punctuation\">.</span><span class=\"token function\">attack</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>동일한 함수 skill을 다른 객체 정보를 갖고 있는 pick와 kobugi에게 각각 attack이라는 프로퍼티에 동일한 함수 skill을 연결해줬다. 하지만 결과값은 각 객체의 정보에 따라 다르게 나온다. this가 런타임 단계에서 호출한 주체 정보에 따라 달라진 것이다.</p>\n<h4 id=\"길을-잃은-this\" style=\"position:relative;\">길을 잃은 this<a href=\"#%EA%B8%B8%EC%9D%84-%EC%9E%83%EC%9D%80-this\" aria-label=\"길을 잃은 this permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h4>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber 0\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">makeUser</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\r\n        name<span class=\"token operator\">:</span> <span class=\"token string\">\"ksy\"</span><span class=\"token punctuation\">,</span>\r\n        ref<span class=\"token operator\">:</span> <span class=\"token keyword\">this</span>\r\n    <span class=\"token punctuation\">}</span>\r\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token keyword\">let</span> user <span class=\"token operator\">=</span> <span class=\"token function\">makeUser</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span>ref<span class=\"token punctuation\">)</span> <span class=\"token comment\">// &lt;- 뭐가 찍힐까?</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>위 코드의 마지막 줄 콘솔에는 어떤 값이 찍힐까?</p>\n<p>답은 undefined이다. (실행 환경 nodejs)</p>\n<p>8번 줄에서 makeUser()호출할 당시의 리턴된 this는 호출의 주체가 함수였기 때문에 makeUser를 가르키지 못하고 makeUser 바깥으로 나와 참조할 대상을 찾는다. 이때 ‘user strict’ 엄격모드에서 자바스크립트를 실행하면 대상이 없다고 판단해 undefined를 줄 것이고 엄격모드가 아닌 경우에는 실행 컨텍스트에 따라 값이 달라진다. 브라우저에서는 전역값인 window를 줄 것이고 nodejs에서는 전역값인 global을 준다.</p>\n<p>길을 잃어버린 이 this가 원래 의도대로 makeUser를 가리키게하려면 어떻게 해야할까?</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber 0\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">makeUser</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\r\n        name<span class=\"token operator\">:</span> <span class=\"token string\">\"ksy\"</span><span class=\"token punctuation\">,</span>\r\n        <span class=\"token function\">ref</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span> <span class=\"token comment\">// 👈</span>\r\n        <span class=\"token punctuation\">}</span>\r\n    <span class=\"token punctuation\">}</span>\r\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token keyword\">let</span> user <span class=\"token operator\">=</span> <span class=\"token function\">makeUser</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span><span class=\"token function\">ref</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p><strong>함수를 객체 프로퍼티에 저장해 object.method() 형태로 호출하면 this는 object를 참조한다.</strong> 따라서 해당 코드는 콘솔에 본래 의도했던대로 makerUser 함수에 대한 정보가 찍힌다.</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">{ name: &#39;John&#39;, ref: [Function: ref] }</code></pre></div>\n<h4 id=\"settimeout과-this\" style=\"position:relative;\">setTimeout과 this<a href=\"#settimeout%EA%B3%BC-this\" aria-label=\"settimeout과 this permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h4>\n<p>이런 경우는 어떨까? setTimeout에 객체의 메서드를 콜백으로 전달해도 this가 호출한 객체를 기억할까?</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber 0\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">makeUser</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\r\n        name<span class=\"token operator\">:</span> <span class=\"token string\">\"ksy\"</span><span class=\"token punctuation\">,</span>\r\n        <span class=\"token function\">hi</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> 안녕!</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\r\n        <span class=\"token punctuation\">}</span>\r\n    <span class=\"token punctuation\">}</span>\r\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token keyword\">let</span> user <span class=\"token operator\">=</span> <span class=\"token function\">makeUser</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span>hi<span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ?</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>결과는 undefined다.<br>\nuser.hi 메서드가 setTimeout으로 전달될 때 user 객체에서 분리된 채로 전달되어 name이라는 정보를 잃어버리기 때문이다. 이는 setTimeout만이 가진 특별한 동작 방식 때문인데, setTimeout은 인수로 전달받은 함수를 호출할 때 this에 window를 할당한다. 위 코드에선 window.name 값은 미리 지정하지 않았으니 당연히 undefined가 떴던 것이다.</p>\n<p><strong>방법1: 래핑 함수로 this 잡아두기</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber 0\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">makeUser</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\r\n        name<span class=\"token operator\">:</span> <span class=\"token string\">\"ksy\"</span><span class=\"token punctuation\">,</span>\r\n        <span class=\"token function\">hi</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> 안녕!</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\r\n        <span class=\"token punctuation\">}</span>\r\n    <span class=\"token punctuation\">}</span>\r\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token keyword\">let</span> user <span class=\"token operator\">=</span> <span class=\"token function\">makeUser</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> user<span class=\"token punctuation\">.</span>hi <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// () => {} 래핑!</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>위와 같이 전달한 메서드 위에 함수를 한겹 씌워주면 메서드 내부 this가 참조하는 값은 () => {} 함수에 걸리게 되고 user를 참조하면서 user 안의 name 정보를 가져와 올바른 결과값이 나온다.</p>\n<p><strong>방법2: bind 메서드로 this 붙여놓기</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber 0\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">makeUser</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\r\n        name<span class=\"token operator\">:</span> <span class=\"token string\">\"ksy\"</span><span class=\"token punctuation\">,</span>\r\n        <span class=\"token function\">hi</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> 안녕!</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\r\n        <span class=\"token punctuation\">}</span>\r\n    <span class=\"token punctuation\">}</span>\r\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token keyword\">let</span> user <span class=\"token operator\">=</span> <span class=\"token function\">makeUser</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span><span class=\"token function\">hi</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// bind!</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p><strong>모든 함수는 this를 수정하게 해주는 내장 메서드 bind를 제공한다</strong> this가 바라봤으면 하는 객체를 대상 함수 뒤에 bind 메서드로 붙여놓으면 원하는 결과값이 나온다.</p>\n<h3 id=\"참고한-글\" style=\"position:relative;\">참고한 글<a href=\"#%EC%B0%B8%EA%B3%A0%ED%95%9C-%EA%B8%80\" aria-label=\"참고한 글 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p><a href=\"https://ko.javascript.info/object-methods\">메서드와 this</a></p>","frontmatter":{"title":"Javascript 기본-객체와 메서드, 그리고 this","date":"2022-11-25","description":null,"tags":["javascript"]},"tableOfContents":"<ul>\n<li>\n<p><a href=\"#%EA%B0%9D%EC%B2%B4\">객체</a></p>\n</li>\n<li>\n<p><a href=\"#%EB%A9%94%EC%84%9C%EB%93%9C\">메서드</a></p>\n</li>\n<li>\n<p><a href=\"#%ED%95%A8%EC%88%98-%EC%95%88%EC%9D%98-this\">함수 안의 this</a></p>\n<ul>\n<li><a href=\"#%EA%B8%B8%EC%9D%84-%EC%9E%83%EC%9D%80-this\">길을 잃은 this</a></li>\n<li><a href=\"#settimeout%EA%B3%BC-this\">setTimeout과 this</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EC%B0%B8%EA%B3%A0%ED%95%9C-%EA%B8%80\">참고한 글</a></p>\n</li>\n</ul>"},"previous":{"fields":{"slug":"/review/2022/NHNFORWARD/"},"frontmatter":{"title":"NHN FORWARD"}},"next":null},"pageContext":{"id":"43dba548-3dbb-56dd-8c34-56fa7a92aa0b","previousPostId":"1c44256a-e347-5495-9b81-601731926639","nextPostId":null}},
    "staticQueryHashes": ["2841359383","3708219967"]}