{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/nextjs/Nextjs/",
    "result": {"data":{"site":{"siteMetadata":{"title":"ksy8230.github.io/todayILearned/"}},"markdownRemark":{"id":"8717dbc5-f693-5394-8a0a-038deab05a57","excerpt":"리액트로 작업 중 서버사이드 렌더링이 필요한 페이지가 생겨 공부하기 시작한 NextJS 의 API 중 두 개만 우선 정리해 보자. NextJS…","html":"<p>리액트로 작업 중 서버사이드 렌더링이 필요한 페이지가 생겨 공부하기 시작한 NextJS 의 API 중 두 개만 우선 정리해 보자.<br>\nNextJS를 활용하면 리액트만 사용했을 때보다 편리하게 정적인 사이트 생성이 가능하다.</p>\n<p>가장 많은 예시로는 동적 파라미터를 갖고 있는 상세페이지들이 해당 예시에 적합하겠다.</p>\n<p>예를 들어 아래와 같은 주소를 갖는 포스팅 수정 페이지가 있다고 해 보자.<br>\n<a href=\"http://localhost:3000/review/edit/2\">http://localhost:3000/review/edit/2</a></p>\n<p>위와 같은 페이지는 10 개가 될수도 있고 100 개가 될 수 있다. 이런 경우 /edit/ 뒤에 존재하는 동적인 id 값을 nextjs 서버로부터 받아올 수 있는 함수를 사용해야 한다.</p>\n<h3 id=\"getstaticpaths\" style=\"position:relative;\">getStaticPaths<a href=\"#getstaticpaths\" aria-label=\"getstaticpaths permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<blockquote>\n<p>getStaticPaths : 동적인 데이터에 따라 미리 렌더링할 페이지의 동적인 경로를 지정하게 해 주는 함수</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre style=\"counter-reset: linenumber 0\" class=\"language-ts line-numbers\"><code class=\"language-ts\"><span class=\"token punctuation\">;</span><span class=\"token operator\">/</span>review<span class=\"token operator\">/</span>deit <span class=\"token operator\">/</span> <span class=\"token punctuation\">[</span>id<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>tsx\r\n\r\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getStaticPaths</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token keyword\">const</span> res <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http://localhost:8000/review/list\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 포스팅 리스트들을 가져오는 백엔드 API</span>\r\n  <span class=\"token keyword\">const</span> reviewList <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 응답 결과를 json 형태로 변환</span>\r\n  <span class=\"token keyword\">const</span> paths <span class=\"token operator\">=</span> reviewList<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>post<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\r\n    params<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> id<span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>post<span class=\"token punctuation\">.</span>id<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\r\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// json 배열 결과를 [ { params: { id: 1} }, { params: { id: 2} }, ... ] 형태로 변환</span>\r\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\r\n    paths<span class=\"token punctuation\">,</span>\r\n    fallback<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\r\n  <span class=\"token punctuation\">}</span>\r\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>getStaticPaths 함수를 사용해 동적 페이지로 활용될 수 있는 리스트의 id 값들을 <code class=\"language-text\">[ { params: { id: 1} }, { params: { id: 2} }, ... ]</code> 형태로 paths 값에 넣어 리턴시켜준다. 이것만으로 동적 파라미터 경로 준비는 완료가 된다.</p>\n<h3 id=\"getstaticprops\" style=\"position:relative;\">getStaticProps<a href=\"#getstaticprops\" aria-label=\"getstaticprops permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<blockquote>\n<p>getStaticProps : nextjs 서버에서 페이지를 빌드할 때 데이터를 패치시켜주는 함수</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre style=\"counter-reset: linenumber 0\" class=\"language-ts line-numbers\"><code class=\"language-ts\"><span class=\"token punctuation\">;</span><span class=\"token operator\">/</span>review<span class=\"token operator\">/</span>deit <span class=\"token operator\">/</span> <span class=\"token punctuation\">[</span>id<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>tsx\r\n\r\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getStaticPaths</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token keyword\">const</span> res <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http://localhost:8000/review/list\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 포스팅 리스트들을 가져오는 백엔드 API</span>\r\n  <span class=\"token keyword\">const</span> reviewList <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 응답 결과를 json 형태로 변환</span>\r\n  <span class=\"token keyword\">const</span> paths <span class=\"token operator\">=</span> reviewList<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>post<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\r\n    params<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> id<span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>post<span class=\"token punctuation\">.</span>id<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\r\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// json 배열 결과를 [ { params: { id: 1} }, { params: { id: 2} }, ... ] 형태로 변환</span>\r\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\r\n    paths<span class=\"token punctuation\">,</span>\r\n    fallback<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\r\n  <span class=\"token punctuation\">}</span>\r\n<span class=\"token punctuation\">}</span>\r\n\r\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> getStaticProps<span class=\"token operator\">:</span> <span class=\"token function-variable function\">GetStaticProps</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> params <span class=\"token punctuation\">}</span><span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token keyword\">const</span> res <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">http://localhost:8000/review/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>params<span class=\"token punctuation\">.</span>id<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 페이지에서 받아온 parmas의 id</span>\r\n  <span class=\"token keyword\">const</span> post <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\r\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\r\n    props<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> post <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 해당 페이지 컴포넌트에 상위 props로 주입</span>\r\n  <span class=\"token punctuation\">}</span>\r\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>getStaticProps 함수를 활용해 해당 페이지 경로의 params 값을 받아와서 id를 통해 적절한 API 호출을 시켜줄 수 있다.<br>\n1번 페이지는 id = 1 데이터에 맞는 상세 api 호출, 2번 페이지는 id = 2 데이터에 맞는 상세 api 호출 등등…</p>\n<p>위 두 개의 NextJS API 흐름을 가장 보기 쉽게 그린 그림은 아래와 같다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/24996316/186604363-637cd4af-75bd-4d20-8bcd-ffeebc4425ba.png\" alt=\"image\"></p>","frontmatter":{"title":"NextJS API 공부 - 동적 페이지 서버사이드 렌더링 작업 (getStaticPaths, getStaticProps)","date":"2022-08-25","description":null,"tags":["nextjs"]},"tableOfContents":"<ul>\n<li><a href=\"#getstaticpaths\">getStaticPaths</a></li>\n<li><a href=\"#getstaticprops\">getStaticProps</a></li>\n</ul>"},"previous":{"fields":{"slug":"/setting/react/웹취약점관련/"},"frontmatter":{"title":"웹 보안, 웹 취약점 설정"}},"next":{"fields":{"slug":"/bugLists/nextjs에 써드파티 라이브러리 추가 시 에러/"},"frontmatter":{"title":"nextjs에 써드파티 라이브러리 추가 시 에러"}}},"pageContext":{"id":"8717dbc5-f693-5394-8a0a-038deab05a57","previousPostId":"4c5d0b17-b2f9-50e8-bdaa-d3e656189870","nextPostId":"b06b2485-7b44-5567-9229-949f8e8c0585"}},
    "staticQueryHashes": ["2841359383","3708219967"]}