{"version":3,"file":"component---src-templates-blog-post-js-eeadb0444f25c76279dd.js","mappings":"uLAgEA,EA5De,SAAC,GAA4B,IAA1BA,EAAyB,EAAzBA,SAAUC,EAAe,EAAfA,SAEpBC,EADcC,oBACDH,EAASI,UAGfC,EAAAA,EAAAA,gBAAe,cAqBHC,kBAkBzB,OACE,uBAAKC,UAAU,iBAAiB,oBAAmBL,GACjD,0BAAQK,UAAU,iBAChB,gBAAC,EAAAC,KAAD,CAAMC,GAAG,KAAT,kBAEF,uBAAKF,UAAU,iBACb,4BAAON,GACP,4DAEE,qBAAGS,KAAK,kC,uDC7CZC,EAAM,SAAC,GAAwC,IAAD,MAArCC,EAAqC,EAArCA,YAAaC,EAAwB,EAAxBA,KAAMC,EAAkB,EAAlBA,KAAMC,EAAY,EAAZA,MAC9BC,GAASX,EAAAA,EAAAA,gBAAe,cAAxBW,KAgBFC,EAAkBL,GAAeI,EAAKE,aAAaN,YACnDO,EAAY,UAAGH,EAAKE,oBAAR,aAAG,EAAmBH,MAExC,OACE,gBAAC,IAAD,CACEK,eAAgB,CACdP,KAAAA,GAEFE,MAAOA,EACPM,cAAeF,EAAY,QAAWA,EAAiB,KACvDL,KAAM,CACJ,CACEQ,KAAK,cACLC,QAASN,GAEX,CACEO,SAAS,WACTD,QAASR,GAEX,CACES,SAAS,iBACTD,QAASN,GAEX,CACEO,SAAS,UACTD,QAAQ,WAEV,CACED,KAAK,eACLC,QAAQ,WAEV,CACED,KAAK,kBACLC,SAAS,UAAAP,EAAKE,oBAAL,mBAAmBO,cAAnB,eAA2BC,UAA3B,IAEX,CACEJ,KAAK,gBACLC,QAASR,GAEX,CACEO,KAAK,sBACLC,QAASN,IAEXU,OAAOb,MAKfH,EAAIiB,aAAe,CACjBf,KAAK,KACLC,KAAM,GACNF,YAAY,IAUd,O,8GCxFe,SAASiB,EAAT,GAA4B,IAATC,EAAQ,EAARA,KAC1BC,GAAeC,EAAAA,EAAAA,aAgBrB,OAfAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAaC,SAASC,cAAc,UACpCC,EAAa,CACjBC,IAAK,gCACLR,KAAAA,EACA,aAAc,WACdS,MAAO,eACPC,YAAa,YACbC,MAAO,QAETC,OAAOC,QAAQN,GAAYO,SAAQ,YAAmB,IAAjBC,EAAgB,KAAXC,EAAW,KACnDZ,EAAWa,aAAaF,EAAKC,MAE/Bf,EAAaiB,QAAQC,YAAYf,KAChC,CAACJ,IACG,uBAAKoB,GAAG,UAAUC,IAAKpB,ICjBhC,IAWA,EAXwB,SAAC,GAAiB,IAAfR,EAAc,EAAdA,QACzB,OACE,uBAAKhB,UAAU,cACb,uBACEA,UAAU,oBACV6C,wBAAyB,CAAEC,OAAQ9B,OC+D3C,EA9DyB,SAAC,GAAwB,IAAD,EAArB+B,EAAqB,EAArBA,KAAMtD,EAAe,EAAfA,SAC1BuD,EAAOD,EAAKE,eACZC,GAAY,UAAAH,EAAKtC,KAAKE,oBAAV,eAAwBH,QAAxB,QAGlB,OACE,gCACE,gBAAC,IAAD,CAAQf,SAAUA,EAAUe,MAAO0C,GACjC,gBAAC,IAAD,CACE1C,MAAOwC,EAAKG,YAAY3C,MACxBH,YAAa2C,EAAKG,YAAY9C,aAAe2C,EAAKI,UAEpD,uBAAKpD,UAAU,uBACb,2BACEA,UAAU,YACVqD,WAAS,EACTC,SAAS,6BAET,8BACE,sBAAIC,SAAS,YAAYP,EAAKG,YAAY3C,OAC1C,yBAAIwC,EAAKG,YAAYK,OAEvB,2BACEX,wBAAyB,CAAEC,OAAQE,EAAKS,MACxCF,SAAS,iBAGb,gBAAC,EAAD,CAAiBvC,QAAS+B,EAAKE,eAAeS,mBAEhD,2BACA,gBAACpC,EAAD,CAASC,KAAK","sources":["webpack://gatsby-starter-blog/./src/components/layout.js","webpack://gatsby-starter-blog/./src/components/seo.js","webpack://gatsby-starter-blog/./src/components/comment.js","webpack://gatsby-starter-blog/./src/components/tableOfContents.js","webpack://gatsby-starter-blog/./src/templates/blog-post.js"],"sourcesContent":["import * as React from \"react\"\r\nimport { Link, graphql, useStaticQuery } from \"gatsby\"\r\nimport LeftNavigation from \"./lefNavigation\"\r\n\r\nconst Layout = ({ location, children }) => {\r\n  const rootPath = `${__PATH_PREFIX__}/`\r\n  const isRootPath = location.pathname === rootPath\r\n  let header, sidebar\r\n\r\n  const data = useStaticQuery(graphql`\r\n    query postsByTags {\r\n      allMarkdownRemark(sort: { fields: frontmatter___date, order: ASC }) {\r\n        categories: group(field: frontmatter___tags) {\r\n          name: fieldValue\r\n          posts: edges {\r\n            node {\r\n              frontmatter {\r\n                title\r\n                date\r\n              }\r\n              fields {\r\n                slug\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  `)\r\n\r\n  const postsByTags = data.allMarkdownRemark\r\n\r\n  // if (isRootPath) {\r\n  //   header = (\r\n  //     <h1 className=\"main-heading\">\r\n  //       <Link to=\"/\">{title}</Link>\r\n  //     </h1>\r\n  //   )\r\n  //   sidebar = null\r\n  // } else {\r\n  //   header = (\r\n  //     <Link className=\"header-link-home\" to=\"/\">\r\n  //       {title}\r\n  //     </Link>\r\n  //   )\r\n  //   sidebar = <LeftNavigation data={postsByTags} location={location} />\r\n  // }\r\n\r\n  return (\r\n    <div className=\"global-wrapper\" data-is-root-path={isRootPath}>\r\n      <header className=\"global-header\">\r\n        <Link to=\"/\">Today I Learn</Link>\r\n      </header>\r\n      <div className=\"contents-wrap\">\r\n        <main>{children}</main>\r\n        <footer>\r\n          © 2021, COPYRIGHT ALL RIGHT\r\n          <a href=\"https://www.gatsbyjs.com\"></a>\r\n        </footer>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Layout\r\n","/**\r\n * SEO component that queries for data with\r\n *  Gatsby's useStaticQuery React hook\r\n *\r\n * See: https://www.gatsbyjs.com/docs/use-static-query/\r\n */\r\n\r\nimport * as React from \"react\"\r\nimport PropTypes from \"prop-types\"\r\nimport { Helmet } from \"react-helmet\"\r\nimport { useStaticQuery, graphql } from \"gatsby\"\r\n\r\nconst Seo = ({ description, lang, meta, title }) => {\r\n  const { site } = useStaticQuery(\r\n    graphql`\r\n      query {\r\n        site {\r\n          siteMetadata {\r\n            title\r\n            description\r\n            social {\r\n              twitter\r\n            }\r\n          }\r\n        }\r\n      }\r\n    `\r\n  )\r\n\r\n  const metaDescription = description || site.siteMetadata.description\r\n  const defaultTitle = site.siteMetadata?.title\r\n\r\n  return (\r\n    <Helmet\r\n      htmlAttributes={{\r\n        lang,\r\n      }}\r\n      title={title}\r\n      titleTemplate={defaultTitle ? `%s | ${defaultTitle}` : null}\r\n      meta={[\r\n        {\r\n          name: `description`,\r\n          content: metaDescription,\r\n        },\r\n        {\r\n          property: `og:title`,\r\n          content: title,\r\n        },\r\n        {\r\n          property: `og:description`,\r\n          content: metaDescription,\r\n        },\r\n        {\r\n          property: `og:type`,\r\n          content: `website`,\r\n        },\r\n        {\r\n          name: `twitter:card`,\r\n          content: `summary`,\r\n        },\r\n        {\r\n          name: `twitter:creator`,\r\n          content: site.siteMetadata?.social?.twitter || ``,\r\n        },\r\n        {\r\n          name: `twitter:title`,\r\n          content: title,\r\n        },\r\n        {\r\n          name: `twitter:description`,\r\n          content: metaDescription,\r\n        },\r\n      ].concat(meta)}\r\n    />\r\n  )\r\n}\r\n\r\nSeo.defaultProps = {\r\n  lang: `en`,\r\n  meta: [],\r\n  description: ``,\r\n}\r\n\r\nSeo.propTypes = {\r\n  description: PropTypes.string,\r\n  lang: PropTypes.string,\r\n  meta: PropTypes.arrayOf(PropTypes.object),\r\n  title: PropTypes.string.isRequired,\r\n}\r\n\r\nexport default Seo\r\n","import React, { createRef, useEffect } from \"react\"\r\n\r\nexport default function Comment({ repo }) {\r\n  const containerRef = createRef()\r\n  useEffect(() => {\r\n    const utterances = document.createElement(\"script\")\r\n    const attributes = {\r\n      src: \"https://utteranc.es/client.js\",\r\n      repo,\r\n      \"issue-term\": \"pathname\",\r\n      theme: \"github-light\",\r\n      crossOrigin: \"anonymous\",\r\n      async: \"true\",\r\n    }\r\n    Object.entries(attributes).forEach(([key, value]) => {\r\n      utterances.setAttribute(key, value)\r\n    })\r\n    containerRef.current.appendChild(utterances)\r\n  }, [repo])\r\n  return <div id=\"comment\" ref={containerRef} />\r\n}\r\n","import React from \"react\"\r\n\r\nconst TableOfContents = ({ content }) => {\r\n  return (\r\n    <div className=\"blog-table\">\r\n      <div\r\n        className=\"table-of-contents\"\r\n        dangerouslySetInnerHTML={{ __html: content }}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default TableOfContents\r\n","import * as React from \"react\"\r\nimport { Link, graphql } from \"gatsby\"\r\n\r\nimport Layout from \"../components/layout\"\r\nimport Seo from \"../components/seo\"\r\nimport Comment from \"../components/comment\"\r\nimport TableOfContents from \"../components/tableOfContents\"\r\n\r\nconst BlogPostTemplate = ({ data, location }) => {\r\n  const post = data.markdownRemark\r\n  const siteTitle = data.site.siteMetadata?.title || `Title`\r\n  // const { previous, next } = data\r\n\r\n  return (\r\n    <>\r\n      <Layout location={location} title={siteTitle}>\r\n        <Seo\r\n          title={post.frontmatter.title}\r\n          description={post.frontmatter.description || post.excerpt}\r\n        />\r\n        <div className=\"blog-post-container\">\r\n          <article\r\n            className=\"blog-post\"\r\n            itemScope\r\n            itemType=\"http://schema.org/Article\"\r\n          >\r\n            <header>\r\n              <h1 itemProp=\"headline\">{post.frontmatter.title}</h1>\r\n              <p>{post.frontmatter.date}</p>\r\n            </header>\r\n            <section\r\n              dangerouslySetInnerHTML={{ __html: post.html }}\r\n              itemProp=\"articleBody\"\r\n            />\r\n          </article>\r\n          <TableOfContents content={data.markdownRemark.tableOfContents} />\r\n        </div>\r\n        <hr />\r\n        <Comment repo=\"ksy8230/blog-commnets\" />\r\n        {/* <nav className=\"blog-post-nav\">\r\n          <ul\r\n            style={{\r\n              display: `flex`,\r\n              flexWrap: `wrap`,\r\n              justifyContent: `space-between`,\r\n              listStyle: `none`,\r\n              padding: 0,\r\n            }}\r\n          >\r\n            <li>\r\n              {previous && (\r\n                <Link to={previous.fields.slug} rel=\"prev\">\r\n                  ← {previous.frontmatter.title}\r\n                </Link>\r\n              )}\r\n            </li>\r\n            <li>\r\n              {next && (\r\n                <Link to={next.fields.slug} rel=\"next\">\r\n                  {next.frontmatter.title} →\r\n                </Link>\r\n              )}\r\n            </li>\r\n          </ul>\r\n        </nav> */}\r\n      </Layout>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default BlogPostTemplate\r\n\r\nexport const pageQuery = graphql`\r\n  query BlogPostBySlug(\r\n    $id: String!\r\n    $previousPostId: String\r\n    $nextPostId: String\r\n  ) {\r\n    site {\r\n      siteMetadata {\r\n        title\r\n      }\r\n    }\r\n    markdownRemark(id: { eq: $id }) {\r\n      id\r\n      excerpt(pruneLength: 160)\r\n      html\r\n      frontmatter {\r\n        title\r\n        date(formatString: \"YYYY-MM-DD\")\r\n        description\r\n        tags\r\n      }\r\n      tableOfContents\r\n    }\r\n    previous: markdownRemark(id: { eq: $previousPostId }) {\r\n      fields {\r\n        slug\r\n      }\r\n      frontmatter {\r\n        title\r\n      }\r\n    }\r\n    next: markdownRemark(id: { eq: $nextPostId }) {\r\n      fields {\r\n        slug\r\n      }\r\n      frontmatter {\r\n        title\r\n      }\r\n    }\r\n  }\r\n`\r\n"],"names":["location","children","isRootPath","__PATH_PREFIX__","pathname","useStaticQuery","allMarkdownRemark","className","Link","to","href","Seo","description","lang","meta","title","site","metaDescription","siteMetadata","defaultTitle","htmlAttributes","titleTemplate","name","content","property","social","twitter","concat","defaultProps","Comment","repo","containerRef","createRef","useEffect","utterances","document","createElement","attributes","src","theme","crossOrigin","async","Object","entries","forEach","key","value","setAttribute","current","appendChild","id","ref","dangerouslySetInnerHTML","__html","data","post","markdownRemark","siteTitle","frontmatter","excerpt","itemScope","itemType","itemProp","date","html","tableOfContents"],"sourceRoot":""}