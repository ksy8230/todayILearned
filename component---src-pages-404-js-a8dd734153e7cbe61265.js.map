{"version":3,"file":"component---src-pages-404-js-a8dd734153e7cbe61265.js","mappings":"uLAgEA,EA5De,SAAC,GAA4B,IAA1BA,EAAyB,EAAzBA,SAAUC,EAAe,EAAfA,SAEpBC,EADQ,MACKF,EAASG,UAGfC,EAAAA,EAAAA,gBAAe,cAqBHC,kBAkBzB,OACE,uBAAKC,UAAU,iBAAiB,oBAAmBJ,GACjD,0BAAQI,UAAU,iBAChB,gBAAC,EAAAC,KAAD,CAAMC,GAAG,KAAT,kBAEF,uBAAKF,UAAU,iBACb,4BAAOL,GACP,4DAEE,qBAAGQ,KAAK,kC,uDC7CZC,EAAM,SAAC,GAAwC,IAAD,MAArCC,EAAqC,EAArCA,YAAaC,EAAwB,EAAxBA,KAAMC,EAAkB,EAAlBA,KAAMC,EAAY,EAAZA,MAC9BC,GAASX,EAAAA,EAAAA,gBAAe,cAAxBW,KAgBFC,EAAkBL,GAAeI,EAAKE,aAAaN,YACnDO,EAAY,UAAGH,EAAKE,oBAAR,aAAG,EAAmBH,MAExC,OACE,gBAAC,IAAD,CACEK,eAAgB,CACdP,KAAAA,GAEFE,MAAOA,EACPM,cAAeF,EAAY,QAAWA,EAAiB,KACvDL,KAAM,CACJ,CACEQ,KAAK,cACLC,QAASN,GAEX,CACEO,SAAS,WACTD,QAASR,GAEX,CACES,SAAS,iBACTD,QAASN,GAEX,CACEO,SAAS,UACTD,QAAQ,WAEV,CACED,KAAK,eACLC,QAAQ,WAEV,CACED,KAAK,kBACLC,SAAS,UAAAP,EAAKE,oBAAL,mBAAmBO,cAAnB,eAA2BC,UAA3B,IAEX,CACEJ,KAAK,gBACLC,QAASR,GAEX,CACEO,KAAK,sBACLC,QAASN,IAEXU,OAAOb,MAKfH,EAAIiB,aAAe,CACjBf,KAAK,KACLC,KAAM,GACNF,YAAY,IAUd,O,8DCxEA,UAZqB,SAAC,GAAwB,IAAtBiB,EAAqB,EAArBA,KAAM5B,EAAe,EAAfA,SACtB6B,EAAYD,EAAKb,KAAKE,aAAaH,MAEzC,OACE,gBAAC,IAAD,CAAQd,SAAUA,EAAUc,MAAOe,GACjC,gBAAC,IAAD,CAAKf,MAAM,mBACX,4CACA","sources":["webpack://gatsby-starter-blog/./src/components/layout.js","webpack://gatsby-starter-blog/./src/components/seo.js","webpack://gatsby-starter-blog/./src/pages/404.js"],"sourcesContent":["import * as React from \"react\"\nimport { Link, graphql, useStaticQuery } from \"gatsby\"\nimport LeftNavigation from \"./lefNavigation\"\n\nconst Layout = ({ location, children }) => {\n  const rootPath = `${__PATH_PREFIX__}/`\n  const isRootPath = location.pathname === rootPath\n  let header, sidebar\n\n  const data = useStaticQuery(graphql`\n    query postsByTags {\n      allMarkdownRemark(sort: { fields: frontmatter___date, order: ASC }) {\n        categories: group(field: frontmatter___tags) {\n          name: fieldValue\n          posts: edges {\n            node {\n              frontmatter {\n                title\n                date\n              }\n              fields {\n                slug\n              }\n            }\n          }\n        }\n      }\n    }\n  `)\n\n  const postsByTags = data.allMarkdownRemark\n\n  // if (isRootPath) {\n  //   header = (\n  //     <h1 className=\"main-heading\">\n  //       <Link to=\"/\">{title}</Link>\n  //     </h1>\n  //   )\n  //   sidebar = null\n  // } else {\n  //   header = (\n  //     <Link className=\"header-link-home\" to=\"/\">\n  //       {title}\n  //     </Link>\n  //   )\n  //   sidebar = <LeftNavigation data={postsByTags} location={location} />\n  // }\n\n  return (\n    <div className=\"global-wrapper\" data-is-root-path={isRootPath}>\n      <header className=\"global-header\">\n        <Link to=\"/\">Today I Learn</Link>\n      </header>\n      <div className=\"contents-wrap\">\n        <main>{children}</main>\n        <footer>\n          Â© 2021, COPYRIGHT ALL RIGHT\n          <a href=\"https://www.gatsbyjs.com\"></a>\n        </footer>\n      </div>\n    </div>\n  )\n}\n\nexport default Layout\n","/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.com/docs/use-static-query/\n */\n\nimport * as React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { Helmet } from \"react-helmet\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nconst Seo = ({ description, lang, meta, title }) => {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            social {\n              twitter\n            }\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n  const defaultTitle = site.siteMetadata?.title\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title}\n      titleTemplate={defaultTitle ? `%s | ${defaultTitle}` : null}\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:title`,\n          content: title,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        },\n        {\n          name: `twitter:card`,\n          content: `summary`,\n        },\n        {\n          name: `twitter:creator`,\n          content: site.siteMetadata?.social?.twitter || ``,\n        },\n        {\n          name: `twitter:title`,\n          content: title,\n        },\n        {\n          name: `twitter:description`,\n          content: metaDescription,\n        },\n      ].concat(meta)}\n    />\n  )\n}\n\nSeo.defaultProps = {\n  lang: `en`,\n  meta: [],\n  description: ``,\n}\n\nSeo.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.arrayOf(PropTypes.object),\n  title: PropTypes.string.isRequired,\n}\n\nexport default Seo\n","import * as React from \"react\"\nimport { graphql } from \"gatsby\"\n\nimport Layout from \"../components/layout\"\nimport Seo from \"../components/seo\"\n\nconst NotFoundPage = ({ data, location }) => {\n  const siteTitle = data.site.siteMetadata.title\n\n  return (\n    <Layout location={location} title={siteTitle}>\n      <Seo title=\"404: Not Found\" />\n      <h1>404: Not Found</h1>\n      <p>You just hit a route that doesn&#39;t exist... the sadness.</p>\n    </Layout>\n  )\n}\n\nexport default NotFoundPage\n\nexport const pageQuery = graphql`\n  query {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n  }\n`\n"],"names":["location","children","isRootPath","pathname","useStaticQuery","allMarkdownRemark","className","Link","to","href","Seo","description","lang","meta","title","site","metaDescription","siteMetadata","defaultTitle","htmlAttributes","titleTemplate","name","content","property","social","twitter","concat","defaultProps","data","siteTitle"],"sourceRoot":""}