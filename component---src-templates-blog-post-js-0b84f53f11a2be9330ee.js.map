{"version":3,"file":"component---src-templates-blog-post-js-0b84f53f11a2be9330ee.js","mappings":"uLAgEA,EA5De,SAAC,GAA4B,IAA1BA,EAAyB,EAAzBA,SAAUC,EAAe,EAAfA,SAEpBC,EADQ,MACKF,EAASG,UAGfC,EAAAA,EAAAA,gBAAe,cAqBHC,kBAkBzB,OACE,uBAAKC,UAAU,iBAAiB,oBAAmBJ,GACjD,0BAAQI,UAAU,iBAChB,gBAAC,EAAAC,KAAD,CAAMC,GAAG,KAAT,kBAEF,uBAAKF,UAAU,iBACb,4BAAOL,GACP,4DAEE,qBAAGQ,KAAK,kC,uDC7CZC,EAAM,SAAC,GAAwC,IAAD,MAArCC,EAAqC,EAArCA,YAAaC,EAAwB,EAAxBA,KAAMC,EAAkB,EAAlBA,KAAMC,EAAY,EAAZA,MAC9BC,GAASX,EAAAA,EAAAA,gBAAe,cAAxBW,KAgBFC,EAAkBL,GAAeI,EAAKE,aAAaN,YACnDO,EAAY,UAAGH,EAAKE,oBAAR,aAAG,EAAmBH,MAExC,OACE,gBAAC,IAAD,CACEK,eAAgB,CACdP,KAAAA,GAEFE,MAAOA,EACPM,cAAeF,EAAY,QAAWA,EAAiB,KACvDL,KAAM,CACJ,CACEQ,KAAK,cACLC,QAASN,GAEX,CACEO,SAAS,WACTD,QAASR,GAEX,CACES,SAAS,iBACTD,QAASN,GAEX,CACEO,SAAS,UACTD,QAAQ,WAEV,CACED,KAAK,eACLC,QAAQ,WAEV,CACED,KAAK,kBACLC,SAAS,UAAAP,EAAKE,oBAAL,mBAAmBO,cAAnB,eAA2BC,UAA3B,IAEX,CACEJ,KAAK,gBACLC,QAASR,GAEX,CACEO,KAAK,sBACLC,QAASN,IAEXU,OAAOb,MAKfH,EAAIiB,aAAe,CACjBf,KAAK,KACLC,KAAM,GACNF,YAAY,IAUd,O,wEC1BA,UA1DyB,SAAC,GAAwB,IAAD,EAArBiB,EAAqB,EAArBA,KAAM5B,EAAe,EAAfA,SAC1B6B,EAAOD,EAAKE,eACZC,GAAY,UAAAH,EAAKb,KAAKE,oBAAV,eAAwBH,QAAxB,QACVkB,EAAmBJ,EAAnBI,SAAUC,EAASL,EAATK,KAElB,OACE,gCACE,gBAAC,IAAD,CAAQjC,SAAUA,EAAUc,MAAOiB,GACjC,gBAAC,IAAD,CACEjB,MAAOe,EAAKK,YAAYpB,MACxBH,YAAakB,EAAKK,YAAYvB,aAAekB,EAAKM,UAEpD,2BACE7B,UAAU,YACV8B,WAAS,EACTC,SAAS,6BAET,8BACE,sBAAIC,SAAS,YAAYT,EAAKK,YAAYpB,OAC1C,yBAAIe,EAAKK,YAAYK,OAEvB,2BACEC,wBAAyB,CAAEC,OAAQZ,EAAKa,MACxCJ,SAAS,gBAEX,4BAEF,uBAAKhC,UAAU,iBACb,sBACEqC,MAAO,CACLC,QAAQ,OACRC,SAAS,OACTC,eAAe,gBACfC,UAAU,OACVC,QAAS,IAGX,0BACGhB,GACC,gBAAC,EAAAzB,KAAD,CAAMC,GAAIwB,EAASiB,OAAOC,KAAMC,IAAI,QAApC,KACKnB,EAASE,YAAYpB,QAI9B,0BACGmB,GACC,gBAAC,EAAA1B,KAAD,CAAMC,GAAIyB,EAAKgB,OAAOC,KAAMC,IAAI,QAC7BlB,EAAKC,YAAYpB,MADpB","sources":["webpack://gatsby-starter-blog/./src/components/layout.js","webpack://gatsby-starter-blog/./src/components/seo.js","webpack://gatsby-starter-blog/./src/templates/blog-post.js"],"sourcesContent":["import * as React from \"react\"\nimport { Link, graphql, useStaticQuery } from \"gatsby\"\nimport LeftNavigation from \"./lefNavigation\"\n\nconst Layout = ({ location, children }) => {\n  const rootPath = `${__PATH_PREFIX__}/`\n  const isRootPath = location.pathname === rootPath\n  let header, sidebar\n\n  const data = useStaticQuery(graphql`\n    query postsByTags {\n      allMarkdownRemark(sort: { fields: frontmatter___date, order: ASC }) {\n        categories: group(field: frontmatter___tags) {\n          name: fieldValue\n          posts: edges {\n            node {\n              frontmatter {\n                title\n                date\n              }\n              fields {\n                slug\n              }\n            }\n          }\n        }\n      }\n    }\n  `)\n\n  const postsByTags = data.allMarkdownRemark\n\n  // if (isRootPath) {\n  //   header = (\n  //     <h1 className=\"main-heading\">\n  //       <Link to=\"/\">{title}</Link>\n  //     </h1>\n  //   )\n  //   sidebar = null\n  // } else {\n  //   header = (\n  //     <Link className=\"header-link-home\" to=\"/\">\n  //       {title}\n  //     </Link>\n  //   )\n  //   sidebar = <LeftNavigation data={postsByTags} location={location} />\n  // }\n\n  return (\n    <div className=\"global-wrapper\" data-is-root-path={isRootPath}>\n      <header className=\"global-header\">\n        <Link to=\"/\">Today I Learn</Link>\n      </header>\n      <div className=\"contents-wrap\">\n        <main>{children}</main>\n        <footer>\n          © 2021, COPYRIGHT ALL RIGHT\n          <a href=\"https://www.gatsbyjs.com\"></a>\n        </footer>\n      </div>\n    </div>\n  )\n}\n\nexport default Layout\n","/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.com/docs/use-static-query/\n */\n\nimport * as React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { Helmet } from \"react-helmet\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nconst Seo = ({ description, lang, meta, title }) => {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            social {\n              twitter\n            }\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n  const defaultTitle = site.siteMetadata?.title\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title}\n      titleTemplate={defaultTitle ? `%s | ${defaultTitle}` : null}\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:title`,\n          content: title,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        },\n        {\n          name: `twitter:card`,\n          content: `summary`,\n        },\n        {\n          name: `twitter:creator`,\n          content: site.siteMetadata?.social?.twitter || ``,\n        },\n        {\n          name: `twitter:title`,\n          content: title,\n        },\n        {\n          name: `twitter:description`,\n          content: metaDescription,\n        },\n      ].concat(meta)}\n    />\n  )\n}\n\nSeo.defaultProps = {\n  lang: `en`,\n  meta: [],\n  description: ``,\n}\n\nSeo.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.arrayOf(PropTypes.object),\n  title: PropTypes.string.isRequired,\n}\n\nexport default Seo\n","import * as React from \"react\"\nimport { Link, graphql } from \"gatsby\"\n\nimport Layout from \"../components/layout\"\nimport Seo from \"../components/seo\"\n\nconst BlogPostTemplate = ({ data, location }) => {\n  const post = data.markdownRemark\n  const siteTitle = data.site.siteMetadata?.title || `Title`\n  const { previous, next } = data\n\n  return (\n    <>\n      <Layout location={location} title={siteTitle}>\n        <Seo\n          title={post.frontmatter.title}\n          description={post.frontmatter.description || post.excerpt}\n        />\n        <article\n          className=\"blog-post\"\n          itemScope\n          itemType=\"http://schema.org/Article\"\n        >\n          <header>\n            <h1 itemProp=\"headline\">{post.frontmatter.title}</h1>\n            <p>{post.frontmatter.date}</p>\n          </header>\n          <section\n            dangerouslySetInnerHTML={{ __html: post.html }}\n            itemProp=\"articleBody\"\n          />\n          <hr />\n        </article>\n        <nav className=\"blog-post-nav\">\n          <ul\n            style={{\n              display: `flex`,\n              flexWrap: `wrap`,\n              justifyContent: `space-between`,\n              listStyle: `none`,\n              padding: 0,\n            }}\n          >\n            <li>\n              {previous && (\n                <Link to={previous.fields.slug} rel=\"prev\">\n                  ← {previous.frontmatter.title}\n                </Link>\n              )}\n            </li>\n            <li>\n              {next && (\n                <Link to={next.fields.slug} rel=\"next\">\n                  {next.frontmatter.title} →\n                </Link>\n              )}\n            </li>\n          </ul>\n        </nav>\n      </Layout>\n    </>\n  )\n}\n\nexport default BlogPostTemplate\n\nexport const pageQuery = graphql`\n  query BlogPostBySlug(\n    $id: String!\n    $previousPostId: String\n    $nextPostId: String\n  ) {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    markdownRemark(id: { eq: $id }) {\n      id\n      excerpt(pruneLength: 160)\n      html\n      frontmatter {\n        title\n        date(formatString: \"YYYY-MM-DD\")\n        description\n        tags\n      }\n    }\n    previous: markdownRemark(id: { eq: $previousPostId }) {\n      fields {\n        slug\n      }\n      frontmatter {\n        title\n      }\n    }\n    next: markdownRemark(id: { eq: $nextPostId }) {\n      fields {\n        slug\n      }\n      frontmatter {\n        title\n      }\n    }\n  }\n`\n"],"names":["location","children","isRootPath","pathname","useStaticQuery","allMarkdownRemark","className","Link","to","href","Seo","description","lang","meta","title","site","metaDescription","siteMetadata","defaultTitle","htmlAttributes","titleTemplate","name","content","property","social","twitter","concat","defaultProps","data","post","markdownRemark","siteTitle","previous","next","frontmatter","excerpt","itemScope","itemType","itemProp","date","dangerouslySetInnerHTML","__html","html","style","display","flexWrap","justifyContent","listStyle","padding","fields","slug","rel"],"sourceRoot":""}